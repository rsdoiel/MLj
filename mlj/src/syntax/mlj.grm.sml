functor MLJLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : MLJ_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* Deviations from the standard.
   1. MLJ extensions.  These involve extra productions for attyp,
      decitemp, specitemp, as well as new terms.
     
      We allow 
exception id = javalongid
      in all declarations, not just strdecs.  Andrew will have to
      throw this out himself if he doesn't like it.

      It is assumed that in Andrew's syntax,
         id == vid
         javaid == JAVAID (strings not containing a period)
         javalongid == JAVALONGID (strings containing a period)

      We munge all modifiers together into the JavaFlags.javaflag
      type, leaving Andrew to check whether the right modifiers
      have been used.

   2. longvid s may have spaces between the names and the dots.
      This is like SML/NJ and for the same reason; namely we
      sort them out here rather than in the lexer.
     
      This is arguably an improvement in the language, since it allows
      you to construct arbitrarily long paths without having to put them
      all on the same line.
   3. The 
         dec ::= "val" tyvarseq valbind
      and
         valbind ::= "rec" valbind
      productions are replaced by
         dec ::= "val" tyvarseq valbind
         dec ::= "val" tyvarseq "rec" valbind
      So recs can only occur in the obvious place.  
      This also appears to be what NJ does
   4. We do not resolve fixity at this stage.  This means certain
      productions have to be changed.

      The non-terminals appexp and infexp do not appear.
      The production
         exp::=infexp
      is replaced by
         exp::=atexp_spaced
      (where XXXs_spaced is defined by
         XXXs_spaced::=XXX
         XXXs_spaced::=XXX XXXs_spaced
         )

      The productions
         pat::=atpat
         pat::=<op>longvid atpat
         pat::=pat1 vid pat2

      are replaced by
         pat::=atpats_spaced

    
      In general, the attitude is to do as little about fixity as
      possible.  For example we could observe that a sequence of
      2 expressions must be a function application, but it seems better
      to do all fixity checking in one place so that the error messages
      are consistent.
   5. The productions for spec ::= datatype [blah]
      are deleted and replaced by the datatype productions for
      decitem.  This has the useful consequence that datatypes in 
      signatures can have WITHTYPE, and the less useful one that the
      constructor can be qualified with op.
   6. In type declarations declaring several types in a signature,
      some of the types may be declared equal to types while others
      may not, though technically I think we should reject this.
      EG:
signature S=
sig
  type 'a t
  and u = int
end

      It would be easy to change this, but in my view pointless,
      since I can't believe the definition really means this.
      SML/NJ agrees with me.
   7. SHARING and SHARING TYPE are implemented as separate spec items.
      This doesn't really seem to affect anything.  The syntax for sharing 
      is pretty stupid; there is no way of knowing how much is covered
      by the sharing.  (Without the semicolon, in the above example the
      spec could cover A and B or only B or neither).  I presume that
      Andrew will make a sharing declaration cover everything before it
      in the signature, which means this is OK.
   
      We also assume k>=2 in the derived form for 
      spec::=spec sharing longstrid1 = . . . = longstridk
      since k=1 makes no sense (and is not accepted by New Jersey).
   8. We allow let dec in exp;exp;...;exp end
      (Like New Jersey)
   9. We allow New Jersey style OR patterns.
   10.We don't check that in a function declaration the names of the
      function and the number of patterns are all identical (this would
      require fixity checking for one thing).  So we cannot use this
      information to resolve conflicts with CASE and HANDLE.
   11."op =" is permitted in patterns.  This is an extension
      to allow Andrew to define = in the basis.   

   Productions different but equivalent to the standard.
   1. Various non-terminals come in two forms, one having an extra "p" suffix.
      For example, corresponding to the nonterminal atexp
      in the standard we have atexpp and atexp. 
      The difference is that the p nonterminals do not have
      locations attached to them, while the non-p nonterminals do.
   2. The empty production for dec and the production dec::=dec1 ; dec2
      are deleted.  The others are replaced by productions for decitemp
      (which is equivalent to decitem but without a location).  New
      productions for dec are:
         dec := <empty>
         dec := SEMICOLON dec
         dec := decitem dec
   3. Numerous productions are added for things not spelt out in
      BNF form in the standard (eg "vid1 ... vidn") and so on.
      Bit off really - why didn't they do it properly?
   4. patrows are allowed to be empty, and the option on it in the
      production atpat ::= { <patrow> } is omitted.
   5. The precedence of patterns and types is made explicit.
      The production
         pat := <op>vid<:ty> as pat
      is handled specially.  We make <op>vid as pat bind at a low level.
      <op>vid:ty as pat
      needs a higher precedence because <pat>:ty is allowed.  So we
      allow <pat>:ty as pat (with precedences inserted) by
      reconstructing the first pattern with the layer at the lowest level,
      using the layerpat function.
   6. New syntax classes vidpat, longvidpat, oplongvidpat are created.
      A vidpat is a vid not an equals sign.  We ban equals signs
      from almost all positions in patterns (to make parsing easier).
      The only exception is in lab = pat, where lab may be =
      (as permitted by the standard) and of course the = must be =.
      It is forbidden by the standard to rebind =, so we may assume
      that = cannot be in a bound position in a pattern, nor can it
      be in a constructor position (since = is not a constructor and
      cannot be made one).
   7. A new class tyvar1seq is introduced, identical to tyvarseq
      except that it does not contain the empty string.
      The productions for dec:
         val tyvarseq valbind
         val tyvarseq rec valbind
         fun tyvarseq valbind
      are each replaced by two productions, one in which tyvarseq is
      changed to tyvar1seq, and one in which tyvarseq is replaced by
      the empty string.

   8. New classes atty, attyc, tytuple are introduced, to avoid
      shift reduce conflicts and get the right precedences.
      The productions for these are:
          atty ::= TYVAR
          atty ::= LBRACE tyrow RBRACE
          atty ::= LPAREN ty RPAREN

          attyc ::= atty
          attyc ::= LPAREN ty COMMA ty commatyseq RPAREN longtycon
          attyc ::= attyc longtycon

          tytuple ::= attyc
          tytuple ::= attyc ASTERISK tytupl

      The productions for ty are replaced by:
          ty ::= tytuple
          ty ::= tytuple ARROW ty

      (commatyseq would be needed anyway and is defined by
          commatyseq ::= <empty>
          commatyseq ::= COMMA ty commatyseq
      )
   
   9. The derived form
      sigexp ::= sigexp WHERE TYPE [blah] AND TYPE [blah] . . . 
      caused grief because it gives a shift/reduce conflict
      with (for example)
signature A=B where type a=b and
      Here, with the rules provided, we cannot work out what to
      do with and.  If followed by TYPE, we know it must be
      part of the sigexp, otherwise it must be part of the
      signature ... and C=D.
      (This is an open bug in New Jersey - see a message by Dave MacQueen
       in comp.lang.ml).

      SOLUTION.  We add new classes  
         strexpand
         strexpandp
         strbinditemand
         sigexpwand
         sigexpand
         strdescitemand
         sigbinditemand
         funbinditemand
      to be used instead of strexp, strexpp, strbinditem, sigexpw, sigexp,
      strdescitem, sigbinditem (respectively).  Each one contains an extra
      AND and is used wherever and AND can follow.  This stops AND appearing
      in the follow set for sigexp.
      
*)
open Syntax

val SAS=Symbol.symbolAsciiString
val bad_symbol=SAS("????")
val bad_tyvar=SAS("`????")

val asterisk=SAS("*")
val equalop=SAS("=")

(* Symbol forms of ML reserved words. *)
val NewS = SAS "new"
val CastS = SAS "cast"
val ThisS = SAS "this"
val FieldS = SAS "field"
val FinalS = SAS "final"
val SuperS = SAS "super"
val InvokeS = SAS "invoke"
val MethodS = SAS "method"
val PublicS = SAS "public"
val StaticS = SAS "static"
val ExtendsS = SAS "extends"
val PrivateS = SAS "private"
val AbstractS = SAS "abstract"
val GetfieldS = SAS "getfield"
val PutfieldS = SAS "putfield"
val VolatileS = SAS "volatile"
val ClasstypeS = SAS "classtype"
val ProtectedS = SAS "protected"
val TransientS = SAS "transient"
val ImplementsS = SAS "implements"
val InstanceofS = SAS "instanceof"
val ConstructorS = SAS "constructor"
val SynchronizedS = SAS "synchronized"
val InterfacetypeS = SAS "interfacetype"

fun ERROR(l,r,mess)=LexState.err(Error.error({left=l,right=r},mess))
fun WARN(l,r,mess)=LexState.err(Error.warning({left=l,right=r},mess))

fun infix_check(left,right,s)=
(* Checks whether an infix digit with boundaries left and right
   has the right size; if not returns ~1.
   *)
   if right-left>1
   then
      ~1
   else
      (case Int.fromString s of SOME i => i)


fun infix_check2(left,right,i)=
(* Given result of infix_check, and the right and left boundaries of
   the INFIX/INFIXR keyword, returns digit, or if there is an error
   and the keyword was not inserted returns 9 and produces an 
   error message. *)
   if i>=0
   then
      i
   else
     (if left<right
      then
         ERROR(left,right,"Precedence must be a single decimal digit")
      else
         ()
      ;
      9
      )
   
fun forceopvid(x:OpLongVid,l,r)=
(* Force a oplongvid to an opvid, producing an error message if
   it can't be done.  l and r give the region of the oplongvid. *)
   (case x of
      Short s => (false,s)
   |  OpShort s => (true,s)
   |  _ => 
      (ERROR(l,r,"Illegal structure reference");
      (false,bad_symbol))
   )

fun forcepatopvid(l,r,x,b)=
(* Force x to be an opvid or return a dummy and if b is true 
   give an error message *)

   (case x of
      PatVar y => forceopvid(y,l,r)
   |  _ =>
      (if b then ERROR(l,r,"Pattern to left of AS not a variable") else ();
       (false,bad_symbol))
   )        
   

fun mtuple(x:Ty list,l,r)=
(* Turn x into a type where x is a tuple list of length 1 or more *)
   (case x of
      [x] => x
   |  _   => ({left=l,right=r},TyTuple x)
   )

val nobound={explicit=[],implicit=[]}

fun ASerror(l,r)=
(* complain about the AS from l to r. *)
   if l+2=r 
   then
      ERROR(l,r,"AS does not follow a variable")
   else (* don't bother, the AS was inserted *)
      () 

exception LayerPat

fun layerpat(lpat:PrePat,tyo:Ty option,rpat as ({right,...},_):Pat,l:int,r:int)
      :PrePat=
(* This function is used for the pat COLON ty AS pat and pat AS pat
   case, where we need to split off the rightmost vid in the left
   pattern and replace it by a layered pattern. 
   We do this, returning the whole pattern as modified.  If there is
   an error we return the original left pattern and, if
   l+2=r prints an error message complaining about the AS 
   from position l to r.  (Otherwise the AS is inappropriate.) *)
let
   fun lp(lpat:PrePat)= (* Similar to layerpat without the arguments and
                           raises LayerPat if there's an error. *)
   (case lpat of
      PatVar(Short vid) =>
         PatLayer((false,vid),tyo,rpat)
   |  PatVar(OpShort vid) =>
         PatLayer((true,vid),tyo,rpat)
   |  FlatPat pl => FlatPat(lpp_list pl)
   |  OrPat pl => OrPat(lpp_list pl)
   |  _ => raise LayerPat
   )
   and lpp(pat as ({left,...},ppat):Pat)= 
      (* Similar to lp but operates on pats instead *)
      ({left=left,right=right},lp ppat)
   and lpp_list(pl:Pat list)= 
   (* like lpp but operates on a list of patterns of length at least 1,
      and applies lpp to the last element. *)
   (case pl of
      [p] => [lpp p]
   |  h::t => h::(lpp_list t)
   )
in
   lp lpat handle LayerPat =>
     (ASerror(l,r)
      ;
      lpat
      )
end
   
       

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\002\000\000\000\000\000\
\\001\000\002\000\012\003\003\000\012\003\011\000\012\003\012\000\012\003\
\\017\000\012\003\020\000\012\003\023\000\012\003\025\000\012\003\
\\029\000\012\003\030\000\012\003\034\000\012\003\036\000\012\003\
\\037\000\012\003\040\000\012\003\041\000\012\003\044\000\012\003\
\\049\000\012\003\051\000\012\003\053\000\012\003\054\000\012\003\
\\061\000\012\003\062\000\012\003\066\000\049\003\069\000\012\003\
\\072\000\012\003\074\000\012\003\078\000\012\003\082\000\012\003\
\\086\000\012\003\087\000\012\003\088\000\012\003\091\000\012\003\
\\092\000\012\003\094\000\012\003\095\000\012\003\096\000\012\003\000\000\
\\001\000\002\000\029\003\003\000\029\003\004\000\029\003\005\000\029\003\
\\006\000\029\003\007\000\029\003\008\000\029\003\009\000\029\003\
\\011\000\029\003\012\000\029\003\013\000\029\003\014\000\029\003\
\\015\000\029\003\017\000\029\003\019\000\029\003\020\000\029\003\
\\021\000\029\003\022\000\029\003\023\000\029\003\024\000\029\003\
\\025\000\012\003\027\000\029\003\029\000\029\003\030\000\029\003\
\\031\000\029\003\032\000\029\003\034\000\029\003\035\000\029\003\
\\036\000\029\003\037\000\029\003\039\000\029\003\040\000\029\003\
\\041\000\029\003\042\000\029\003\043\000\029\003\044\000\029\003\
\\047\000\029\003\049\000\029\003\051\000\029\003\052\000\029\003\
\\053\000\029\003\054\000\029\003\055\000\029\003\058\000\029\003\
\\059\000\029\003\060\000\029\003\061\000\029\003\062\000\029\003\
\\063\000\029\003\064\000\029\003\065\000\029\003\066\000\029\003\
\\067\000\029\003\068\000\029\003\069\000\029\003\070\000\029\003\
\\071\000\029\003\072\000\029\003\073\000\029\003\074\000\029\003\
\\075\000\029\003\077\000\029\003\078\000\029\003\079\000\029\003\
\\080\000\029\003\081\000\029\003\082\000\029\003\083\000\029\003\
\\084\000\029\003\085\000\029\003\086\000\029\003\087\000\029\003\
\\088\000\029\003\089\000\029\003\090\000\029\003\091\000\029\003\
\\092\000\029\003\093\000\029\003\094\000\029\003\095\000\029\003\
\\096\000\029\003\097\000\029\003\098\000\029\003\099\000\029\003\
\\100\000\029\003\000\000\
\\001\000\002\000\165\004\003\000\039\000\011\000\038\000\017\000\037\000\
\\020\000\036\000\023\000\035\000\029\000\034\000\030\000\033\000\
\\036\000\032\000\037\000\031\000\040\000\030\000\041\000\029\000\
\\044\000\028\000\049\000\027\000\051\000\026\000\053\000\025\000\
\\054\000\024\000\069\000\023\000\072\000\022\000\074\000\022\004\
\\078\000\021\000\082\000\022\004\086\000\020\000\087\000\019\000\
\\088\000\018\000\091\000\017\000\092\000\016\000\094\000\015\000\
\\095\000\014\000\096\000\013\000\000\000\
\\001\000\003\000\140\004\012\000\140\004\017\000\140\004\020\000\140\004\
\\021\000\011\003\022\000\140\004\023\000\140\004\035\000\140\004\
\\042\000\086\002\047\000\140\004\051\000\140\004\053\000\140\004\
\\054\000\140\004\069\000\140\004\072\000\140\004\074\000\140\004\
\\078\000\140\004\082\000\140\004\086\000\140\004\087\000\140\004\
\\088\000\140\004\091\000\140\004\092\000\140\004\094\000\140\004\
\\095\000\140\004\000\000\
\\001\000\003\000\127\000\011\000\038\000\017\000\037\000\020\000\086\004\
\\023\000\035\000\029\000\034\000\034\000\086\004\036\000\032\000\
\\037\000\031\000\040\000\030\000\041\000\029\000\044\000\028\000\
\\051\000\026\000\053\000\025\000\054\000\024\000\069\000\023\000\
\\072\000\022\000\074\000\022\004\078\000\021\000\082\000\022\004\
\\086\000\020\000\087\000\019\000\088\000\018\000\091\000\017\000\
\\092\000\016\000\094\000\015\000\095\000\014\000\096\000\013\000\000\000\
\\001\000\003\000\127\000\011\000\038\000\017\000\037\000\020\000\086\004\
\\023\000\035\000\029\000\034\000\036\000\032\000\037\000\031\000\
\\040\000\030\000\041\000\029\000\044\000\028\000\051\000\026\000\
\\053\000\025\000\054\000\024\000\069\000\023\000\072\000\022\000\
\\074\000\022\004\078\000\021\000\082\000\022\004\086\000\020\000\
\\087\000\019\000\088\000\018\000\091\000\017\000\092\000\016\000\
\\094\000\015\000\095\000\014\000\096\000\013\000\000\000\
\\001\000\003\000\127\000\011\000\038\000\017\000\037\000\023\000\035\000\
\\029\000\034\000\034\000\086\004\036\000\032\000\037\000\031\000\
\\040\000\030\000\041\000\029\000\044\000\028\000\051\000\026\000\
\\053\000\025\000\054\000\024\000\069\000\023\000\072\000\022\000\
\\074\000\022\004\078\000\021\000\082\000\022\004\086\000\020\000\
\\087\000\019\000\088\000\018\000\091\000\017\000\092\000\016\000\
\\094\000\015\000\095\000\014\000\096\000\013\000\000\000\
\\001\000\003\000\085\001\008\000\112\000\017\000\084\001\022\000\083\001\
\\023\000\082\001\035\000\081\001\047\000\080\001\051\000\079\001\
\\053\000\078\001\054\000\077\001\069\000\110\004\072\000\022\000\
\\074\000\022\004\078\000\021\000\082\000\022\004\086\000\020\000\
\\087\000\019\000\088\000\018\000\091\000\017\000\092\000\016\000\
\\094\000\015\000\095\000\014\000\000\000\
\\001\000\003\000\085\001\017\000\084\001\020\000\110\004\022\000\083\001\
\\023\000\082\001\035\000\081\001\047\000\080\001\051\000\079\001\
\\053\000\078\001\054\000\077\001\069\000\110\004\072\000\022\000\
\\074\000\022\004\078\000\021\000\082\000\022\004\086\000\020\000\
\\087\000\019\000\088\000\018\000\091\000\017\000\092\000\016\000\
\\094\000\015\000\095\000\014\000\000\000\
\\001\000\003\000\085\001\017\000\084\001\020\000\110\004\022\000\083\001\
\\023\000\082\001\035\000\081\001\047\000\080\001\051\000\079\001\
\\053\000\078\001\054\000\077\001\072\000\022\000\074\000\022\004\
\\078\000\021\000\082\000\022\004\086\000\020\000\087\000\019\000\
\\088\000\018\000\091\000\017\000\092\000\016\000\094\000\015\000\
\\095\000\014\000\000\000\
\\001\000\003\000\043\002\020\000\183\002\031\000\134\001\061\000\133\001\
\\062\000\132\001\070\000\131\001\071\000\130\001\000\000\
\\001\000\003\000\043\002\031\000\134\001\061\000\133\001\062\000\132\001\
\\063\000\042\002\069\000\041\002\070\000\131\001\071\000\130\001\000\000\
\\001\000\003\000\142\002\008\000\208\001\011\000\038\000\017\000\037\000\
\\023\000\035\000\029\000\034\000\036\000\032\000\037\000\031\000\
\\039\000\207\001\040\000\030\000\041\000\029\000\044\000\028\000\
\\050\000\206\001\051\000\026\000\053\000\025\000\054\000\024\000\
\\069\000\090\004\072\000\022\000\074\000\022\004\078\000\021\000\
\\082\000\022\004\086\000\020\000\087\000\019\000\088\000\018\000\
\\091\000\017\000\092\000\016\000\094\000\015\000\095\000\014\000\
\\096\000\013\000\000\000\
\\001\000\003\000\142\002\011\000\038\000\017\000\037\000\023\000\035\000\
\\029\000\034\000\036\000\032\000\037\000\031\000\040\000\030\000\
\\041\000\029\000\044\000\028\000\051\000\026\000\053\000\025\000\
\\054\000\024\000\069\000\090\004\072\000\022\000\074\000\022\004\
\\078\000\021\000\082\000\022\004\086\000\020\000\087\000\019\000\
\\088\000\018\000\091\000\017\000\092\000\016\000\094\000\015\000\
\\095\000\014\000\096\000\013\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\010\000\096\000\043\000\095\000\
\\046\000\094\000\057\000\093\000\060\000\092\000\064\000\091\000\
\\065\000\090\000\066\000\089\000\072\000\088\000\073\000\087\000\
\\074\000\086\000\075\000\085\000\076\000\084\000\077\000\083\000\
\\078\000\082\000\079\000\081\000\080\000\080\000\081\000\079\000\
\\082\000\078\000\083\000\077\000\084\000\076\000\085\000\075\000\
\\086\000\074\000\087\000\073\000\088\000\072\000\089\000\071\000\
\\090\000\070\000\091\000\069\000\092\000\068\000\093\000\067\000\
\\094\000\066\000\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\010\000\096\000\043\000\095\000\
\\057\000\093\000\060\000\092\000\064\000\091\000\065\000\090\000\
\\066\000\089\000\072\000\088\000\073\000\087\000\074\000\086\000\
\\075\000\085\000\076\000\084\000\077\000\083\000\078\000\082\000\
\\079\000\081\000\080\000\080\000\081\000\079\000\082\000\078\000\
\\083\000\077\000\084\000\076\000\085\000\075\000\086\000\074\000\
\\087\000\073\000\088\000\072\000\089\000\071\000\090\000\070\000\
\\091\000\069\000\092\000\068\000\093\000\067\000\094\000\066\000\
\\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\010\000\178\000\043\000\095\000\
\\057\000\093\000\060\000\092\000\064\000\091\000\065\000\090\000\
\\066\000\170\000\069\000\177\000\072\000\088\000\073\000\087\000\
\\074\000\086\000\075\000\085\000\076\000\084\000\077\000\083\000\
\\078\000\082\000\079\000\081\000\080\000\080\000\081\000\079\000\
\\082\000\078\000\083\000\077\000\084\000\076\000\085\000\075\000\
\\086\000\074\000\087\000\073\000\088\000\072\000\089\000\071\000\
\\090\000\070\000\091\000\069\000\092\000\068\000\093\000\067\000\
\\094\000\066\000\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\046\000\173\000\
\\057\000\093\000\060\000\092\000\064\000\091\000\065\000\090\000\
\\066\000\170\000\072\000\088\000\073\000\087\000\074\000\086\000\
\\075\000\085\000\076\000\084\000\077\000\083\000\078\000\082\000\
\\079\000\081\000\080\000\080\000\081\000\079\000\082\000\078\000\
\\083\000\077\000\084\000\076\000\085\000\075\000\086\000\074\000\
\\087\000\073\000\088\000\072\000\089\000\071\000\090\000\070\000\
\\091\000\069\000\092\000\068\000\093\000\067\000\094\000\066\000\
\\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\068\000\180\000\072\000\088\000\073\000\087\000\074\000\086\000\
\\075\000\085\000\076\000\084\000\077\000\083\000\078\000\082\000\
\\079\000\081\000\080\000\080\000\081\000\079\000\082\000\078\000\
\\083\000\077\000\084\000\076\000\085\000\075\000\086\000\074\000\
\\087\000\073\000\088\000\072\000\089\000\071\000\090\000\070\000\
\\091\000\069\000\092\000\068\000\093\000\067\000\094\000\066\000\
\\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\069\000\177\000\072\000\088\000\073\000\087\000\074\000\086\000\
\\075\000\085\000\076\000\084\000\077\000\083\000\078\000\082\000\
\\079\000\081\000\080\000\080\000\081\000\079\000\082\000\078\000\
\\083\000\077\000\084\000\076\000\085\000\075\000\086\000\074\000\
\\087\000\073\000\088\000\072\000\089\000\071\000\090\000\070\000\
\\091\000\069\000\092\000\068\000\093\000\067\000\094\000\066\000\
\\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\072\000\088\000\073\000\087\000\074\000\086\000\075\000\085\000\
\\076\000\084\000\077\000\083\000\078\000\082\000\079\000\081\000\
\\080\000\080\000\081\000\079\000\082\000\078\000\083\000\077\000\
\\084\000\076\000\085\000\075\000\086\000\074\000\087\000\073\000\
\\088\000\072\000\089\000\071\000\090\000\070\000\091\000\069\000\
\\092\000\068\000\093\000\067\000\094\000\066\000\095\000\065\000\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\016\000\030\001\021\000\048\000\
\\028\000\029\001\032\000\028\001\033\000\027\001\039\000\026\001\
\\043\000\025\001\045\000\024\001\056\000\023\001\060\000\047\000\
\\064\000\022\001\065\000\021\001\066\000\020\001\068\000\169\001\
\\073\000\019\001\079\000\018\001\081\000\017\001\083\000\016\001\
\\085\000\015\001\089\000\014\001\090\000\013\001\093\000\012\001\
\\097\000\011\001\098\000\010\001\099\000\009\001\100\000\008\001\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\016\000\030\001\021\000\048\000\
\\028\000\029\001\032\000\028\001\033\000\027\001\039\000\026\001\
\\043\000\025\001\045\000\024\001\056\000\023\001\060\000\047\000\
\\064\000\022\001\065\000\021\001\066\000\020\001\069\000\166\001\
\\073\000\019\001\079\000\018\001\081\000\017\001\083\000\016\001\
\\085\000\015\001\089\000\014\001\090\000\013\001\092\000\165\001\
\\093\000\012\001\097\000\011\001\098\000\010\001\099\000\009\001\
\\100\000\008\001\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\016\000\030\001\021\000\048\000\
\\028\000\029\001\032\000\028\001\033\000\027\001\039\000\026\001\
\\043\000\025\001\045\000\024\001\056\000\023\001\060\000\047\000\
\\064\000\022\001\065\000\021\001\066\000\020\001\069\000\025\002\
\\073\000\019\001\079\000\018\001\081\000\017\001\083\000\016\001\
\\085\000\015\001\089\000\014\001\090\000\013\001\093\000\012\001\
\\097\000\011\001\098\000\010\001\099\000\009\001\100\000\008\001\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\016\000\030\001\021\000\048\000\
\\028\000\029\001\032\000\028\001\033\000\027\001\039\000\026\001\
\\043\000\025\001\045\000\024\001\056\000\023\001\060\000\047\000\
\\064\000\022\001\065\000\021\001\066\000\020\001\073\000\019\001\
\\079\000\018\001\081\000\017\001\083\000\016\001\085\000\015\001\
\\089\000\014\001\090\000\013\001\093\000\012\001\097\000\011\001\
\\098\000\010\001\099\000\009\001\100\000\008\001\000\000\
\\001\000\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\021\000\048\000\032\000\028\001\
\\039\000\026\001\043\000\025\001\060\000\047\000\064\000\022\001\
\\065\000\021\001\066\000\020\001\073\000\019\001\079\000\018\001\
\\081\000\017\001\083\000\016\001\085\000\015\001\089\000\014\001\
\\090\000\013\001\093\000\012\001\097\000\011\001\098\000\010\001\
\\099\000\009\001\100\000\008\001\000\000\
\\001\000\004\000\131\000\005\000\130\000\008\000\050\000\009\000\049\000\
\\021\000\048\000\060\000\047\000\000\000\
\\001\000\005\000\190\000\008\000\129\001\009\000\128\001\060\000\127\001\000\000\
\\001\000\005\000\190\000\008\000\129\001\009\000\128\001\060\000\127\001\
\\067\000\126\001\000\000\
\\001\000\005\000\190\000\008\000\129\001\009\000\128\001\060\000\127\001\
\\067\000\173\001\000\000\
\\001\000\006\000\254\000\007\000\253\000\000\000\
\\001\000\006\000\254\000\007\000\253\000\008\000\252\000\009\000\157\000\
\\010\000\251\000\064\000\250\000\066\000\249\000\000\000\
\\001\000\006\000\254\000\007\000\253\000\008\000\252\000\009\000\157\000\
\\066\000\152\001\000\000\
\\001\000\006\000\254\000\007\000\253\000\008\000\031\001\009\000\049\000\
\\021\000\048\000\043\000\025\001\060\000\047\000\000\000\
\\001\000\006\000\254\000\007\000\253\000\008\000\220\002\009\000\219\002\
\\010\000\251\000\021\000\048\000\060\000\047\000\064\000\250\000\
\\066\000\249\000\000\000\
\\001\000\006\000\254\000\007\000\253\000\008\000\220\002\009\000\219\002\
\\010\000\251\000\021\000\048\000\060\000\047\000\064\000\250\000\
\\066\000\249\000\069\000\218\002\000\000\
\\001\000\006\000\154\001\007\000\253\000\008\000\252\000\009\000\157\000\
\\066\000\152\001\000\000\
\\001\000\006\000\157\001\007\000\253\000\008\000\252\000\009\000\157\000\
\\066\000\152\001\000\000\
\\001\000\006\000\160\001\007\000\253\000\008\000\252\000\009\000\157\000\
\\066\000\152\001\000\000\
\\001\000\006\000\028\002\000\000\
\\001\000\006\000\031\002\000\000\
\\001\000\006\000\034\002\000\000\
\\001\000\006\000\169\002\008\000\168\002\009\000\167\002\000\000\
\\001\000\008\000\029\003\009\000\029\003\013\000\029\003\025\000\012\003\
\\060\000\029\003\061\000\006\003\063\000\029\003\069\000\029\003\000\000\
\\001\000\008\000\030\003\009\000\030\003\013\000\030\003\060\000\030\003\
\\061\000\007\003\063\000\030\003\069\000\030\003\000\000\
\\001\000\008\000\050\000\009\000\049\000\021\000\048\000\043\000\151\000\
\\060\000\047\000\000\000\
\\001\000\008\000\050\000\009\000\049\000\021\000\048\000\060\000\047\000\000\000\
\\001\000\008\000\112\000\000\000\
\\001\000\008\000\112\000\053\000\230\001\000\000\
\\001\000\008\000\117\000\000\000\
\\001\000\008\000\117\000\048\000\063\001\000\000\
\\001\000\008\000\138\000\000\000\
\\001\000\008\000\158\000\009\000\157\000\000\000\
\\001\000\008\000\158\000\009\000\157\000\010\000\096\000\066\000\156\000\000\000\
\\001\000\008\000\194\000\009\000\097\000\021\000\193\000\060\000\092\000\000\000\
\\001\000\008\000\252\000\009\000\157\000\000\000\
\\001\000\008\000\031\001\009\000\049\000\021\000\048\000\043\000\025\001\
\\060\000\047\000\000\000\
\\001\000\008\000\031\001\009\000\049\000\021\000\048\000\043\000\025\001\
\\060\000\047\000\066\000\147\001\090\000\146\001\093\000\145\001\000\000\
\\001\000\008\000\052\001\009\000\049\000\021\000\048\000\060\000\047\000\000\000\
\\001\000\008\000\104\001\009\000\097\000\017\000\103\001\043\000\102\001\
\\060\000\092\000\000\000\
\\001\000\008\000\104\001\009\000\097\000\017\000\163\002\043\000\102\001\
\\060\000\092\000\000\000\
\\001\000\008\000\104\001\009\000\097\000\021\000\248\001\060\000\092\000\000\000\
\\001\000\008\000\104\001\009\000\097\000\043\000\102\001\060\000\092\000\000\000\
\\001\000\008\000\139\001\009\000\138\001\000\000\
\\001\000\008\000\177\001\009\000\049\000\021\000\048\000\060\000\047\000\000\000\
\\001\000\008\000\208\001\039\000\207\001\050\000\206\001\000\000\
\\001\000\008\000\058\002\009\000\049\000\021\000\048\000\060\000\047\000\000\000\
\\001\000\010\000\178\000\000\000\
\\001\000\014\000\006\003\021\000\031\003\061\000\006\003\063\000\006\003\
\\067\000\006\003\000\000\
\\001\000\014\000\007\003\021\000\032\003\061\000\007\003\063\000\007\003\
\\067\000\007\003\000\000\
\\001\000\014\000\008\003\021\000\033\003\061\000\008\003\063\000\008\003\
\\067\000\008\003\000\000\
\\001\000\014\000\120\001\000\000\
\\001\000\019\000\184\002\031\000\134\001\061\000\133\001\062\000\132\001\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\020\000\214\001\000\000\
\\001\000\020\000\251\001\000\000\
\\001\000\020\000\072\002\000\000\
\\001\000\020\000\143\002\000\000\
\\001\000\020\000\164\002\000\000\
\\001\000\020\000\182\002\000\000\
\\001\000\020\000\200\002\000\000\
\\001\000\020\000\210\002\061\000\189\002\062\000\188\002\000\000\
\\001\000\021\000\165\000\000\000\
\\001\000\021\000\205\000\000\000\
\\001\000\021\000\219\000\061\000\218\000\000\000\
\\001\000\021\000\231\000\000\000\
\\001\000\021\000\234\000\000\000\
\\001\000\021\000\047\001\000\000\
\\001\000\021\000\053\001\000\000\
\\001\000\021\000\056\001\000\000\
\\001\000\021\000\095\001\000\000\
\\001\000\021\000\242\001\000\000\
\\001\000\021\000\049\002\000\000\
\\001\000\021\000\081\002\000\000\
\\001\000\021\000\085\002\000\000\
\\001\000\021\000\090\002\000\000\
\\001\000\021\000\147\002\000\000\
\\001\000\021\000\156\002\000\000\
\\001\000\021\000\192\002\000\000\
\\001\000\021\000\212\002\000\000\
\\001\000\021\000\254\002\000\000\
\\001\000\024\000\050\002\031\000\134\001\061\000\133\001\062\000\132\001\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\025\000\121\001\000\000\
\\001\000\027\000\054\002\000\000\
\\001\000\031\000\134\001\042\000\056\002\061\000\133\001\062\000\132\001\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\031\000\134\001\052\000\053\002\061\000\133\001\062\000\132\001\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\031\000\134\001\061\000\133\001\062\000\132\001\063\000\042\002\
\\068\000\046\002\070\000\131\001\071\000\130\001\000\000\
\\001\000\031\000\134\001\061\000\133\001\062\000\132\001\063\000\179\002\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\031\000\134\001\061\000\133\001\062\000\132\001\069\000\121\002\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\031\000\134\001\061\000\133\001\062\000\132\001\069\000\180\002\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\031\000\134\001\061\000\133\001\062\000\132\001\069\000\226\002\
\\070\000\131\001\071\000\130\001\000\000\
\\001\000\034\000\211\000\000\000\
\\001\000\034\000\052\002\000\000\
\\001\000\034\000\095\002\000\000\
\\001\000\034\000\144\002\000\000\
\\001\000\053\000\209\001\000\000\
\\001\000\053\000\071\002\000\000\
\\001\000\058\000\233\000\059\000\232\000\000\000\
\\001\000\058\000\250\001\000\000\
\\001\000\061\000\164\000\000\000\
\\001\000\061\000\217\001\000\000\
\\001\000\061\000\017\002\000\000\
\\001\000\061\000\076\002\000\000\
\\001\000\061\000\080\002\000\000\
\\001\000\061\000\189\002\062\000\188\002\069\000\187\002\000\000\
\\001\000\061\000\222\002\000\000\
\\001\000\061\000\231\002\000\000\
\\001\000\063\000\040\001\069\000\039\001\000\000\
\\001\000\063\000\014\002\069\000\013\002\000\000\
\\001\000\064\000\112\001\000\000\
\\001\000\064\000\006\002\000\000\
\\001\000\066\000\216\000\000\000\
\\001\000\066\000\067\002\000\000\
\\001\000\066\000\202\002\000\000\
\\001\000\067\000\054\004\072\000\022\000\075\000\022\004\077\000\022\004\
\\078\000\021\000\084\000\022\004\086\000\020\000\087\000\019\000\
\\088\000\018\000\091\000\017\000\092\000\016\000\094\000\015\000\
\\095\000\014\000\000\000\
\\001\000\067\000\058\004\072\000\022\000\078\000\021\000\084\000\022\004\
\\086\000\020\000\087\000\019\000\088\000\018\000\091\000\017\000\
\\092\000\016\000\094\000\015\000\095\000\014\000\000\000\
\\001\000\067\000\046\001\000\000\
\\001\000\067\000\016\002\000\000\
\\001\000\067\000\048\002\000\000\
\\001\000\067\000\096\002\000\000\
\\001\000\067\000\171\002\000\000\
\\001\000\067\000\245\002\000\000\
\\001\000\068\000\191\001\000\000\
\\001\000\068\000\045\002\000\000\
\\001\000\069\000\041\001\000\000\
\\001\000\069\000\055\001\000\000\
\\001\000\069\000\215\001\000\000\
\\001\000\069\000\039\002\000\000\
\\001\000\069\000\040\002\000\000\
\\001\000\069\000\109\002\000\000\
\\001\000\069\000\112\002\000\000\
\\001\000\069\000\132\002\000\000\
\\001\000\069\000\186\002\000\000\
\\001\000\069\000\206\002\000\000\
\\001\000\069\000\239\002\000\000\
\\001\000\074\000\044\000\082\000\043\000\000\000\
\\001\000\075\000\175\002\077\000\174\002\084\000\173\002\000\000\
\\001\000\084\000\098\002\000\000\
\\001\000\090\000\238\002\093\000\237\002\000\000\
\\001\003\000\000\
\\002\003\000\000\
\\003\003\000\000\
\\004\003\000\000\
\\005\003\000\000\
\\006\003\000\000\
\\006\003\025\000\196\000\000\000\
\\006\003\025\000\186\001\000\000\
\\007\003\000\000\
\\008\003\000\000\
\\009\003\000\000\
\\010\003\000\000\
\\011\003\000\000\
\\012\003\000\000\
\\013\003\000\000\
\\014\003\000\000\
\\015\003\000\000\
\\016\003\000\000\
\\017\003\000\000\
\\018\003\000\000\
\\019\003\000\000\
\\019\003\025\000\196\000\000\000\
\\020\003\000\000\
\\021\003\000\000\
\\022\003\000\000\
\\023\003\000\000\
\\024\003\000\000\
\\025\003\000\000\
\\026\003\000\000\
\\027\003\000\000\
\\028\003\000\000\
\\029\003\000\000\
\\030\003\000\000\
\\031\003\000\000\
\\032\003\000\000\
\\033\003\000\000\
\\034\003\000\000\
\\035\003\000\000\
\\036\003\000\000\
\\037\003\025\000\207\000\000\000\
\\038\003\000\000\
\\039\003\000\000\
\\040\003\000\000\
\\041\003\000\000\
\\042\003\000\000\
\\043\003\000\000\
\\044\003\012\000\105\002\000\000\
\\045\003\000\000\
\\046\003\000\000\
\\047\003\000\000\
\\048\003\000\000\
\\049\003\000\000\
\\050\003\000\000\
\\051\003\000\000\
\\051\003\008\000\031\001\009\000\049\000\021\000\048\000\043\000\025\001\
\\060\000\047\000\066\000\147\001\090\000\146\001\093\000\145\001\000\000\
\\051\003\008\000\031\001\009\000\049\000\021\000\048\000\043\000\025\001\
\\060\000\047\000\066\000\037\002\090\000\146\001\093\000\145\001\000\000\
\\051\003\066\000\029\002\000\000\
\\052\003\000\000\
\\053\003\000\000\
\\054\003\000\000\
\\055\003\000\000\
\\056\003\000\000\
\\057\003\000\000\
\\058\003\000\000\
\\059\003\000\000\
\\060\003\000\000\
\\061\003\000\000\
\\062\003\000\000\
\\063\003\000\000\
\\064\003\000\000\
\\065\003\000\000\
\\066\003\000\000\
\\067\003\000\000\
\\068\003\000\000\
\\069\003\000\000\
\\070\003\000\000\
\\071\003\031\000\134\001\061\000\133\001\062\000\132\001\063\000\111\002\
\\070\000\131\001\071\000\130\001\000\000\
\\072\003\000\000\
\\073\003\000\000\
\\074\003\000\000\
\\075\003\003\000\043\002\031\000\134\001\061\000\133\001\062\000\132\001\
\\070\000\131\001\071\000\130\001\000\000\
\\076\003\000\000\
\\077\003\000\000\
\\078\003\063\000\047\002\000\000\
\\079\003\000\000\
\\080\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\081\003\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\021\000\048\000\032\000\028\001\
\\039\000\026\001\043\000\025\001\060\000\047\000\064\000\022\001\
\\065\000\021\001\066\000\020\001\073\000\019\001\079\000\018\001\
\\081\000\017\001\083\000\016\001\085\000\015\001\089\000\014\001\
\\090\000\013\001\093\000\012\001\097\000\011\001\098\000\010\001\
\\099\000\009\001\100\000\008\001\000\000\
\\082\003\000\000\
\\083\003\000\000\
\\084\003\000\000\
\\085\003\000\000\
\\086\003\061\000\133\001\062\000\132\001\000\000\
\\087\003\061\000\133\001\062\000\132\001\071\000\130\001\000\000\
\\088\003\000\000\
\\089\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\090\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\091\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\092\003\000\000\
\\093\003\000\000\
\\094\003\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\031\001\009\000\049\000\021\000\048\000\032\000\028\001\
\\039\000\026\001\043\000\025\001\060\000\047\000\064\000\022\001\
\\065\000\021\001\066\000\020\001\073\000\019\001\079\000\018\001\
\\081\000\017\001\083\000\016\001\085\000\015\001\089\000\014\001\
\\090\000\013\001\093\000\012\001\097\000\011\001\098\000\010\001\
\\099\000\009\001\100\000\008\001\000\000\
\\095\003\000\000\
\\096\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\097\003\015\000\055\002\000\000\
\\098\003\000\000\
\\099\003\000\000\
\\100\003\000\000\
\\101\003\000\000\
\\102\003\000\000\
\\103\003\000\000\
\\104\003\000\000\
\\105\003\000\000\
\\106\003\000\000\
\\107\003\059\000\230\000\000\000\
\\108\003\000\000\
\\109\003\000\000\
\\110\003\000\000\
\\111\003\000\000\
\\112\003\000\000\
\\113\003\000\000\
\\114\003\000\000\
\\115\003\000\000\
\\116\003\000\000\
\\117\003\000\000\
\\118\003\000\000\
\\119\003\000\000\
\\120\003\000\000\
\\121\003\069\000\023\000\000\000\
\\122\003\000\000\
\\123\003\000\000\
\\124\003\000\000\
\\125\003\003\000\111\001\011\000\038\000\017\000\037\000\023\000\035\000\
\\029\000\034\000\036\000\032\000\037\000\031\000\040\000\110\001\
\\041\000\029\000\044\000\028\000\053\000\025\000\054\000\024\000\
\\096\000\013\000\000\000\
\\126\003\000\000\
\\127\003\000\000\
\\128\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\129\003\012\000\174\000\000\000\
\\130\003\000\000\
\\131\003\012\000\223\000\000\000\
\\132\003\000\000\
\\133\003\015\000\222\000\000\000\
\\134\003\000\000\
\\135\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\136\003\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\137\003\012\000\198\000\000\000\
\\138\003\000\000\
\\139\003\000\000\
\\140\003\012\000\229\000\000\000\
\\141\003\000\000\
\\142\003\000\000\
\\143\003\000\000\
\\144\003\015\000\245\001\000\000\
\\145\003\000\000\
\\146\003\042\000\246\001\000\000\
\\147\003\000\000\
\\148\003\012\000\224\000\000\000\
\\149\003\000\000\
\\150\003\021\000\226\000\042\000\225\000\000\000\
\\150\003\021\000\243\001\042\000\225\000\000\000\
\\151\003\000\000\
\\152\003\000\000\
\\153\003\008\000\112\000\000\000\
\\154\003\000\000\
\\155\003\008\000\050\000\009\000\049\000\021\000\048\000\060\000\047\000\000\000\
\\156\003\000\000\
\\157\003\000\000\
\\158\003\000\000\
\\159\003\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\072\000\088\000\073\000\087\000\074\000\086\000\075\000\085\000\
\\076\000\084\000\077\000\083\000\078\000\082\000\079\000\081\000\
\\080\000\080\000\081\000\079\000\082\000\078\000\083\000\077\000\
\\084\000\076\000\085\000\075\000\086\000\074\000\087\000\073\000\
\\088\000\072\000\089\000\071\000\090\000\070\000\091\000\069\000\
\\092\000\068\000\093\000\067\000\094\000\066\000\095\000\065\000\000\000\
\\160\003\000\000\
\\161\003\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\072\000\088\000\073\000\087\000\074\000\086\000\075\000\085\000\
\\076\000\084\000\077\000\083\000\078\000\082\000\079\000\081\000\
\\080\000\080\000\081\000\079\000\082\000\078\000\083\000\077\000\
\\084\000\076\000\085\000\075\000\086\000\074\000\087\000\073\000\
\\088\000\072\000\089\000\071\000\090\000\070\000\091\000\069\000\
\\092\000\068\000\093\000\067\000\094\000\066\000\095\000\065\000\000\000\
\\162\003\000\000\
\\163\003\000\000\
\\164\003\000\000\
\\165\003\010\000\107\000\066\000\106\000\000\000\
\\166\003\000\000\
\\167\003\000\000\
\\168\003\063\000\042\001\000\000\
\\169\003\000\000\
\\170\003\000\000\
\\171\003\000\000\
\\172\003\000\000\
\\173\003\000\000\
\\174\003\000\000\
\\175\003\000\000\
\\176\003\000\000\
\\177\003\000\000\
\\178\003\000\000\
\\179\003\000\000\
\\180\003\000\000\
\\181\003\000\000\
\\182\003\000\000\
\\183\003\000\000\
\\184\003\000\000\
\\185\003\000\000\
\\186\003\000\000\
\\187\003\000\000\
\\188\003\000\000\
\\189\003\000\000\
\\190\003\000\000\
\\191\003\000\000\
\\192\003\000\000\
\\193\003\000\000\
\\194\003\000\000\
\\195\003\000\000\
\\196\003\000\000\
\\197\003\000\000\
\\198\003\000\000\
\\199\003\000\000\
\\200\003\000\000\
\\201\003\000\000\
\\202\003\000\000\
\\203\003\000\000\
\\204\003\000\000\
\\205\003\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\072\000\088\000\073\000\087\000\074\000\086\000\075\000\085\000\
\\076\000\084\000\077\000\083\000\078\000\082\000\079\000\081\000\
\\080\000\080\000\081\000\079\000\082\000\078\000\083\000\077\000\
\\084\000\076\000\085\000\075\000\086\000\074\000\087\000\073\000\
\\088\000\072\000\089\000\071\000\090\000\070\000\091\000\069\000\
\\092\000\068\000\093\000\067\000\094\000\066\000\095\000\065\000\000\000\
\\206\003\000\000\
\\207\003\004\000\102\000\005\000\101\000\006\000\100\000\007\000\099\000\
\\008\000\098\000\009\000\097\000\043\000\095\000\057\000\093\000\
\\060\000\092\000\064\000\091\000\065\000\090\000\066\000\170\000\
\\072\000\088\000\073\000\087\000\074\000\086\000\075\000\085\000\
\\076\000\084\000\077\000\083\000\078\000\082\000\079\000\081\000\
\\080\000\080\000\081\000\079\000\082\000\078\000\083\000\077\000\
\\084\000\076\000\085\000\075\000\086\000\074\000\087\000\073\000\
\\088\000\072\000\089\000\071\000\090\000\070\000\091\000\069\000\
\\092\000\068\000\093\000\067\000\094\000\066\000\095\000\065\000\000\000\
\\208\003\000\000\
\\209\003\014\000\168\000\061\000\167\000\000\000\
\\210\003\014\000\188\001\000\000\
\\211\003\000\000\
\\212\003\000\000\
\\213\003\000\000\
\\214\003\015\000\166\000\000\000\
\\215\003\000\000\
\\216\003\015\000\187\001\000\000\
\\217\003\000\000\
\\218\003\000\000\
\\219\003\063\000\044\001\000\000\
\\220\003\000\000\
\\221\003\005\000\190\000\008\000\189\000\009\000\188\000\021\000\048\000\
\\026\000\187\000\060\000\186\000\000\000\
\\222\003\000\000\
\\223\003\063\000\045\001\000\000\
\\224\003\000\000\
\\225\003\000\000\
\\226\003\000\000\
\\227\003\014\000\049\001\061\000\048\001\000\000\
\\228\003\014\000\063\002\000\000\
\\229\003\000\000\
\\230\003\000\000\
\\231\003\000\000\
\\232\003\000\000\
\\233\003\000\000\
\\234\003\000\000\
\\235\003\000\000\
\\236\003\000\000\
\\237\003\000\000\
\\238\003\000\000\
\\239\003\000\000\
\\240\003\000\000\
\\241\003\008\000\252\000\009\000\157\000\060\000\119\001\000\000\
\\242\003\000\000\
\\243\003\000\000\
\\244\003\013\000\117\001\000\000\
\\245\003\000\000\
\\246\003\063\000\005\002\000\000\
\\247\003\000\000\
\\248\003\063\000\015\002\000\000\
\\249\003\000\000\
\\250\003\000\000\
\\251\003\000\000\
\\252\003\000\000\
\\253\003\000\000\
\\254\003\000\000\
\\255\003\000\000\
\\000\004\000\000\
\\001\004\000\000\
\\002\004\000\000\
\\003\004\000\000\
\\004\004\000\000\
\\005\004\000\000\
\\006\004\000\000\
\\007\004\000\000\
\\008\004\000\000\
\\009\004\000\000\
\\010\004\000\000\
\\011\004\000\000\
\\012\004\000\000\
\\013\004\000\000\
\\014\004\000\000\
\\015\004\000\000\
\\016\004\000\000\
\\017\004\000\000\
\\018\004\000\000\
\\019\004\000\000\
\\020\004\000\000\
\\021\004\000\000\
\\022\004\072\000\022\000\078\000\021\000\086\000\020\000\087\000\019\000\
\\088\000\018\000\091\000\017\000\092\000\016\000\094\000\015\000\
\\095\000\014\000\000\000\
\\023\004\000\000\
\\024\004\061\000\214\002\000\000\
\\025\004\000\000\
\\026\004\021\000\235\002\000\000\
\\027\004\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\028\004\000\000\
\\029\004\000\000\
\\030\004\063\000\230\002\000\000\
\\031\004\000\000\
\\032\004\000\000\
\\033\004\000\000\
\\034\004\000\000\
\\035\004\000\000\
\\036\004\000\000\
\\037\004\000\000\
\\038\004\000\000\
\\039\004\000\000\
\\040\004\000\000\
\\041\004\000\000\
\\042\004\000\000\
\\043\004\031\000\134\001\061\000\133\001\062\000\132\001\070\000\131\001\
\\071\000\130\001\000\000\
\\044\004\003\000\250\002\000\000\
\\045\004\000\000\
\\046\004\000\000\
\\047\004\000\000\
\\048\004\000\000\
\\049\004\064\000\224\002\000\000\
\\050\004\000\000\
\\051\004\000\000\
\\052\004\000\000\
\\053\004\000\000\
\\055\004\000\000\
\\056\004\000\000\
\\057\004\000\000\
\\059\004\000\000\
\\060\004\076\000\238\000\000\000\
\\061\004\000\000\
\\062\004\076\000\236\000\000\000\
\\063\004\000\000\
\\064\004\080\000\115\001\000\000\
\\065\004\000\000\
\\066\004\000\000\
\\067\004\000\000\
\\068\004\000\000\
\\069\004\000\000\
\\070\004\000\000\
\\071\004\000\000\
\\072\004\000\000\
\\073\004\000\000\
\\073\004\012\000\066\002\000\000\
\\074\004\055\000\211\001\000\000\
\\075\004\055\000\211\001\000\000\
\\076\004\000\000\
\\077\004\000\000\
\\078\004\000\000\
\\079\004\000\000\
\\080\004\000\000\
\\081\004\000\000\
\\082\004\000\000\
\\083\004\000\000\
\\084\004\000\000\
\\085\004\000\000\
\\087\004\000\000\
\\088\004\000\000\
\\089\004\000\000\
\\091\004\000\000\
\\092\004\000\000\
\\093\004\000\000\
\\094\004\000\000\
\\095\004\061\000\203\000\062\000\202\000\000\000\
\\096\004\055\000\211\001\000\000\
\\097\004\055\000\211\001\000\000\
\\098\004\061\000\065\002\062\000\064\002\000\000\
\\099\004\000\000\
\\100\004\000\000\
\\101\004\000\000\
\\102\004\000\000\
\\103\004\000\000\
\\104\004\000\000\
\\105\004\000\000\
\\106\004\000\000\
\\106\004\012\000\213\001\000\000\
\\107\004\012\000\210\001\000\000\
\\108\004\053\000\209\001\000\000\
\\109\004\000\000\
\\111\004\000\000\
\\112\004\000\000\
\\113\004\000\000\
\\114\004\000\000\
\\115\004\000\000\
\\116\004\000\000\
\\117\004\059\000\089\002\000\000\
\\118\004\000\000\
\\119\004\000\000\
\\120\004\000\000\
\\121\004\000\000\
\\122\004\000\000\
\\123\004\055\000\211\001\000\000\
\\124\004\000\000\
\\125\004\000\000\
\\126\004\000\000\
\\127\004\012\000\075\002\000\000\
\\128\004\000\000\
\\129\004\000\000\
\\130\004\012\000\077\002\000\000\
\\131\004\000\000\
\\132\004\021\000\151\002\000\000\
\\133\004\000\000\
\\134\004\012\000\087\002\000\000\
\\135\004\000\000\
\\136\004\000\000\
\\137\004\012\000\084\002\000\000\
\\138\004\000\000\
\\139\004\000\000\
\\140\004\042\000\086\002\000\000\
\\141\004\000\000\
\\142\004\000\000\
\\143\004\055\000\211\001\000\000\
\\144\004\000\000\
\\145\004\021\000\156\002\000\000\
\\146\004\000\000\
\\147\004\021\000\081\002\000\000\
\\148\004\000\000\
\\149\004\000\000\
\\150\004\000\000\
\\151\004\055\000\211\001\000\000\
\\152\004\000\000\
\\153\004\000\000\
\\154\004\000\000\
\\155\004\055\000\211\001\000\000\
\\156\004\000\000\
\\157\004\061\000\065\002\062\000\064\002\000\000\
\\158\004\000\000\
\\159\004\000\000\
\\160\004\000\000\
\\161\004\000\000\
\\162\004\000\000\
\\163\004\000\000\
\\164\004\000\000\
\\166\004\000\000\
\\167\004\000\000\
\\168\004\000\000\
\\169\004\000\000\
\"
val actionRowNumbers =
"\003\000\003\000\003\000\159\000\
\\003\000\068\002\065\002\155\000\
\\187\001\246\001\245\001\047\000\
\\186\001\185\001\184\001\183\001\
\\182\001\181\001\180\001\179\001\
\\178\001\070\002\015\000\074\001\
\\048\000\050\000\048\000\047\000\
\\007\000\027\000\027\000\052\000\
\\016\000\046\000\069\002\054\000\
\\054\000\003\000\072\002\073\002\
\\074\002\053\000\053\000\188\001\
\\119\000\168\000\169\000\167\000\
\\164\000\082\000\127\001\123\001\
\\118\001\114\001\116\001\112\001\
\\018\000\007\001\037\001\009\001\
\\081\001\183\000\080\001\103\001\
\\106\001\090\001\110\001\097\001\
\\093\001\102\001\096\001\105\001\
\\099\001\088\001\095\001\094\001\
\\111\001\108\001\107\001\101\001\
\\092\001\091\001\098\001\109\001\
\\104\001\089\001\100\001\017\000\
\\019\000\130\001\182\000\079\001\
\\021\000\055\000\072\001\181\000\
\\180\000\163\000\162\000\161\000\
\\160\000\053\000\014\001\045\001\
\\068\000\075\001\048\000\255\001\
\\247\001\001\002\172\000\050\000\
\\055\002\066\002\083\000\211\000\
\\022\001\062\001\198\000\027\001\
\\064\001\005\000\005\000\249\001\
\\111\000\005\000\047\000\025\001\
\\066\001\067\001\047\000\023\001\
\\052\000\059\002\067\002\131\000\
\\210\000\113\001\070\001\084\000\
\\068\001\021\000\041\001\039\001\
\\013\001\056\001\020\001\058\001\
\\171\000\047\000\053\000\048\001\
\\015\001\085\000\068\000\191\000\
\\190\000\117\000\086\000\071\002\
\\225\001\223\001\032\000\025\000\
\\021\000\032\000\021\000\115\001\
\\020\000\117\001\008\001\021\000\
\\021\000\127\000\144\000\083\001\
\\077\001\128\001\085\001\135\001\
\\132\001\136\000\087\000\136\001\
\\071\000\131\001\070\000\069\000\
\\195\000\011\001\184\000\185\000\
\\180\000\186\000\059\000\088\000\
\\074\001\145\000\000\002\089\000\
\\051\000\051\000\056\002\051\000\
\\063\001\048\000\065\001\250\001\
\\252\001\006\000\251\001\026\001\
\\024\001\060\002\008\000\071\001\
\\032\000\025\000\069\001\012\001\
\\021\000\021\000\046\000\032\000\
\\034\000\170\000\090\000\054\000\
\\074\001\060\000\074\001\033\001\
\\063\000\129\000\032\000\227\001\
\\032\000\153\001\152\001\150\001\
\\145\001\147\001\072\000\140\001\
\\102\000\144\001\200\000\032\000\
\\029\000\141\001\002\000\216\000\
\\212\000\217\000\247\000\036\001\
\\003\001\002\001\233\000\219\000\
\\173\000\218\000\064\000\064\000\
\\058\000\033\000\175\001\174\001\
\\037\000\033\000\038\000\033\000\
\\039\000\033\000\023\000\022\000\
\\030\000\025\000\025\000\065\000\
\\033\001\025\000\028\000\021\000\
\\025\000\166\000\124\001\125\001\
\\122\001\119\001\120\001\010\001\
\\038\001\087\001\021\000\073\001\
\\068\000\142\000\021\000\130\001\
\\082\001\021\000\032\000\021\000\
\\187\000\188\000\165\000\032\000\
\\046\001\076\001\066\000\115\000\
\\014\002\011\002\012\002\003\002\
\\007\002\010\000\002\002\058\002\
\\015\002\013\002\057\002\199\000\
\\074\000\146\000\019\002\009\000\
\\062\002\032\002\120\000\047\000\
\\074\001\048\000\049\000\051\000\
\\046\000\074\001\054\000\009\000\
\\091\000\043\001\042\001\040\001\
\\057\001\059\001\060\001\021\001\
\\061\001\063\000\049\001\016\001\
\\052\001\051\001\054\001\204\000\
\\062\000\056\000\179\000\118\000\
\\075\000\033\001\032\001\029\001\
\\033\001\033\001\135\000\155\001\
\\130\000\032\000\224\001\032\000\
\\149\001\032\000\057\000\056\000\
\\128\000\157\001\137\000\121\000\
\\143\001\194\000\193\000\192\000\
\\025\000\025\000\032\000\032\000\
\\021\000\246\000\245\000\224\000\
\\197\000\196\000\223\000\176\001\
\\205\001\202\001\199\001\200\001\
\\201\001\024\000\058\000\162\001\
\\160\001\161\001\032\000\040\000\
\\215\000\058\000\041\000\213\000\
\\026\000\042\000\214\000\026\000\
\\147\000\148\000\012\000\025\000\
\\225\000\143\000\106\000\229\000\
\\242\000\138\000\092\000\221\000\
\\101\000\253\000\174\000\166\000\
\\112\000\105\000\222\000\103\000\
\\001\001\005\001\104\000\175\000\
\\067\000\021\000\021\000\128\001\
\\078\001\086\001\128\001\133\001\
\\134\001\137\001\138\001\189\000\
\\047\001\244\001\005\002\243\001\
\\004\002\237\001\132\000\232\001\
\\006\000\007\000\001\000\074\001\
\\008\002\116\000\076\000\016\002\
\\248\001\001\002\018\002\051\000\
\\033\002\020\002\122\000\036\002\
\\021\002\053\000\048\000\047\002\
\\028\002\123\000\031\002\093\000\
\\056\000\029\002\043\002\026\002\
\\094\000\004\000\040\002\022\002\
\\053\000\023\002\095\000\017\002\
\\025\000\057\000\050\001\063\000\
\\032\000\202\000\203\000\017\001\
\\033\001\018\001\035\001\030\001\
\\113\000\034\001\139\000\135\000\
\\221\001\157\000\226\001\032\000\
\\134\000\155\001\154\001\151\001\
\\028\001\205\000\201\000\146\001\
\\032\000\028\000\142\001\032\000\
\\250\000\251\000\249\000\248\000\
\\252\000\149\000\235\000\203\001\
\\171\001\150\000\026\000\025\000\
\\170\001\058\000\169\001\167\001\
\\166\001\165\001\207\001\025\000\
\\164\001\230\000\226\000\234\000\
\\025\000\025\000\108\000\227\000\
\\228\000\028\000\220\000\025\000\
\\025\000\176\000\025\000\025\000\
\\025\000\021\000\021\000\177\000\
\\166\000\126\001\121\001\151\000\
\\129\001\021\000\051\000\051\000\
\\240\001\013\000\077\000\114\000\
\\056\000\074\001\006\002\096\000\
\\061\002\047\000\032\000\074\001\
\\038\002\048\002\051\000\048\000\
\\030\002\097\000\047\000\031\000\
\\032\000\074\001\042\002\074\001\
\\061\000\044\001\053\001\055\001\
\\078\000\033\001\230\001\222\001\
\\043\000\155\001\140\000\134\000\
\\218\001\156\000\228\001\057\000\
\\155\001\158\001\159\001\204\001\
\\237\000\025\000\163\001\172\001\
\\107\000\168\001\109\000\238\000\
\\240\000\241\000\239\000\026\000\
\\243\000\244\000\255\000\079\000\
\\011\000\073\000\004\001\006\001\
\\000\001\178\000\084\001\139\001\
\\242\001\239\001\241\001\238\001\
\\014\000\152\000\124\000\236\001\
\\014\000\231\001\066\000\098\000\
\\056\000\066\000\034\002\035\002\
\\037\002\032\000\050\002\049\002\
\\054\002\053\002\056\000\044\002\
\\046\002\027\002\045\002\041\002\
\\024\002\056\000\019\001\080\000\
\\133\000\209\000\208\000\207\000\
\\156\001\229\001\219\001\043\000\
\\043\000\133\000\206\000\153\000\
\\235\000\025\000\206\001\177\001\
\\232\000\231\000\025\000\254\001\
\\234\001\233\001\051\000\051\000\
\\253\001\081\000\032\000\099\000\
\\064\002\063\002\039\002\052\002\
\\051\002\025\002\031\001\189\001\
\\036\000\133\000\125\000\214\001\
\\056\000\236\000\110\000\254\000\
\\235\001\010\002\032\000\220\001\
\\032\000\195\001\194\001\126\000\
\\197\001\045\000\044\000\189\001\
\\032\000\191\001\158\000\148\001\
\\173\001\009\002\190\001\154\000\
\\035\000\032\000\191\001\191\001\
\\217\001\025\000\141\000\058\000\
\\058\000\198\001\195\001\193\001\
\\216\001\215\001\192\001\213\001\
\\211\001\209\001\196\001\212\001\
\\043\000\209\001\100\000\210\001\
\\025\000\208\001\000\000"
val gotoT =
"\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\118\000\006\000\153\000\005\000\154\000\004\000\155\000\003\000\
\\156\000\002\000\157\000\001\000\158\000\254\002\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\118\000\006\000\153\000\005\000\154\000\004\000\155\000\038\000\
\\156\000\002\000\157\000\001\000\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\118\000\006\000\153\000\005\000\154\000\004\000\155\000\039\000\
\\156\000\002\000\157\000\001\000\000\000\
\\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\118\000\006\000\153\000\005\000\154\000\004\000\155\000\040\000\
\\156\000\002\000\157\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\090\000\008\000\091\000\043\000\000\000\
\\000\000\
\\000\000\
\\002\000\044\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\044\000\059\000\
\\045\000\058\000\059\000\057\000\060\000\056\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\049\000\000\000\
\\049\000\103\000\050\000\102\000\058\000\101\000\000\000\
\\017\000\109\000\120\000\108\000\121\000\107\000\122\000\106\000\000\000\
\\021\000\114\000\146\000\113\000\147\000\112\000\148\000\111\000\000\000\
\\017\000\118\000\018\000\117\000\019\000\116\000\000\000\
\\002\000\120\000\010\000\119\000\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\124\000\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\002\000\120\000\010\000\127\000\057\000\126\000\000\000\
\\002\000\120\000\010\000\131\000\057\000\130\000\000\000\
\\020\000\135\000\149\000\134\000\150\000\133\000\151\000\132\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\046\000\144\000\
\\047\000\143\000\048\000\142\000\059\000\057\000\060\000\141\000\
\\062\000\140\000\063\000\139\000\064\000\055\000\065\000\138\000\
\\066\000\137\000\000\000\
\\002\000\148\000\004\000\147\000\055\000\146\000\056\000\145\000\000\000\
\\000\000\
\\013\000\153\000\051\000\152\000\052\000\151\000\059\000\150\000\000\000\
\\013\000\158\000\051\000\157\000\052\000\151\000\059\000\150\000\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\118\000\006\000\153\000\005\000\154\000\004\000\155\000\159\000\
\\156\000\002\000\157\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\160\000\000\000\
\\013\000\161\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\062\000\140\000\
\\063\000\167\000\064\000\055\000\065\000\138\000\066\000\137\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\062\000\140\000\
\\063\000\169\000\064\000\055\000\065\000\138\000\066\000\137\000\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\044\000\170\000\
\\045\000\058\000\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\049\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\061\000\174\000\
\\064\000\055\000\065\000\054\000\066\000\053\000\067\000\052\000\
\\068\000\051\000\071\000\050\000\072\000\173\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\177\000\000\000\
\\002\000\183\000\015\000\182\000\073\000\181\000\074\000\180\000\
\\075\000\179\000\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\044\000\189\000\
\\045\000\058\000\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\049\000\000\000\
\\003\000\190\000\000\000\
\\000\000\
\\000\000\
\\009\000\193\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\195\000\000\000\
\\000\000\
\\000\000\
\\061\000\197\000\000\000\
\\000\000\
\\017\000\109\000\120\000\198\000\121\000\107\000\122\000\106\000\000\000\
\\000\000\
\\000\000\
\\145\000\199\000\000\000\
\\000\000\
\\021\000\114\000\146\000\202\000\147\000\112\000\148\000\111\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\118\000\018\000\117\000\019\000\204\000\000\000\
\\000\000\
\\000\000\
\\002\000\120\000\010\000\206\000\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\207\000\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\208\000\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\000\000\
\\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\210\000\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\002\000\120\000\010\000\211\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\120\000\010\000\212\000\000\000\
\\000\000\
\\020\000\135\000\149\000\213\000\150\000\133\000\151\000\132\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\062\000\140\000\
\\063\000\215\000\064\000\055\000\065\000\138\000\066\000\137\000\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\062\000\140\000\
\\063\000\218\000\064\000\055\000\065\000\138\000\066\000\137\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\046\000\219\000\
\\047\000\143\000\048\000\142\000\062\000\140\000\063\000\139\000\
\\064\000\055\000\065\000\138\000\066\000\137\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\225\000\000\000\
\\013\000\226\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\061\000\174\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\109\000\233\000\000\000\
\\108\000\235\000\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\242\000\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\255\000\036\000\254\000\
\\086\000\253\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\032\001\
\\069\000\031\001\070\000\030\001\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\033\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\032\001\
\\069\000\034\001\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\173\000\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\044\000\035\001\
\\045\000\058\000\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\049\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\044\000\036\001\
\\045\000\058\000\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\049\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\076\000\041\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\048\001\000\000\
\\000\000\
\\002\000\049\001\000\000\
\\000\000\
\\049\000\103\000\050\000\052\001\058\000\101\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\060\001\123\000\059\001\124\000\058\001\125\000\057\001\
\\126\000\056\001\127\000\055\001\000\000\
\\021\000\060\001\123\000\062\001\124\000\058\001\125\000\057\001\
\\126\000\056\001\127\000\055\001\000\000\
\\000\000\
\\021\000\060\001\123\000\066\001\124\000\065\001\125\000\057\001\
\\126\000\056\001\127\000\064\001\128\000\063\001\000\000\
\\000\000\
\\017\000\118\000\018\000\067\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\068\001\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\074\001\089\000\073\001\090\000\008\000\091\000\007\000\
\\129\000\072\001\130\000\071\001\131\000\070\001\152\000\069\001\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\084\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\085\001\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\047\000\086\001\
\\048\000\142\000\062\000\140\000\063\000\139\000\064\000\055\000\
\\065\000\138\000\066\000\137\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\046\000\087\001\
\\047\000\143\000\048\000\142\000\062\000\140\000\063\000\139\000\
\\064\000\055\000\065\000\138\000\066\000\137\000\000\000\
\\002\000\148\000\004\000\089\001\055\000\088\001\056\000\145\000\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\090\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\002\000\004\001\006\000\092\001\022\000\091\001\000\000\
\\000\000\
\\000\000\
\\013\000\158\000\051\000\094\001\052\000\151\000\059\000\150\000\000\000\
\\049\000\103\000\050\000\095\001\058\000\101\000\000\000\
\\003\000\099\001\005\000\098\001\053\000\097\001\054\000\096\001\000\000\
\\049\000\103\000\050\000\103\001\058\000\101\000\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\104\001\000\000\
\\003\000\099\001\005\000\098\001\053\000\097\001\054\000\096\001\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\111\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\110\000\112\001\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\114\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\116\001\017\000\244\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\120\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\015\000\123\001\084\000\122\001\085\000\121\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\134\001\036\000\133\001\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\016\000\135\001\000\000\
\\016\000\138\001\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\139\001\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\146\001\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\151\001\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\153\001\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\154\001\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\156\001\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\157\001\000\000\
\\013\000\246\000\014\000\149\001\017\000\244\000\022\000\148\001\
\\087\000\147\001\088\000\159\001\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\162\001\033\000\161\001\
\\035\000\160\001\036\000\254\000\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\166\001\033\000\165\001\
\\036\000\254\000\086\000\253\000\000\000\
\\015\000\170\001\029\000\169\001\030\000\168\001\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\172\001\036\000\254\000\
\\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\173\001\036\000\254\000\
\\086\000\253\000\000\000\
\\002\000\174\001\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\176\001\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\177\001\036\000\254\000\
\\086\000\253\000\000\000\
\\015\000\178\001\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\038\000\181\001\
\\039\000\180\001\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\179\001\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\182\001\036\000\254\000\
\\086\000\253\000\000\000\
\\007\000\183\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\187\001\000\000\
\\000\000\
\\061\000\188\001\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\190\001\000\000\
\\002\000\183\000\015\000\182\000\073\000\191\001\074\000\180\000\
\\075\000\179\000\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\192\001\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\193\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\194\001\000\000\
\\000\000\
\\000\000\
\\009\000\195\001\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\196\001\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\017\000\118\000\018\000\203\001\020\000\202\001\111\000\201\001\
\\112\000\200\001\113\000\199\001\114\000\198\001\115\000\197\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\089\000\073\001\090\000\008\000\091\000\007\000\129\000\210\001\
\\130\000\071\001\131\000\070\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\089\000\073\001\090\000\008\000\091\000\007\000\129\000\214\001\
\\130\000\071\001\131\000\070\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\218\001\132\000\217\001\133\000\216\001\000\000\
\\058\000\221\001\134\000\220\001\135\000\219\001\000\000\
\\017\000\225\001\140\000\224\001\141\000\223\001\142\000\222\001\000\000\
\\017\000\118\000\018\000\227\001\144\000\226\001\000\000\
\\021\000\060\001\123\000\229\001\124\000\058\001\125\000\057\001\
\\126\000\056\001\127\000\055\001\000\000\
\\002\000\233\001\004\000\232\001\138\000\231\001\139\000\230\001\000\000\
\\058\000\236\001\136\000\235\001\137\000\234\001\000\000\
\\013\000\238\001\051\000\237\001\052\000\151\000\059\000\150\000\000\000\
\\089\000\073\001\090\000\008\000\091\000\007\000\129\000\239\001\
\\130\000\071\001\131\000\070\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\099\001\005\000\098\001\053\000\242\001\054\000\096\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\245\001\000\000\
\\013\000\246\000\014\000\247\001\017\000\244\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\250\001\000\000\
\\000\000\
\\157\000\251\001\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\252\001\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\253\001\000\000\
\\090\000\008\000\091\000\001\002\105\000\000\002\106\000\255\001\
\\107\000\254\001\000\000\
\\083\000\002\002\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\005\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\006\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\078\000\241\000\079\000\240\000\080\000\239\000\081\000\007\002\000\000\
\\002\000\004\001\006\000\009\002\011\000\008\002\000\000\
\\013\000\246\000\014\000\010\002\017\000\244\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\016\002\036\000\254\000\
\\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\017\002\036\000\254\000\
\\086\000\253\000\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\018\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\019\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\038\000\181\001\
\\039\000\020\002\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\179\001\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\134\001\036\000\133\001\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\022\002\032\000\021\002\
\\036\000\254\000\086\000\253\000\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\024\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\025\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\028\002\000\000\
\\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\030\002\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\031\002\086\000\253\000\000\000\
\\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\034\002\
\\037\000\033\002\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\036\002\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\042\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\049\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\055\002\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\032\001\
\\069\000\031\001\070\000\057\002\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\032\001\
\\069\000\058\002\000\000\
\\076\000\059\002\000\000\
\\000\000\
\\000\000\
\\076\000\060\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\066\002\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\116\000\067\002\118\000\123\000\119\000\122\000\157\000\121\000\000\000\
\\000\000\
\\058\000\068\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\145\000\071\002\000\000\
\\000\000\
\\021\000\060\001\123\000\072\002\124\000\058\001\125\000\057\001\
\\126\000\056\001\127\000\055\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\076\002\000\000\
\\017\000\225\001\140\000\077\002\141\000\223\001\142\000\222\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\081\002\017\000\244\000\143\000\080\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\086\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\089\002\036\000\254\000\
\\086\000\253\000\000\000\
\\002\000\004\001\006\000\092\001\000\000\
\\000\000\
\\003\000\099\001\005\000\098\001\053\000\090\002\054\000\096\001\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\091\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\092\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\090\000\008\000\091\000\001\002\105\000\000\002\106\000\255\001\
\\107\000\095\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\097\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\090\000\008\000\091\000\101\002\102\000\100\002\103\000\099\002\
\\104\000\098\002\000\000\
\\083\000\102\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\104\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\015\000\123\001\084\000\105\002\085\000\121\001\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\106\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\108\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\111\002\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\112\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\113\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\114\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\022\002\032\000\115\002\
\\036\000\254\000\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\118\002\034\000\117\002\
\\035\000\116\002\036\000\254\000\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\170\001\029\000\120\002\030\000\168\001\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\121\002\036\000\254\000\
\\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\122\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\124\002\035\000\123\002\
\\036\000\254\000\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\125\002\036\000\254\000\
\\086\000\253\000\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\126\002\036\000\254\000\
\\086\000\253\000\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\038\000\181\001\
\\039\000\127\002\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\179\001\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\038\000\181\001\
\\039\000\128\002\064\000\055\000\065\000\054\000\066\000\053\000\
\\067\000\052\000\068\000\051\000\071\000\050\000\072\000\179\001\000\000\
\\000\000\
\\007\000\129\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\061\000\008\000\060\000\064\000\055\000\
\\065\000\054\000\066\000\053\000\067\000\052\000\068\000\051\000\
\\071\000\050\000\072\000\131\002\000\000\
\\021\000\060\001\123\000\133\002\124\000\065\001\125\000\057\001\
\\126\000\056\001\127\000\064\001\128\000\132\002\000\000\
\\021\000\060\001\123\000\135\002\124\000\065\001\125\000\057\001\
\\126\000\056\001\127\000\064\001\128\000\134\002\000\000\
\\000\000\
\\017\000\118\000\018\000\203\001\020\000\202\001\040\000\010\000\
\\089\000\009\000\090\000\008\000\091\000\007\000\111\000\139\002\
\\112\000\138\002\113\000\199\001\117\000\137\002\118\000\123\000\
\\119\000\136\002\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\143\002\017\000\244\000\000\000\
\\058\000\144\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\218\001\132\000\146\002\133\000\216\001\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\147\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\058\000\221\001\134\000\148\002\135\000\219\001\000\000\
\\000\000\
\\000\000\
\\021\000\060\001\123\000\151\002\124\000\065\001\125\000\057\001\
\\126\000\056\001\127\000\064\001\128\000\150\002\000\000\
\\017\000\118\000\018\000\153\002\144\000\152\002\000\000\
\\000\000\
\\000\000\
\\002\000\156\002\138\000\155\002\139\000\230\001\000\000\
\\022\000\157\002\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\158\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\058\000\236\001\136\000\159\002\137\000\234\001\000\000\
\\000\000\
\\049\000\103\000\050\000\160\002\058\000\101\000\000\000\
\\003\000\099\001\005\000\098\001\053\000\097\001\054\000\096\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\107\001\041\000\106\001\042\000\105\001\043\000\163\002\000\000\
\\000\000\
\\000\000\
\\012\000\164\002\000\000\
\\083\000\168\002\000\000\
\\000\000\
\\090\000\008\000\091\000\101\002\102\000\100\002\103\000\099\002\
\\104\000\170\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\004\001\006\000\009\002\011\000\174\002\000\000\
\\083\000\175\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\176\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\179\002\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\117\000\183\002\118\000\123\000\119\000\136\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\040\000\010\000\089\000\009\000\090\000\008\000\091\000\007\000\
\\117\000\188\002\118\000\123\000\119\000\136\002\000\000\
\\000\000\
\\017\000\118\000\018\000\203\001\020\000\202\001\111\000\139\002\
\\112\000\189\002\113\000\199\001\000\000\
\\000\000\
\\013\000\246\000\014\000\191\002\017\000\244\000\000\000\
\\017\000\118\000\018\000\203\001\020\000\202\001\111\000\201\001\
\\112\000\193\002\113\000\199\001\114\000\192\002\115\000\197\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\194\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\196\002\017\000\244\000\143\000\195\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\197\002\017\000\244\000\000\000\
\\000\000\
\\000\000\
\\092\000\199\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\201\002\000\000\
\\012\000\202\002\000\000\
\\092\000\203\002\000\000\
\\000\000\
\\000\000\
\\031\000\205\002\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\206\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\207\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\060\001\123\000\133\002\124\000\058\001\125\000\057\001\
\\126\000\056\001\127\000\055\001\000\000\
\\021\000\060\001\123\000\135\002\124\000\058\001\125\000\057\001\
\\126\000\056\001\127\000\055\001\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\209\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\101\000\211\002\000\000\
\\002\000\215\002\013\000\246\000\014\000\245\000\017\000\244\000\
\\022\000\243\000\077\000\214\002\078\000\241\000\079\000\240\000\
\\080\000\239\000\081\000\238\000\082\000\237\000\094\000\213\002\000\000\
\\092\000\219\002\000\000\
\\000\000\
\\096\000\221\002\000\000\
\\013\000\246\000\014\000\223\002\017\000\244\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\225\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\226\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\093\000\227\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\101\000\230\002\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\231\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\100\000\232\002\000\000\
\\095\000\234\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\215\002\013\000\246\000\014\000\245\000\017\000\244\000\
\\022\000\243\000\077\000\214\002\078\000\241\000\079\000\240\000\
\\080\000\239\000\081\000\238\000\082\000\237\000\094\000\238\002\000\000\
\\013\000\246\000\014\000\245\000\017\000\244\000\022\000\243\000\
\\077\000\239\002\078\000\241\000\079\000\240\000\080\000\239\000\
\\081\000\238\000\082\000\237\000\000\000\
\\100\000\240\002\000\000\
\\100\000\241\002\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\242\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\244\002\000\000\
\\002\000\004\001\006\000\142\001\027\000\141\001\028\000\140\001\
\\099\000\245\002\000\000\
\\000\000\
\\093\000\246\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\097\000\247\002\000\000\
\\000\000\
\\000\000\
\\012\000\250\002\098\000\249\002\000\000\
\\097\000\251\002\000\000\
\\000\000\
\\000\000\
\\001\000\005\001\002\000\004\001\006\000\003\001\023\000\002\001\
\\024\000\001\001\025\000\000\001\026\000\253\002\036\000\254\000\
\\086\000\253\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 767
val numrules = 425
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = Position.pos
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit
 | UNDERLINEID of  (Syntax.symbol) | BYTECODE of  (Java.OpType)
 | TYVAR of  (Syntax.symbol) | SYMBOLIC of  (Syntax.symbol)
 | ALPHA of  (Syntax.symbol) | JAVALONGID of  (JavaString.t)
 | JAVAID of  (JavaString.t) | INTLAB of  (string)
 | SCON of  (SCon.SCon) | start of  (Dec) | extrarparen of  (unit)
 | extraend of  (unit) | topdec of  (Dec) | topdecitem of  (DecItem)
 | topdecitemp of  (PreDecItem) | funarg of  (FunArg)
 | funbinditemand of  (FunBind) | funbinditem of  (FunBind)
 | funbind of  (FunBind list) | sigbinditemand of  (SigBind)
 | sigbinditem of  (SigBind) | sigbind of  (SigBind list)
 | siginfo of  (SigInfo) | longstrids_equals of  (longid list)
 | longtycons_equals of  (longid list)
 | strdescitemand of  (symbol*SigExp)
 | strdescitem of  (symbol*SigExp)
 | strdesc of  ( ( symbol * SigExp )  list) | exdescitem of  (ConBind)
 | exdesc of  (ConBind list) | eqtypdescitem of  (symbol list*symbol)
 | eqtypdesc of  ( ( symbol list * symbol )  list)
 | typdescitem of  (symbol list*symbol*Ty option)
 | typdesc of  ( ( symbol list * symbol * Ty option )  list)
 | valdescitem of  (symbol*Ty) | valdesc of  ( ( symbol * Ty )  list)
 | specitemp of  (PreSpecItem) | specitem of  (SpecItem)
 | spec of  (SpecItem list) | sigexpand of  (SigExp)
 | sigexpwand of  (SigExp) | sigexpw of  (SigExp)
 | sigexpwp of  (PreSigExp) | sigexpp of  (PreSigExp)
 | sigexp of  (SigExp) | strbinditemand of  (StrBind)
 | strbinditem of  (StrBind) | strbind of  (StrBind list)
 | strdecitem of  (DecItem) | strdecitemp of  (PreDecItem)
 | strdecarg of  (Dec) | strdec of  (Dec) | strexpandp of  (PreStrExp)
 | strexpand of  (StrExp) | strexpp of  (PreStrExp)
 | strexp of  (StrExp) | strexpcom of  (PreStrExp)
 | implements of  (Ty list) | extendsmany of  (Ty list)
 | extendsone of  (Ty option) | intitems of  (ClassItem list)
 | intitem of  (ClassItem) | intitemp of  (PreClassItem)
 | classitems of  (ClassItem list) | classitem of  (ClassItem)
 | classitemp of  (PreClassItem) | tyoption of  (Ty option)
 | expoption of  (Exp option) | args of  (Exp list)
 | fldinit of  (JavaString.t*Exp)
 | fldinits of  ( ( JavaString.t*Exp )  list) | initsopt of  (Inits)
 | inits of  (Inits) | javaarg of  (symbol option*Ty)
 | javacommaarg of  ( ( symbol option * Ty )  list)
 | javaargs of  ( ( symbol option * Ty )  list)
 | javaflags of  (JavaFlags.javaflag list)
 | javaflag of  (JavaFlags.javaflag) | javadec of  (JavaDec)
 | tyarg of  (Ty) | tyargp of  (PreTy)
 | javaexp of  (Java.OpType*Ty option*JavaString.t option*Exp list)
 | tyrowitem of  (symbol*Ty) | tyrow of  ( ( symbol*Ty )  list)
 | commatyseq of  (Ty list) | tytuple of  (Ty) | tytupl of  (Ty list)
 | attyc of  (Ty) | attyp of  (PreTy) | atty of  (Ty) | ty of  (Ty)
 | commapatseq of  (Pat list) | patrowitemp of  (symbol*PrePat)
 | patrowitem of  (symbol*Pat)
 | patrow of  (bool* ( (symbol*Pat) list ) ) | pat of  (Pat)
 | patp of  (PrePat) | atpat3bar of  (Pat list) | atpat3 of  (Pat)
 | atpat3p of  (PrePat) | atpat2p of  (PrePat) | atpatp of  (PrePat)
 | atpatwild of  (Pat*Pat) | atpatwildp of  (symbol)
 | atpats_spaced of  (Pat list) | atpat of  (Pat)
 | tyvarrow of  (symbol list) | boundtyvar1seq of  (BoundTyVars)
 | tyvar1seq of  (symbol list) | tyvarseq of  (symbol list)
 | infix_digit of  (int) | exbinditem of  ( ( OpVid*ExBind ) )
 | exbind of  ( ( OpVid*ExBind )  list)
 | conbinditem of  (OpVid*Ty option)
 | conbind of  ( ( OpVid * Ty option )  list)
 | datbinditem of  (symbol list*symbol* ( ConBind list ) )
 | datbind of  (DatBind) | typbind of  ( ( TypBind ) )
 | typbinditem of  ( ( symbol list * symbol * Ty ) )
 | fvalbinditemitem of  (FlatFValBindItem)
 | fvalbinditem of  (FlatFValBindItem list)
 | fvalbind of  ( ( FlatFValBindItem list list ) )
 | valbinditem of  (Pat*Exp) | valbind of  ( ( Pat * Exp )  list)
 | dec of  (Dec) | decitem of  (DecItem) | decitemp of  (PreDecItem)
 | decitempl of  (PreDecItem) | match of  (Match) | mrule of  (MRule)
 | simpleexp of  (Exp) | flat2exp of  (Exp list)
 | exp2semirow of  (Exp list) | expsemirow of  (Exp list)
 | exp2commarow of  (Exp list) | exp1commarow of  (Exp list)
 | commaexp of  (Exp list) | exprowitem of  ( ( symbol * Exp ) )
 | exprow of  ( ( symbol * Exp )  list) | oneexp of  (Exp)
 | oneexpp of  (PreExp) | exp of  (Exp) | expp of  (PreExp)
 | atexp of  (Exp) | atexpp of  (PreExp)
 | javalongid of  (JavaString.t) | sigid of  (symbol)
 | funid of  (symbol) | longstrids_spaced of  (symbol list list)
 | longstrid of  (symbol list) | strid of  (symbol)
 | fieldname of  (symbol) | lab of  (symbol)
 | longtycon of  (symbol list) | tycon of  (symbol)
 | javaidsym of  (JavaString.t) | oplongvids_and of  (OpLongVid list)
 | vids_spaced of  (symbol list) | lvpatend of  (symbol list)
 | oplongvidpat of  (OpLongVid) | lvend of  (symbol list)
 | oplongvid of  (OpLongVid) | opvidpat of  (bool*symbol)
 | opvid of  (bool*symbol) | vidpat of  (symbol) | vid of  (symbol)
 | scon of  (SCon.SCon)
end
type svalue = MlyValue.svalue
type result = Dec
end
structure EC=
struct
open LrTable
val is_keyword =
fn (T 10) => true | (T 11) => true | (T 13) => true | (T 15) => true
 | (T 16) => true | (T 17) => true | (T 18) => true | (T 19) => true
 | (T 21) => true | (T 22) => true | (T 23) => true | (T 26) => true
 | (T 27) => true | (T 28) => true | (T 29) => true | (T 30) => true
 | (T 32) => true | (T 33) => true | (T 34) => true | (T 35) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 39) => true
 | (T 40) => true | (T 41) => true | (T 42) => true | (T 43) => true
 | (T 95) => true | (T 44) => true | (T 45) => true | (T 46) => true
 | (T 47) => true | (T 48) => true | (T 49) => true | (T 50) => true
 | (T 51) => true | (T 52) => true | (T 53) => true | (T 55) => true
 | (T 54) => true | (T 57) => true | (T 58) => true | (T 69) => true
 | (T 70) => true | (T 71) => true | (T 72) => true | (T 73) => true
 | (T 74) => true | (T 75) => true | (T 76) => true | (T 77) => true
 | (T 78) => true | (T 79) => true | (T 80) => true | (T 81) => true
 | (T 82) => true | (T 83) => true | (T 84) => true | (T 85) => true
 | (T 86) => true | (T 87) => true | (T 88) => true | (T 89) => true
 | (T 90) => true | (T 91) => true | (T 92) => true | (T 93) => true
 | (T 94) => true | (T 96) => true | (T 97) => true | _ => false
val preferred_change = 
(nil
,(T 53) :: nil
)::
(nil
,(T 51) :: nil
)::
(nil
,(T 18) :: nil
)::
(nil
,(T 65) :: nil
)::
(nil
,(T 2) :: nil
)::
((T 26) :: nil
,(T 20) :: nil
)::
((T 20) :: nil
,(T 26) :: nil
)::
((T 11) :: nil
,(T 70) :: nil
)::
((T 60) :: nil
,(T 41) :: nil
)::
((T 2) :: nil
,(T 62) :: nil
)::
((T 62) :: nil
,(T 2) :: nil
)::
(nil
,(T 33) :: (T 7) :: nil
)::
(nil
,(T 33) :: (T 7) :: (T 19) :: nil
)::
(nil
,(T 18) :: (T 7) :: nil
)::
(nil
,(T 56) :: nil
)::
(nil
,(T 38) :: nil
)::
(nil
,(T 39) :: nil
)::
((T 56) :: (T 7) :: nil
,(T 7) :: nil
)::
((T 56) :: nil
,(T 7) :: nil
)::
(nil
,(T 53) :: (T 56) :: (T 20) :: nil
)::
nil
val noShift = 
fn (T 1) => true | _ => false
val showTerminal =
fn (T 0) => "BAD"
  | (T 1) => "EOF"
  | (T 2) => "SEMICOLON"
  | (T 3) => "SCON"
  | (T 4) => "INTLAB"
  | (T 5) => "JAVAID"
  | (T 6) => "JAVALONGID"
  | (T 7) => "ALPHA"
  | (T 8) => "SYMBOLIC"
  | (T 9) => "TYVAR"
  | (T 10) => "ABSTYPE"
  | (T 11) => "AND"
  | (T 12) => "ARROW"
  | (T 13) => "AS"
  | (T 14) => "BAR"
  | (T 15) => "CASE"
  | (T 16) => "DATATYPE"
  | (T 17) => "DOTDOTDOT"
  | (T 18) => "ELSE"
  | (T 19) => "END"
  | (T 20) => "EQUALOP"
  | (T 21) => "EQTYPE"
  | (T 22) => "EXCEPTION"
  | (T 23) => "DO"
  | (T 24) => "DOT"
  | (T 25) => "DOTS"
  | (T 26) => "DARROW"
  | (T 27) => "FN"
  | (T 28) => "FUN"
  | (T 29) => "FUNCTOR"
  | (T 30) => "HANDLE"
  | (T 31) => "HASH"
  | (T 32) => "IF"
  | (T 33) => "IN"
  | (T 34) => "INCLUDE"
  | (T 35) => "INFIX"
  | (T 36) => "INFIXR"
  | (T 37) => "LAZY"
  | (T 38) => "LET"
  | (T 39) => "LOCAL"
  | (T 40) => "NONFIX"
  | (T 41) => "OF"
  | (T 42) => "OP"
  | (T 43) => "OPEN"
  | (T 44) => "RAISE"
  | (T 45) => "REC"
  | (T 46) => "SHARING"
  | (T 47) => "SIG"
  | (T 48) => "SIGNATURE"
  | (T 49) => "STRUCT"
  | (T 50) => "STRUCTURE"
  | (T 51) => "THEN"
  | (T 52) => "TYPE"
  | (T 53) => "VAL"
  | (T 54) => "WHERE"
  | (T 55) => "WHILE"
  | (T 56) => "WILD"
  | (T 57) => "WITH"
  | (T 58) => "WITHTYPE"
  | (T 59) => "ASTERISK"
  | (T 60) => "COLON"
  | (T 61) => "COLONGT"
  | (T 62) => "COMMA"
  | (T 63) => "LBRACE"
  | (T 64) => "LBRACKET"
  | (T 65) => "LPAREN"
  | (T 66) => "RBRACE"
  | (T 67) => "RBRACKET"
  | (T 68) => "RPAREN"
  | (T 69) => "ORELSE"
  | (T 70) => "ANDALSO"
  | (T 71) => "ABSTRACT"
  | (T 72) => "CAST"
  | (T 73) => "CLASSTYPE"
  | (T 74) => "CONSTRUCTOR"
  | (T 75) => "EXTENDS"
  | (T 76) => "FIELD"
  | (T 77) => "FINAL"
  | (T 78) => "GETFIELD"
  | (T 79) => "IMPLEMENTS"
  | (T 80) => "INSTANCEOF"
  | (T 81) => "INTERFACETYPE"
  | (T 82) => "INVOKE"
  | (T 83) => "METHOD"
  | (T 84) => "NEW"
  | (T 85) => "PRIVATE"
  | (T 86) => "PROTECTED"
  | (T 87) => "PUBLIC"
  | (T 88) => "PUTFIELD"
  | (T 89) => "SUPER"
  | (T 90) => "STATIC"
  | (T 91) => "SYNCHRONIZED"
  | (T 92) => "THIS"
  | (T 93) => "TRANSIENT"
  | (T 94) => "VOLATILE"
  | (T 95) => "OVERLOAD"
  | (T 96) => "NEWARRAY"
  | (T 97) => "BYTECODE"
  | (T 98) => "DOTHASH"
  | (T 99) => "DOTHASHHASH"
  | (T 100) => "UNDERLINEID"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 7) => MlyValue.ALPHA((bad_symbol)) | 
(T 8) => MlyValue.SYMBOLIC((bad_symbol)) | 
(T 9) => MlyValue.TYVAR((bad_tyvar)) | 
(T 4) => MlyValue.INTLAB(("99999")) | 
(T 3) => MlyValue.SCON((SCon.RealCon "1.0")) | 
(T 97) => MlyValue.BYTECODE((Java.NopCast)) | 
_ => MlyValue.VOID
end
val terms = (T 0) :: (T 1) :: (T 2) :: (T 10) :: (T 11) :: (T 12) :: 
(T 13) :: (T 14) :: (T 15) :: (T 16) :: (T 17) :: (T 18) :: (T 19) :: 
(T 20) :: (T 21) :: (T 22) :: (T 23) :: (T 24) :: (T 25) :: (T 26) :: 
(T 27) :: (T 28) :: (T 29) :: (T 30) :: (T 31) :: (T 32) :: (T 33) :: 
(T 34) :: (T 35) :: (T 36) :: (T 37) :: (T 38) :: (T 39) :: (T 40) :: 
(T 41) :: (T 42) :: (T 43) :: (T 44) :: (T 45) :: (T 46) :: (T 47) :: 
(T 48) :: (T 49) :: (T 50) :: (T 51) :: (T 52) :: (T 53) :: (T 54) :: 
(T 55) :: (T 56) :: (T 57) :: (T 58) :: (T 59) :: (T 60) :: (T 61) :: 
(T 62) :: (T 63) :: (T 64) :: (T 65) :: (T 66) :: (T 67) :: (T 68) :: 
(T 69) :: (T 70) :: (T 71) :: (T 72) :: (T 73) :: (T 74) :: (T 75) :: 
(T 76) :: (T 77) :: (T 78) :: (T 79) :: (T 80) :: (T 81) :: (T 82) :: 
(T 83) :: (T 84) :: (T 85) :: (T 86) :: (T 87) :: (T 88) :: (T 89) :: 
(T 90) :: (T 91) :: (T 92) :: (T 93) :: (T 94) :: (T 95) :: (T 96) :: 
(T 98) :: (T 99) :: nil
end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of (0,(_,(MlyValue.topdec topdec,topdec1left,topdec1right))::rest671)
 => let val result=MlyValue.start((topdec))
 in (LrTable.NT 157,(result,topdec1left,topdec1right),rest671) end
| (1,(_,(MlyValue.SCON SCON,SCON1left,SCON1right))::rest671) => let 
val result=MlyValue.scon((SCON))
 in (LrTable.NT 0,(result,SCON1left,SCON1right),rest671) end
| (2,(_,(MlyValue.INTLAB INTLAB,INTLAB1left,INTLAB1right))::rest671)
 => let val result=MlyValue.scon((
SCon.NumCon(IntConvFlags.Decimal,
                         IntConvFlags.Signed false,(INTLAB))
))
 in (LrTable.NT 0,(result,INTLAB1left,INTLAB1right),rest671) end
| (3,(_,(MlyValue.JAVAID JAVAID,JAVAID1left,JAVAID1right))::rest671)
 => let val result=MlyValue.scon((SCon.StrCon(JAVAID)))
 in (LrTable.NT 0,(result,JAVAID1left,JAVAID1right),rest671) end
| (4,(_,(MlyValue.JAVALONGID JAVALONGID,JAVALONGID1left,
JAVALONGID1right))::rest671) => let val result=MlyValue.scon((
SCon.StrCon(JAVALONGID)))
 in (LrTable.NT 0,(result,JAVALONGID1left,JAVALONGID1right),rest671)
 end
| (5,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.vid((ALPHA))
 in (LrTable.NT 1,(result,ALPHA1left,ALPHA1right),rest671) end
| (6,(_,(MlyValue.SYMBOLIC SYMBOLIC,SYMBOLIC1left,SYMBOLIC1right))::
rest671) => let val result=MlyValue.vid((SYMBOLIC))
 in (LrTable.NT 1,(result,SYMBOLIC1left,SYMBOLIC1right),rest671) end
| (7,(_,(_,ASTERISK1left,ASTERISK1right))::rest671) => let val result=
MlyValue.vid((asterisk))
 in (LrTable.NT 1,(result,ASTERISK1left,ASTERISK1right),rest671) end
| (8,(_,(_,EQUALOP1left,EQUALOP1right))::rest671) => let val result=
MlyValue.vid((equalop))
 in (LrTable.NT 1,(result,EQUALOP1left,EQUALOP1right),rest671) end
| (9,(_,(MlyValue.vid vid,_,vid1right))::(_,(_,OP1left,_))::rest671)
 => let val result=MlyValue.opvid(((true,(vid))))
 in (LrTable.NT 3,(result,OP1left,vid1right),rest671) end
| (10,(_,(MlyValue.vid vid,vid1left,vid1right))::rest671) => let val 
result=MlyValue.opvid(((false,(vid))))
 in (LrTable.NT 3,(result,vid1left,vid1right),rest671) end
| (11,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.strid((ALPHA))
 in (LrTable.NT 16,(result,ALPHA1left,ALPHA1right),rest671) end
| (12,(_,(MlyValue.vid vid,vid1left,vid1right))::rest671) => let val 
result=MlyValue.oplongvid((Short(vid)))
 in (LrTable.NT 5,(result,vid1left,vid1right),rest671) end
| (13,(_,(MlyValue.vid vid,_,vid1right))::(_,(_,OP1left,_))::rest671)
 => let val result=MlyValue.oplongvid((OpShort(vid)))
 in (LrTable.NT 5,(result,OP1left,vid1right),rest671) end
| (14,(_,(MlyValue.lvend lvend,_,lvend1right))::(_,(MlyValue.ALPHA 
ALPHA,ALPHA1left,_))::rest671) => let val result=MlyValue.oplongvid((
Long((ALPHA)::(lvend))))
 in (LrTable.NT 5,(result,ALPHA1left,lvend1right),rest671) end
| (15,(_,(MlyValue.lvend lvend,_,lvend1right))::(_,(MlyValue.ALPHA 
ALPHA,_,_))::(_,(_,OP1left,_))::rest671) => let val result=
MlyValue.oplongvid((Long((ALPHA)::(lvend))))
 in (LrTable.NT 5,(result,OP1left,lvend1right),rest671) end
| (16,(_,(MlyValue.vid vid,_,vid1right))::(_,(_,DOT1left,_))::rest671)
 => let val result=MlyValue.lvend(([(vid)]))
 in (LrTable.NT 6,(result,DOT1left,vid1right),rest671) end
| (17,(_,(MlyValue.lvend lvend,_,lvend1right))::(_,(MlyValue.ALPHA 
ALPHA,_,_))::(_,(_,DOT1left,_))::rest671) => let val result=
MlyValue.lvend(((ALPHA)::(lvend)))
 in (LrTable.NT 6,(result,DOT1left,lvend1right),rest671) end
| (18,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.vidpat((ALPHA))
 in (LrTable.NT 2,(result,ALPHA1left,ALPHA1right),rest671) end
| (19,(_,(MlyValue.SYMBOLIC SYMBOLIC,SYMBOLIC1left,SYMBOLIC1right))::
rest671) => let val result=MlyValue.vidpat((SYMBOLIC))
 in (LrTable.NT 2,(result,SYMBOLIC1left,SYMBOLIC1right),rest671) end
| (20,(_,(_,ASTERISK1left,ASTERISK1right))::rest671) => let val result
=MlyValue.vidpat((asterisk))
 in (LrTable.NT 2,(result,ASTERISK1left,ASTERISK1right),rest671) end
| (21,(_,(MlyValue.vidpat vidpat,vidpat1left,vidpat1right))::rest671)
 => let val result=MlyValue.oplongvidpat((Short(vidpat)))
 in (LrTable.NT 7,(result,vidpat1left,vidpat1right),rest671) end
| (22,(_,(MlyValue.vidpat vidpat,_,vidpat1right))::(_,(_,OP1left,_))::
rest671) => let val result=MlyValue.oplongvidpat((OpShort(vidpat)))
 in (LrTable.NT 7,(result,OP1left,vidpat1right),rest671) end
| (23,(_,(_,_,EQUALOP1right))::(_,(_,OP1left,_))::rest671) => let val 
result=MlyValue.oplongvidpat((OpShort(equalop)))
 in (LrTable.NT 7,(result,OP1left,EQUALOP1right),rest671) end
| (24,(_,(MlyValue.lvpatend lvpatend,_,lvpatend1right))::(_,(
MlyValue.ALPHA ALPHA,ALPHA1left,_))::rest671) => let val result=
MlyValue.oplongvidpat((Long((ALPHA)::(lvpatend))))
 in (LrTable.NT 7,(result,ALPHA1left,lvpatend1right),rest671) end
| (25,(_,(MlyValue.lvpatend lvpatend,_,lvpatend1right))::(_,(
MlyValue.ALPHA ALPHA,_,_))::(_,(_,OP1left,_))::rest671) => let val 
result=MlyValue.oplongvidpat((Long((ALPHA)::(lvpatend))))
 in (LrTable.NT 7,(result,OP1left,lvpatend1right),rest671) end
| (26,(_,(MlyValue.vid vid,_,vid1right))::(_,(_,DOT1left,_))::rest671)
 => let val result=MlyValue.lvpatend(([(vid)]))
 in (LrTable.NT 8,(result,DOT1left,vid1right),rest671) end
| (27,(_,(MlyValue.lvpatend lvpatend,_,lvpatend1right))::(_,(
MlyValue.ALPHA ALPHA,_,_))::(_,(_,DOT1left,_))::rest671) => let val 
result=MlyValue.lvpatend(((ALPHA)::(lvpatend)))
 in (LrTable.NT 8,(result,DOT1left,lvpatend1right),rest671) end
| (28,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.tycon((ALPHA))
 in (LrTable.NT 12,(result,ALPHA1left,ALPHA1right),rest671) end
| (29,(_,(MlyValue.SYMBOLIC SYMBOLIC,SYMBOLIC1left,SYMBOLIC1right))::
rest671) => let val result=MlyValue.tycon((SYMBOLIC))
 in (LrTable.NT 12,(result,SYMBOLIC1left,SYMBOLIC1right),rest671) end
| (30,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.lab((ALPHA))
 in (LrTable.NT 14,(result,ALPHA1left,ALPHA1right),rest671) end
| (31,(_,(MlyValue.SYMBOLIC SYMBOLIC,SYMBOLIC1left,SYMBOLIC1right))::
rest671) => let val result=MlyValue.lab((SYMBOLIC))
 in (LrTable.NT 14,(result,SYMBOLIC1left,SYMBOLIC1right),rest671) end
| (32,(_,(_,ASTERISK1left,ASTERISK1right))::rest671) => let val result
=MlyValue.lab((asterisk))
 in (LrTable.NT 14,(result,ASTERISK1left,ASTERISK1right),rest671) end
| (33,(_,(MlyValue.INTLAB INTLAB,INTLAB1left,INTLAB1right))::rest671)
 => let val result=MlyValue.lab((SAS(INTLAB)))
 in (LrTable.NT 14,(result,INTLAB1left,INTLAB1right),rest671) end
| (34,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.fieldname((ALPHA))
 in (LrTable.NT 15,(result,ALPHA1left,ALPHA1right),rest671) end
| (35,(_,(MlyValue.SYMBOLIC SYMBOLIC,SYMBOLIC1left,SYMBOLIC1right))::
rest671) => let val result=MlyValue.fieldname((SYMBOLIC))
 in (LrTable.NT 15,(result,SYMBOLIC1left,SYMBOLIC1right),rest671) end
| (36,(_,(MlyValue.strid strid,strid1left,strid1right))::rest671) => 
let val result=MlyValue.longstrid(([(strid)]))
 in (LrTable.NT 17,(result,strid1left,strid1right),rest671) end
| (37,(_,(MlyValue.longstrid longstrid,_,longstrid1right))::_::(_,(
MlyValue.strid strid,strid1left,_))::rest671) => let val result=
MlyValue.longstrid(((strid)::(longstrid)))
 in (LrTable.NT 17,(result,strid1left,longstrid1right),rest671) end
| (38,(_,(MlyValue.tycon tycon,tycon1left,tycon1right))::rest671) => 
let val result=MlyValue.longtycon(([(tycon)]))
 in (LrTable.NT 13,(result,tycon1left,tycon1right),rest671) end
| (39,(_,(MlyValue.longtycon longtycon,_,longtycon1right))::_::(_,(
MlyValue.strid strid,strid1left,_))::rest671) => let val result=
MlyValue.longtycon(((strid)::(longtycon)))
 in (LrTable.NT 13,(result,strid1left,longtycon1right),rest671) end
| (40,(_,(MlyValue.vidpat vidpat,_,vidpat1right))::(_,(_,OP1left,_))::
rest671) => let val result=MlyValue.opvidpat(((true,(vidpat))))
 in (LrTable.NT 4,(result,OP1left,vidpat1right),rest671) end
| (41,(_,(_,_,EQUALOP1right))::(_,(_,OP1left,_))::rest671) => let val 
result=MlyValue.opvidpat(((true,(equalop))))
 in (LrTable.NT 4,(result,OP1left,EQUALOP1right),rest671) end
| (42,(_,(MlyValue.vidpat vidpat,vidpat1left,vidpat1right))::rest671)
 => let val result=MlyValue.opvidpat(((false,(vidpat))))
 in (LrTable.NT 4,(result,vidpat1left,vidpat1right),rest671) end
| (43,(_,(MlyValue.oplongvid oplongvid,oplongvid1left,oplongvid1right)
)::rest671) => let val result=MlyValue.oplongvids_and(([(oplongvid)]))
 in (LrTable.NT 10,(result,oplongvid1left,oplongvid1right),rest671)
 end
| (44,(_,(MlyValue.oplongvids_and oplongvids_and,_,
oplongvids_and1right))::_::(_,(MlyValue.oplongvid oplongvid,
oplongvid1left,_))::rest671) => let val result=MlyValue.oplongvids_and
(((oplongvid)::(oplongvids_and)))
 in (LrTable.NT 10,(result,oplongvid1left,oplongvids_and1right),
rest671) end
| (45,(_,(MlyValue.JAVAID JAVAID,JAVAID1left,JAVAID1right))::rest671)
 => let val result=MlyValue.javaidsym((JAVAID))
 in (LrTable.NT 11,(result,JAVAID1left,JAVAID1right),rest671) end
| (46,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.javaidsym((Symbol.toJavaString(ALPHA)))
 in (LrTable.NT 11,(result,ALPHA1left,ALPHA1right),rest671) end
| (47,(_,(MlyValue.SYMBOLIC SYMBOLIC,SYMBOLIC1left,SYMBOLIC1right))::
rest671) => let val result=MlyValue.javaidsym((
Symbol.toJavaString(SYMBOLIC)))
 in (LrTable.NT 11,(result,SYMBOLIC1left,SYMBOLIC1right),rest671) end
| (48,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.funid(((ALPHA)))
 in (LrTable.NT 19,(result,ALPHA1left,ALPHA1right),rest671) end
| (49,(_,(MlyValue.ALPHA ALPHA,ALPHA1left,ALPHA1right))::rest671) => 
let val result=MlyValue.sigid(((ALPHA)))
 in (LrTable.NT 20,(result,ALPHA1left,ALPHA1right),rest671) end
| (50,(_,(MlyValue.JAVAID JAVAID,JAVAID1left,JAVAID1right))::rest671)
 => let val result=MlyValue.javalongid(((JAVAID)))
 in (LrTable.NT 21,(result,JAVAID1left,JAVAID1right),rest671) end
| (51,(_,(MlyValue.JAVALONGID JAVALONGID,JAVALONGID1left,
JAVALONGID1right))::rest671) => let val result=MlyValue.javalongid((
(JAVALONGID)))
 in (LrTable.NT 21,(result,JAVALONGID1left,JAVALONGID1right),rest671)
 end
| (52,(_,(MlyValue.javaexp javaexp,javaexp1left,javaexp1right))::
rest671) => let val result=MlyValue.atexpp((Java(javaexp)))
 in (LrTable.NT 22,(result,javaexp1left,javaexp1right),rest671) end
| (53,(_,(MlyValue.scon scon,scon1left,scon1right))::rest671) => let 
val result=MlyValue.atexpp((SCon(scon)))
 in (LrTable.NT 22,(result,scon1left,scon1right),rest671) end
| (54,(_,(MlyValue.oplongvid oplongvid,oplongvid1left,oplongvid1right)
)::rest671) => let val result=MlyValue.atexpp((LongVid(oplongvid)))
 in (LrTable.NT 22,(result,oplongvid1left,oplongvid1right),rest671)
 end
| (55,(_,(_,_,RBRACE1right))::(_,(MlyValue.exprow exprow,_,_))::(_,(_,
LBRACE1left,_))::rest671) => let val result=MlyValue.atexpp((
Record(exprow)))
 in (LrTable.NT 22,(result,LBRACE1left,RBRACE1right),rest671) end
| (56,(_,(_,_,RBRACE1right))::(_,(_,LBRACE1left,_))::rest671) => let 
val result=MlyValue.atexpp((Record[]))
 in (LrTable.NT 22,(result,LBRACE1left,RBRACE1right),rest671) end
| (57,(_,(MlyValue.lab lab,_,lab1right))::(_,(_,HASH1left,_))::rest671
) => let val result=MlyValue.atexpp((Hash(lab)))
 in (LrTable.NT 22,(result,HASH1left,lab1right),rest671) end
| (58,(_,(MlyValue.fieldname fieldname,_,fieldname1right))::(_,(_,
DOTHASH1left,_))::rest671) => let val result=MlyValue.atexpp((
DotHash(fieldname)))
 in (LrTable.NT 22,(result,DOTHASH1left,fieldname1right),rest671) end
| (59,(_,(MlyValue.fieldname fieldname,_,fieldname1right))::(_,(_,
DOTHASHHASH1left,_))::rest671) => let val result=MlyValue.atexpp((
DotHashHash(fieldname)))
 in (LrTable.NT 22,(result,DOTHASHHASH1left,fieldname1right),rest671)
 end
| (60,(_,(_,_,RPAREN1right))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.atexpp((Tuple[]))
 in (LrTable.NT 22,(result,LPAREN1left,RPAREN1right),rest671) end
| (61,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp2commarow exp2commarow,_
,_))::(_,(_,LPAREN1left,_))::rest671) => let val result=
MlyValue.atexpp((Tuple (exp2commarow)))
 in (LrTable.NT 22,(result,LPAREN1left,RPAREN1right),rest671) end
| (62,(_,(_,_,RBRACKET1right))::(_,(MlyValue.exp2commarow exp2commarow
,_,_))::(_,(_,LBRACKET1left,_))::rest671) => let val result=
MlyValue.atexpp((List(exp2commarow)))
 in (LrTable.NT 22,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (63,(_,(_,_,RBRACKET1right))::(_,(MlyValue.exp exp,_,_))::(_,(_,
LBRACKET1left,_))::rest671) => let val result=MlyValue.atexpp((
List[(exp)]))
 in (LrTable.NT 22,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (64,(_,(_,_,RBRACKET1right))::(_,(_,LBRACKET1left,_))::rest671) => 
let val result=MlyValue.atexpp((List[]))
 in (LrTable.NT 22,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (65,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp2semirow exp2semirow,_,_
))::(_,(_,LPAREN1left,_))::rest671) => let val result=MlyValue.atexpp(
(Sequence(exp2semirow)))
 in (LrTable.NT 22,(result,LPAREN1left,RPAREN1right),rest671) end
| (66,(_,(_,_,END1right))::(_,(MlyValue.exp exp,_,_))::_::(_,(
MlyValue.dec dec,_,_))::(_,(_,LET1left,_))::rest671) => let val result
=MlyValue.atexpp((Let((dec),(exp))))
 in (LrTable.NT 22,(result,LET1left,END1right),rest671) end
| (67,(_,(_,_,END1right))::(_,(MlyValue.exp2semirow exp2semirow,
exp2semirowleft,exp2semirowright))::_::(_,(MlyValue.dec dec,_,_))::(_,
(_,LET1left,_))::rest671) => let val result=MlyValue.atexpp((
Let((dec),({left=exp2semirowleft,right=exp2semirowright},Sequence(exp2semirow)))
))
 in (LrTable.NT 22,(result,LET1left,END1right),rest671) end
| (68,(_,(MlyValue.atexpp atexpp,atexppleft as atexpp1left,atexppright
 as atexpp1right))::rest671) => let val result=MlyValue.atexp((
({left=atexppleft,right=atexppright},(atexpp))))
 in (LrTable.NT 23,(result,atexpp1left,atexpp1right),rest671) end
| (69,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp exp,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.atexp(((exp)))
 in (LrTable.NT 23,(result,LPAREN1left,RPAREN1right),rest671) end
| (70,rest671) => let val result=MlyValue.commaexp(([]))
 in (LrTable.NT 30,(result,defaultPos,defaultPos),rest671) end
| (71,(_,(MlyValue.commaexp commaexp,_,commaexp1right))::(_,(
MlyValue.exp exp,_,_))::(_,(_,COMMA1left,_))::rest671) => let val 
result=MlyValue.commaexp(((exp)::(commaexp)))
 in (LrTable.NT 30,(result,COMMA1left,commaexp1right),rest671) end
| (72,(_,(MlyValue.commaexp commaexp,_,commaexp1right))::(_,(
MlyValue.exp exp,exp1left,_))::rest671) => let val result=
MlyValue.exp1commarow(((exp)::(commaexp)))
 in (LrTable.NT 31,(result,exp1left,commaexp1right),rest671) end
| (73,(_,(MlyValue.exp1commarow exp1commarow,_,exp1commarow1right))::_
::(_,(MlyValue.exp exp,exp1left,_))::rest671) => let val result=
MlyValue.exp2commarow(((exp)::(exp1commarow)))
 in (LrTable.NT 32,(result,exp1left,exp1commarow1right),rest671) end
| (74,(_,(MlyValue.exp exp,exp1left,exp1right))::rest671) => let val 
result=MlyValue.expsemirow(([(exp)]))
 in (LrTable.NT 33,(result,exp1left,exp1right),rest671) end
| (75,(_,(MlyValue.exp2semirow exp2semirow,exp2semirow1left,
exp2semirow1right))::rest671) => let val result=MlyValue.expsemirow((
(exp2semirow)))
 in (LrTable.NT 33,(result,exp2semirow1left,exp2semirow1right),rest671
) end
| (76,(_,(MlyValue.expsemirow expsemirow,_,expsemirow1right))::_::(_,(
MlyValue.exp exp,exp1left,_))::rest671) => let val result=
MlyValue.exp2semirow(((exp)::(expsemirow)))
 in (LrTable.NT 34,(result,exp1left,expsemirow1right),rest671) end
| (77,(_,(MlyValue.exprowitem exprowitem,exprowitem1left,
exprowitem1right))::rest671) => let val result=MlyValue.exprow((
[(exprowitem)]))
 in (LrTable.NT 28,(result,exprowitem1left,exprowitem1right),rest671)
 end
| (78,(_,(MlyValue.exprow exprow,_,exprow1right))::_::(_,(
MlyValue.exprowitem exprowitem,exprowitem1left,_))::rest671) => let 
val result=MlyValue.exprow(((exprowitem)::(exprow)))
 in (LrTable.NT 28,(result,exprowitem1left,exprow1right),rest671) end
| (79,(_,(MlyValue.exp exp,_,exp1right))::_::(_,(MlyValue.lab lab,
lab1left,_))::rest671) => let val result=MlyValue.exprowitem((
((lab),(exp))))
 in (LrTable.NT 29,(result,lab1left,exp1right),rest671) end
| (80,(_,(MlyValue.atexp atexp2,_,atexp2right))::(_,(MlyValue.atexp 
atexp1,atexp1left,_))::rest671) => let val result=MlyValue.flat2exp((
[(atexp1),(atexp2)]))
 in (LrTable.NT 35,(result,atexp1left,atexp2right),rest671) end
| (81,(_,(MlyValue.flat2exp flat2exp,_,flat2exp1right))::(_,(
MlyValue.atexp atexp,atexp1left,_))::rest671) => let val result=
MlyValue.flat2exp(((atexp)::(flat2exp)))
 in (LrTable.NT 35,(result,atexp1left,flat2exp1right),rest671) end
| (82,(_,(MlyValue.flat2exp flat2exp,flat2exp1left,flat2exp1right))::
rest671) => let val result=MlyValue.expp((FlatApp(flat2exp)))
 in (LrTable.NT 24,(result,flat2exp1left,flat2exp1right),rest671) end
| (83,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.exp exp,
exp1left,_))::rest671) => let val result=MlyValue.expp((
Constraint((exp),(ty))))
 in (LrTable.NT 24,(result,exp1left,ty1right),rest671) end
| (84,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.exp exp,
exp1left,_))::rest671) => let val result=MlyValue.expp((
ConstraintGt((exp),(ty))))
 in (LrTable.NT 24,(result,exp1left,ty1right),rest671) end
| (85,(_,(MlyValue.exp exp2,_,exp2right))::_::(_,(MlyValue.exp exp1,
exp1left,_))::rest671) => let val result=MlyValue.expp((
Andalso((exp1),(exp2))))
 in (LrTable.NT 24,(result,exp1left,exp2right),rest671) end
| (86,(_,(MlyValue.exp exp2,_,exp2right))::_::(_,(MlyValue.exp exp1,
exp1left,_))::rest671) => let val result=MlyValue.expp((
Orelse((exp1),(exp2))))
 in (LrTable.NT 24,(result,exp1left,exp2right),rest671) end
| (87,(_,(MlyValue.match match,_,match1right))::_::(_,(MlyValue.exp 
exp,exp1left,_))::rest671) => let val result=MlyValue.expp((
Handle((exp),(match))))
 in (LrTable.NT 24,(result,exp1left,match1right),rest671) end
| (88,(_,(MlyValue.exp exp,_,exp1right))::(_,(_,RAISE1left,_))::
rest671) => let val result=MlyValue.expp((Raise(exp)))
 in (LrTable.NT 24,(result,RAISE1left,exp1right),rest671) end
| (89,(_,(MlyValue.exp exp3,_,exp3right))::_::(_,(MlyValue.exp exp2,_,
_))::_::(_,(MlyValue.exp exp1,_,_))::(_,(_,IF1left,_))::rest671) => 
let val result=MlyValue.expp((If((exp1),(exp2),(exp3))))
 in (LrTable.NT 24,(result,IF1left,exp3right),rest671) end
| (90,(_,(MlyValue.exp exp2,_,exp2right))::_::(_,(MlyValue.exp exp1,_,
_))::(_,(_,WHILE1left,_))::rest671) => let val result=MlyValue.expp((
While((exp1),(exp2))))
 in (LrTable.NT 24,(result,WHILE1left,exp2right),rest671) end
| (91,(_,(MlyValue.match match,_,match1right))::_::(_,(MlyValue.exp 
exp,_,_))::(_,(_,CASE1left,_))::rest671) => let val result=
MlyValue.expp((Case((exp),(match))))
 in (LrTable.NT 24,(result,CASE1left,match1right),rest671) end
| (92,(_,(MlyValue.match match,_,match1right))::(_,(_,FN1left,_))::
rest671) => let val result=MlyValue.expp((Fn(match)))
 in (LrTable.NT 24,(result,FN1left,match1right),rest671) end
| (93,(_,(MlyValue.atexp atexp,atexp1left,atexp1right))::rest671) => 
let val result=MlyValue.exp(((atexp)))
 in (LrTable.NT 25,(result,atexp1left,atexp1right),rest671) end
| (94,(_,(MlyValue.expp expp,exppleft as expp1left,exppright as 
expp1right))::rest671) => let val result=MlyValue.exp((
({left=exppleft,right=exppright},(expp))))
 in (LrTable.NT 25,(result,expp1left,expp1right),rest671) end
| (95,(_,(MlyValue.exp exp,_,exp1right))::_::(_,(MlyValue.pat pat,
pat1left,_))::rest671) => let val result=MlyValue.mrule(((pat),(exp)))
 in (LrTable.NT 37,(result,pat1left,exp1right),rest671) end
| (96,(_,(MlyValue.mrule mrule,mrule1left,mrule1right))::rest671) => 
let val result=MlyValue.match(([(mrule)]))
 in (LrTable.NT 38,(result,mrule1left,mrule1right),rest671) end
| (97,(_,(MlyValue.match match,_,match1right))::_::(_,(MlyValue.mrule 
mrule,mrule1left,_))::rest671) => let val result=MlyValue.match((
(mrule)::(match)))
 in (LrTable.NT 38,(result,mrule1left,match1right),rest671) end
| (98,(_,(MlyValue.tyvar1seq tyvar1seq,tyvar1seq1left,tyvar1seq1right)
)::rest671) => let val result=MlyValue.boundtyvar1seq((
{explicit=(tyvar1seq),implicit=[]}))
 in (LrTable.NT 59,(result,tyvar1seq1left,tyvar1seq1right),rest671)
 end
| (99,(_,(MlyValue.valbind valbind,_,valbind1right))::(_,(
MlyValue.boundtyvar1seq boundtyvar1seq,_,_))::(_,(_,VAL1left,_))::
rest671) => let val result=MlyValue.decitempl((
Val((boundtyvar1seq),(valbind))))
 in (LrTable.NT 39,(result,VAL1left,valbind1right),rest671) end
| (100,(_,(MlyValue.valbind valbind,_,valbind1right))::(_,(_,VAL1left,
_))::rest671) => let val result=MlyValue.decitempl((
Val(nobound,(valbind))))
 in (LrTable.NT 39,(result,VAL1left,valbind1right),rest671) end
| (101,(_,(MlyValue.valbind valbind,_,valbind1right))::_::(_,(
MlyValue.boundtyvar1seq boundtyvar1seq,_,_))::(_,(_,VAL1left,_))::
rest671) => let val result=MlyValue.decitempl((
ValRec((boundtyvar1seq),(valbind))))
 in (LrTable.NT 39,(result,VAL1left,valbind1right),rest671) end
| (102,(_,(MlyValue.valbind valbind,_,valbind1right))::_::(_,(_,
VAL1left,_))::rest671) => let val result=MlyValue.decitempl((
ValRec(nobound,(valbind))))
 in (LrTable.NT 39,(result,VAL1left,valbind1right),rest671) end
| (103,(_,(MlyValue.fvalbind fvalbind,_,fvalbind1right))::(_,(
MlyValue.boundtyvar1seq boundtyvar1seq,_,_))::(_,(_,FUN1left,_))::
rest671) => let val result=MlyValue.decitempl((
FlatFun((boundtyvar1seq),(fvalbind))))
 in (LrTable.NT 39,(result,FUN1left,fvalbind1right),rest671) end
| (104,(_,(MlyValue.fvalbind fvalbind,_,fvalbind1right))::(_,(_,
FUN1left,_))::rest671) => let val result=MlyValue.decitempl((
FlatFun(nobound,(fvalbind))))
 in (LrTable.NT 39,(result,FUN1left,fvalbind1right),rest671) end
| (105,(_,(MlyValue.typbind typbind,_,typbind1right))::(_,(_,TYPE1left
,_))::rest671) => let val result=MlyValue.decitempl((Type(typbind)))
 in (LrTable.NT 39,(result,TYPE1left,typbind1right),rest671) end
| (106,(_,(MlyValue.datbind datbind,_,datbind1right))::(_,(_,
DATATYPE1left,_))::rest671) => let val result=MlyValue.decitempl((
Datatype((datbind),NONE)))
 in (LrTable.NT 39,(result,DATATYPE1left,datbind1right),rest671) end
| (107,(_,(MlyValue.typbind typbind,_,typbind1right))::_::(_,(
MlyValue.datbind datbind,_,_))::(_,(_,DATATYPE1left,_))::rest671) => 
let val result=MlyValue.decitempl((Datatype((datbind),SOME(typbind))))
 in (LrTable.NT 39,(result,DATATYPE1left,typbind1right),rest671) end
| (108,(_,(MlyValue.longtycon longtycon,_,longtycon1right))::_::_::(_,
(MlyValue.tycon tycon,_,_))::(_,(_,DATATYPE1left,_))::rest671) => let 
val result=MlyValue.decitempl((DatatypeCopy((tycon),(longtycon))))
 in (LrTable.NT 39,(result,DATATYPE1left,longtycon1right),rest671) end
| (109,(_,(_,_,END1right))::(_,(MlyValue.dec dec,_,_))::_::(_,(
MlyValue.datbind datbind,_,_))::(_,(_,ABSTYPE1left,_))::rest671) => 
let val result=MlyValue.decitempl((Abstype((datbind),NONE,(dec))))
 in (LrTable.NT 39,(result,ABSTYPE1left,END1right),rest671) end
| (110,(_,(_,_,END1right))::(_,(MlyValue.dec dec,_,_))::_::(_,(
MlyValue.typbind typbind,_,_))::_::(_,(MlyValue.datbind datbind,_,_))
::(_,(_,ABSTYPE1left,_))::rest671) => let val result=
MlyValue.decitempl((Abstype((datbind),SOME(typbind),(dec))))
 in (LrTable.NT 39,(result,ABSTYPE1left,END1right),rest671) end
| (111,(_,(MlyValue.exbind exbind,_,exbind1right))::(_,(_,
EXCEPTION1left,_))::rest671) => let val result=MlyValue.decitempl((
Exception(exbind)))
 in (LrTable.NT 39,(result,EXCEPTION1left,exbind1right),rest671) end
| (112,(_,(MlyValue.javalongid javalongid,_,javalongid1right))::_::(_,
(MlyValue.opvid opvid,_,_))::(_,(_,EXCEPTION1left,_))::rest671) => 
let val result=MlyValue.decitempl((
JavaDec(ClassException((opvid),(javalongid)))))
 in (LrTable.NT 39,(result,EXCEPTION1left,javalongid1right),rest671)
 end
| (113,(_,(MlyValue.longstrids_spaced longstrids_spaced,_,
longstrids_spaced1right))::(_,(_,OPEN1left,_))::rest671) => let val 
result=MlyValue.decitempl((Open(longstrids_spaced)))
 in (LrTable.NT 39,(result,OPEN1left,longstrids_spaced1right),rest671)
 end
| (114,(_,(MlyValue.vids_spaced vids_spaced,_,vids_spaced1right))::(_,
(_,INFIX1left,_))::rest671) => let val result=MlyValue.decitempl((
Infix(0,(vids_spaced))))
 in (LrTable.NT 39,(result,INFIX1left,vids_spaced1right),rest671) end
| (115,(_,(MlyValue.vids_spaced vids_spaced,_,vids_spaced1right))::(_,
(MlyValue.infix_digit infix_digit,_,_))::(_,(_,INFIXleft as INFIX1left
,INFIXright))::rest671) => let val result=MlyValue.decitempl((
Infix(infix_check2(INFIXleft,INFIXright,infix_digit),
                           (vids_spaced))
))
 in (LrTable.NT 39,(result,INFIX1left,vids_spaced1right),rest671) end
| (116,(_,(MlyValue.vids_spaced vids_spaced,_,vids_spaced1right))::(_,
(_,INFIXR1left,_))::rest671) => let val result=MlyValue.decitempl((
Infixr(0,(vids_spaced))))
 in (LrTable.NT 39,(result,INFIXR1left,vids_spaced1right),rest671) end
| (117,(_,(MlyValue.vids_spaced vids_spaced,_,vids_spaced1right))::(_,
(MlyValue.infix_digit infix_digit,_,_))::(_,(_,INFIXRleft as 
INFIXR1left,INFIXRright))::rest671) => let val result=
MlyValue.decitempl((
Infixr(infix_check2(INFIXRleft,INFIXRright,
                           infix_digit),(vids_spaced))
))
 in (LrTable.NT 39,(result,INFIXR1left,vids_spaced1right),rest671) end
| (118,(_,(MlyValue.vids_spaced vids_spaced,_,vids_spaced1right))::(_,
(_,NONFIX1left,_))::rest671) => let val result=MlyValue.decitempl((
Nonfix(vids_spaced)))
 in (LrTable.NT 39,(result,NONFIX1left,vids_spaced1right),rest671) end
| (119,(_,(MlyValue.oplongvids_and oplongvids_and,_,
oplongvids_and1right))::_::(_,(MlyValue.ty ty,_,_))::_::(_,(
MlyValue.vid vid,_,_))::(_,(_,OVERLOAD1left,_))::rest671) => let val 
result=MlyValue.decitempl((Overload((vid),(ty),(oplongvids_and))))
 in (LrTable.NT 39,(result,OVERLOAD1left,oplongvids_and1right),rest671
) end
| (120,(_,(MlyValue.decitempl decitempl,decitempl1left,decitempl1right
))::rest671) => let val result=MlyValue.decitemp(((decitempl)))
 in (LrTable.NT 40,(result,decitempl1left,decitempl1right),rest671)
 end
| (121,(_,(_,_,extrarparen1right))::(_,(MlyValue.decitempl decitempl,
decitempl1left,_))::rest671) => let val result=MlyValue.decitemp((
(decitempl)))
 in (LrTable.NT 40,(result,decitempl1left,extrarparen1right),rest671)
 end
| (122,(_,(_,_,END1right))::(_,(MlyValue.dec dec2,_,_))::_::(_,(
MlyValue.dec dec1,_,_))::(_,(_,LOCAL1left,_))::rest671) => let val 
result=MlyValue.decitemp((Local((dec1),(dec2))))
 in (LrTable.NT 40,(result,LOCAL1left,END1right),rest671) end
| (123,(_,(MlyValue.decitemp decitemp,decitempleft as decitemp1left,
decitempright as decitemp1right))::rest671) => let val result=
MlyValue.decitem((
{left=decitempleft,right=decitempright},
                         (decitemp)
))
 in (LrTable.NT 41,(result,decitemp1left,decitemp1right),rest671) end
| (124,rest671) => let val result=MlyValue.dec(([]))
 in (LrTable.NT 42,(result,defaultPos,defaultPos),rest671) end
| (125,(_,(MlyValue.dec dec,_,dec1right))::(_,(_,SEMICOLON1left,_))::
rest671) => let val result=MlyValue.dec((dec))
 in (LrTable.NT 42,(result,SEMICOLON1left,dec1right),rest671) end
| (126,(_,(MlyValue.dec dec,_,dec1right))::(_,(MlyValue.decitem 
decitem,decitem1left,_))::rest671) => let val result=MlyValue.dec((
(decitem)::(dec)))
 in (LrTable.NT 42,(result,decitem1left,dec1right),rest671) end
| (127,(_,(MlyValue.exp exp,_,exp1right))::_::(_,(MlyValue.pat pat,
pat1left,_))::rest671) => let val result=MlyValue.valbinditem((
((pat),(exp))))
 in (LrTable.NT 44,(result,pat1left,exp1right),rest671) end
| (128,(_,(MlyValue.valbinditem valbinditem,valbinditem1left,
valbinditem1right))::rest671) => let val result=MlyValue.valbind((
[(valbinditem)]))
 in (LrTable.NT 43,(result,valbinditem1left,valbinditem1right),rest671
) end
| (129,(_,(MlyValue.valbind valbind,_,valbind1right))::_::(_,(
MlyValue.valbinditem valbinditem,valbinditem1left,_))::rest671) => 
let val result=MlyValue.valbind(((valbinditem)::(valbind)))
 in (LrTable.NT 43,(result,valbinditem1left,valbind1right),rest671)
 end
| (130,(_,(MlyValue.fvalbinditem fvalbinditem,fvalbinditem1left,
fvalbinditem1right))::rest671) => let val result=MlyValue.fvalbind((
[(fvalbinditem)]))
 in (LrTable.NT 45,(result,fvalbinditem1left,fvalbinditem1right),
rest671) end
| (131,(_,(MlyValue.fvalbind fvalbind,_,fvalbind1right))::_::(_,(
MlyValue.fvalbinditem fvalbinditem,fvalbinditem1left,_))::rest671) => 
let val result=MlyValue.fvalbind(((fvalbinditem)::(fvalbind)))
 in (LrTable.NT 45,(result,fvalbinditem1left,fvalbind1right),rest671)
 end
| (132,(_,(MlyValue.fvalbinditemitem fvalbinditemitem,
fvalbinditemitem1left,fvalbinditemitem1right))::rest671) => let val 
result=MlyValue.fvalbinditem(([(fvalbinditemitem)]))
 in (LrTable.NT 46,(result,fvalbinditemitem1left,
fvalbinditemitem1right),rest671) end
| (133,(_,(MlyValue.fvalbinditem fvalbinditem,_,fvalbinditem1right))::
_::(_,(MlyValue.fvalbinditemitem fvalbinditemitem,
fvalbinditemitem1left,_))::rest671) => let val result=
MlyValue.fvalbinditem(((fvalbinditemitem)::(fvalbinditem)))
 in (LrTable.NT 46,(result,fvalbinditemitem1left,fvalbinditem1right),
rest671) end
| (134,(_,(MlyValue.exp exp,_,expright as exp1right))::_::(_,(
MlyValue.atpats_spaced atpats_spaced,atpats_spacedleft as 
atpats_spaced1left,_))::rest671) => let val result=
MlyValue.fvalbinditemitem((
{left=atpats_spacedleft,right=expright},
                         (atpats_spaced),(exp),NONE
))
 in (LrTable.NT 47,(result,atpats_spaced1left,exp1right),rest671) end
| (135,(_,(MlyValue.exp exp,_,expright as exp1right))::_::(_,(
MlyValue.ty ty,_,_))::_::(_,(MlyValue.atpats_spaced atpats_spaced,
atpats_spacedleft as atpats_spaced1left,_))::rest671) => let val 
result=MlyValue.fvalbinditemitem((
{left=atpats_spacedleft,right=expright},
                         (atpats_spaced),(exp),SOME ty
))
 in (LrTable.NT 47,(result,atpats_spaced1left,exp1right),rest671) end
| (136,(_,(MlyValue.typbinditem typbinditem,typbinditem1left,
typbinditem1right))::rest671) => let val result=MlyValue.typbind((
[(typbinditem)]))
 in (LrTable.NT 49,(result,typbinditem1left,typbinditem1right),rest671
) end
| (137,(_,(MlyValue.typbind typbind,_,typbind1right))::_::(_,(
MlyValue.typbinditem typbinditem,typbinditem1left,_))::rest671) => 
let val result=MlyValue.typbind(((typbinditem)::(typbind)))
 in (LrTable.NT 49,(result,typbinditem1left,typbind1right),rest671)
 end
| (138,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.tycon tycon,_,
_))::(_,(MlyValue.tyvarseq tyvarseq,tyvarseq1left,_))::rest671) => 
let val result=MlyValue.typbinditem((((tyvarseq),(tycon),(ty))))
 in (LrTable.NT 48,(result,tyvarseq1left,ty1right),rest671) end
| (139,(_,(MlyValue.datbinditem datbinditem,datbinditem1left,
datbinditem1right))::rest671) => let val result=MlyValue.datbind((
[(datbinditem)]))
 in (LrTable.NT 50,(result,datbinditem1left,datbinditem1right),rest671
) end
| (140,(_,(MlyValue.datbind datbind,_,datbind1right))::_::(_,(
MlyValue.datbinditem datbinditem,datbinditem1left,_))::rest671) => 
let val result=MlyValue.datbind(((datbinditem)::(datbind)))
 in (LrTable.NT 50,(result,datbinditem1left,datbind1right),rest671)
 end
| (141,(_,(MlyValue.conbind conbind,_,conbind1right))::_::(_,(
MlyValue.tycon tycon,_,_))::(_,(MlyValue.tyvar1seq tyvar1seq,
tyvar1seq1left,_))::rest671) => let val result=MlyValue.datbinditem((
(tyvar1seq),(tycon),(conbind)))
 in (LrTable.NT 51,(result,tyvar1seq1left,conbind1right),rest671) end
| (142,(_,(MlyValue.conbind conbind,_,conbind1right))::_::(_,(
MlyValue.tycon tycon,tycon1left,_))::rest671) => let val result=
MlyValue.datbinditem(([],(tycon),(conbind)))
 in (LrTable.NT 51,(result,tycon1left,conbind1right),rest671) end
| (143,(_,(MlyValue.conbinditem conbinditem,conbinditem1left,
conbinditem1right))::rest671) => let val result=MlyValue.conbind((
[(conbinditem)]))
 in (LrTable.NT 52,(result,conbinditem1left,conbinditem1right),rest671
) end
| (144,(_,(MlyValue.conbind conbind,_,conbind1right))::_::(_,(
MlyValue.conbinditem conbinditem,conbinditem1left,_))::rest671) => 
let val result=MlyValue.conbind(((conbinditem)::(conbind)))
 in (LrTable.NT 52,(result,conbinditem1left,conbind1right),rest671)
 end
| (145,(_,(MlyValue.opvidpat opvidpat,opvidpat1left,opvidpat1right))::
rest671) => let val result=MlyValue.conbinditem(((opvidpat),NONE))
 in (LrTable.NT 53,(result,opvidpat1left,opvidpat1right),rest671) end
| (146,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.opvidpat 
opvidpat,opvidpat1left,_))::rest671) => let val result=
MlyValue.conbinditem(((opvidpat),SOME (ty)))
 in (LrTable.NT 53,(result,opvidpat1left,ty1right),rest671) end
| (147,(_,(MlyValue.exbinditem exbinditem,exbinditem1left,
exbinditem1right))::rest671) => let val result=MlyValue.exbind((
[(exbinditem)]))
 in (LrTable.NT 54,(result,exbinditem1left,exbinditem1right),rest671)
 end
| (148,(_,(MlyValue.exbind exbind,_,exbind1right))::_::(_,(
MlyValue.exbinditem exbinditem,exbinditem1left,_))::rest671) => let 
val result=MlyValue.exbind(((exbinditem)::(exbind)))
 in (LrTable.NT 54,(result,exbinditem1left,exbind1right),rest671) end
| (149,(_,(MlyValue.opvid opvid,opvid1left,opvid1right))::rest671) => 
let val result=MlyValue.exbinditem(((opvid),ExDesc(NONE)))
 in (LrTable.NT 55,(result,opvid1left,opvid1right),rest671) end
| (150,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.opvid opvid,
opvid1left,_))::rest671) => let val result=MlyValue.exbinditem((
(opvid),ExDesc(SOME ty)))
 in (LrTable.NT 55,(result,opvid1left,ty1right),rest671) end
| (151,(_,(MlyValue.oplongvid oplongvid,_,oplongvid1right))::_::(_,(
MlyValue.opvid opvid,opvid1left,_))::rest671) => let val result=
MlyValue.exbinditem(((opvid),ExBind(oplongvid)))
 in (LrTable.NT 55,(result,opvid1left,oplongvid1right),rest671) end
| (152,(_,(MlyValue.longstrid longstrid,longstrid1left,longstrid1right
))::rest671) => let val result=MlyValue.longstrids_spaced((
[(longstrid)]))
 in (LrTable.NT 18,(result,longstrid1left,longstrid1right),rest671)
 end
| (153,(_,(MlyValue.longstrids_spaced longstrids_spaced,_,
longstrids_spaced1right))::(_,(MlyValue.longstrid longstrid,
longstrid1left,_))::rest671) => let val result=
MlyValue.longstrids_spaced(((longstrid)::(longstrids_spaced)))
 in (LrTable.NT 18,(result,longstrid1left,longstrids_spaced1right),
rest671) end
| (154,(_,(MlyValue.vid vid,vid1left,vid1right))::rest671) => let val 
result=MlyValue.vids_spaced(([(vid)]))
 in (LrTable.NT 9,(result,vid1left,vid1right),rest671) end
| (155,(_,(MlyValue.vids_spaced vids_spaced,_,vids_spaced1right))::(_,
(MlyValue.vid vid,vid1left,_))::rest671) => let val result=
MlyValue.vids_spaced(((vid)::(vids_spaced)))
 in (LrTable.NT 9,(result,vid1left,vids_spaced1right),rest671) end
| (156,(_,(MlyValue.INTLAB INTLAB,INTLABleft as INTLAB1left,
INTLABright as INTLAB1right))::rest671) => let val result=
MlyValue.infix_digit((infix_check(INTLABleft,INTLABright,(INTLAB))))
 in (LrTable.NT 56,(result,INTLAB1left,INTLAB1right),rest671) end
| (157,(_,(MlyValue.SCON SCON,SCONleft as SCON1left,SCONright as 
SCON1right))::rest671) => let val result=MlyValue.infix_digit((
case (SCON) of
                           SCon.NumCon(IntConvFlags.Decimal,
                              IntConvFlags.Signed false,s) =>
                              infix_check(SCONleft,SCONright,s)
                        |  _ => (~1)
                        
))
 in (LrTable.NT 56,(result,SCON1left,SCON1right),rest671) end
| (158,(_,(MlyValue.atpat atpat,atpat1left,atpat1right))::rest671) => 
let val result=MlyValue.atpats_spaced(([atpat]))
 in (LrTable.NT 62,(result,atpat1left,atpat1right),rest671) end
| (159,(_,(MlyValue.atpats_spaced atpats_spaced,_,atpats_spaced1right)
)::(_,(MlyValue.atpat atpat,atpat1left,_))::rest671) => let val result
=MlyValue.atpats_spaced(((atpat)::(atpats_spaced)))
 in (LrTable.NT 62,(result,atpat1left,atpats_spaced1right),rest671)
 end
| (160,(_,(MlyValue.atpatwild atpatwild,atpatwild1left,atpatwild1right
))::rest671) => let val result=MlyValue.atpats_spaced((
(#1 atpatwild)::(#2 atpatwild)::[]))
 in (LrTable.NT 62,(result,atpatwild1left,atpatwild1right),rest671)
 end
| (161,(_,(MlyValue.atpats_spaced atpats_spaced,_,atpats_spaced1right)
)::(_,(MlyValue.atpatwild atpatwild,atpatwild1left,_))::rest671) => 
let val result=MlyValue.atpats_spaced((
(#1 atpatwild)::(#2 atpatwild)::atpats_spaced))
 in (LrTable.NT 62,(result,atpatwild1left,atpats_spaced1right),rest671
) end
| (162,(_,(MlyValue.TYVAR TYVAR,TYVAR1left,TYVAR1right))::rest671) => 
let val result=MlyValue.tyvar1seq(([(TYVAR)]))
 in (LrTable.NT 58,(result,TYVAR1left,TYVAR1right),rest671) end
| (163,(_,(_,_,RPAREN1right))::(_,(MlyValue.tyvarrow tyvarrow,_,_))::(
_,(_,LPAREN1left,_))::rest671) => let val result=MlyValue.tyvar1seq((
(tyvarrow)))
 in (LrTable.NT 58,(result,LPAREN1left,RPAREN1right),rest671) end
| (164,rest671) => let val result=MlyValue.tyvarseq(([]))
 in (LrTable.NT 57,(result,defaultPos,defaultPos),rest671) end
| (165,(_,(MlyValue.TYVAR TYVAR,TYVAR1left,TYVAR1right))::rest671) => 
let val result=MlyValue.tyvarseq(([(TYVAR)]))
 in (LrTable.NT 57,(result,TYVAR1left,TYVAR1right),rest671) end
| (166,(_,(_,_,RPAREN1right))::(_,(MlyValue.tyvarrow tyvarrow,_,_))::(
_,(_,LPAREN1left,_))::rest671) => let val result=MlyValue.tyvarseq((
(tyvarrow)))
 in (LrTable.NT 57,(result,LPAREN1left,RPAREN1right),rest671) end
| (167,(_,(MlyValue.TYVAR TYVAR,TYVAR1left,TYVAR1right))::rest671) => 
let val result=MlyValue.tyvarrow(([(TYVAR)]))
 in (LrTable.NT 60,(result,TYVAR1left,TYVAR1right),rest671) end
| (168,(_,(MlyValue.tyvarrow tyvarrow,_,tyvarrow1right))::_::(_,(
MlyValue.TYVAR TYVAR,TYVAR1left,_))::rest671) => let val result=
MlyValue.tyvarrow(((TYVAR)::(tyvarrow)))
 in (LrTable.NT 60,(result,TYVAR1left,tyvarrow1right),rest671) end
| (169,(_,(_,WILD1left,WILD1right))::rest671) => let val result=
MlyValue.atpatp((PatWild))
 in (LrTable.NT 65,(result,WILD1left,WILD1right),rest671) end
| (170,(_,(MlyValue.scon scon,scon1left,scon1right))::rest671) => let 
val result=MlyValue.atpatp((PatSCon(scon)))
 in (LrTable.NT 65,(result,scon1left,scon1right),rest671) end
| (171,(_,(MlyValue.oplongvidpat oplongvidpat,oplongvidpat1left,
oplongvidpat1right))::rest671) => let val result=MlyValue.atpatp((
PatVar(oplongvidpat)))
 in (LrTable.NT 65,(result,oplongvidpat1left,oplongvidpat1right),
rest671) end
| (172,(_,(_,_,RBRACE1right))::(_,(MlyValue.patrow patrow,_,_))::(_,(_
,LBRACE1left,_))::rest671) => let val result=MlyValue.atpatp((
PatRecord(patrow)))
 in (LrTable.NT 65,(result,LBRACE1left,RBRACE1right),rest671) end
| (173,(_,(_,_,RPAREN1right))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.atpatp((PatTuple []))
 in (LrTable.NT 65,(result,LPAREN1left,RPAREN1right),rest671) end
| (174,(_,(_,_,RPAREN1right))::(_,(MlyValue.commapatseq commapatseq,_,
_))::(_,(MlyValue.pat pat2,_,_))::_::(_,(MlyValue.pat pat1,_,_))::(_,(
_,LPAREN1left,_))::rest671) => let val result=MlyValue.atpatp((
PatTuple((pat1)::(pat2)::(commapatseq))))
 in (LrTable.NT 65,(result,LPAREN1left,RPAREN1right),rest671) end
| (175,(_,(_,_,RBRACKET1right))::(_,(_,LBRACKET1left,_))::rest671) => 
let val result=MlyValue.atpatp((PatList []))
 in (LrTable.NT 65,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (176,(_,(_,_,RBRACKET1right))::(_,(MlyValue.commapatseq commapatseq,
_,_))::(_,(MlyValue.pat pat,_,_))::(_,(_,LBRACKET1left,_))::rest671)
 => let val result=MlyValue.atpatp((PatList((pat)::(commapatseq))))
 in (LrTable.NT 65,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (177,(_,(_,_,RPAREN1right))::(_,(MlyValue.pat pat,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.atpatp((
PatParen(pat)))
 in (LrTable.NT 65,(result,LPAREN1left,RPAREN1right),rest671) end
| (178,(_,(_,NEW1left,NEW1right))::rest671) => let val result=
MlyValue.atpatwildp((NewS))
 in (LrTable.NT 63,(result,NEW1left,NEW1right),rest671) end
| (179,(_,(_,CAST1left,CAST1right))::rest671) => let val result=
MlyValue.atpatwildp((CastS))
 in (LrTable.NT 63,(result,CAST1left,CAST1right),rest671) end
| (180,(_,(_,THIS1left,THIS1right))::rest671) => let val result=
MlyValue.atpatwildp((ThisS))
 in (LrTable.NT 63,(result,THIS1left,THIS1right),rest671) end
| (181,(_,(_,FIELD1left,FIELD1right))::rest671) => let val result=
MlyValue.atpatwildp((FieldS))
 in (LrTable.NT 63,(result,FIELD1left,FIELD1right),rest671) end
| (182,(_,(_,FINAL1left,FINAL1right))::rest671) => let val result=
MlyValue.atpatwildp((FinalS))
 in (LrTable.NT 63,(result,FINAL1left,FINAL1right),rest671) end
| (183,(_,(_,SUPER1left,SUPER1right))::rest671) => let val result=
MlyValue.atpatwildp((SuperS))
 in (LrTable.NT 63,(result,SUPER1left,SUPER1right),rest671) end
| (184,(_,(_,INVOKE1left,INVOKE1right))::rest671) => let val result=
MlyValue.atpatwildp((InvokeS))
 in (LrTable.NT 63,(result,INVOKE1left,INVOKE1right),rest671) end
| (185,(_,(_,METHOD1left,METHOD1right))::rest671) => let val result=
MlyValue.atpatwildp((MethodS))
 in (LrTable.NT 63,(result,METHOD1left,METHOD1right),rest671) end
| (186,(_,(_,PUBLIC1left,PUBLIC1right))::rest671) => let val result=
MlyValue.atpatwildp((PublicS))
 in (LrTable.NT 63,(result,PUBLIC1left,PUBLIC1right),rest671) end
| (187,(_,(_,STATIC1left,STATIC1right))::rest671) => let val result=
MlyValue.atpatwildp((StaticS))
 in (LrTable.NT 63,(result,STATIC1left,STATIC1right),rest671) end
| (188,(_,(_,EXTENDS1left,EXTENDS1right))::rest671) => let val result=
MlyValue.atpatwildp((ExtendsS))
 in (LrTable.NT 63,(result,EXTENDS1left,EXTENDS1right),rest671) end
| (189,(_,(_,PRIVATE1left,PRIVATE1right))::rest671) => let val result=
MlyValue.atpatwildp((PrivateS))
 in (LrTable.NT 63,(result,PRIVATE1left,PRIVATE1right),rest671) end
| (190,(_,(_,ABSTRACT1left,ABSTRACT1right))::rest671) => let val 
result=MlyValue.atpatwildp((AbstractS))
 in (LrTable.NT 63,(result,ABSTRACT1left,ABSTRACT1right),rest671) end
| (191,(_,(_,GETFIELD1left,GETFIELD1right))::rest671) => let val 
result=MlyValue.atpatwildp((GetfieldS))
 in (LrTable.NT 63,(result,GETFIELD1left,GETFIELD1right),rest671) end
| (192,(_,(_,PUTFIELD1left,PUTFIELD1right))::rest671) => let val 
result=MlyValue.atpatwildp((PutfieldS))
 in (LrTable.NT 63,(result,PUTFIELD1left,PUTFIELD1right),rest671) end
| (193,(_,(_,VOLATILE1left,VOLATILE1right))::rest671) => let val 
result=MlyValue.atpatwildp((VolatileS))
 in (LrTable.NT 63,(result,VOLATILE1left,VOLATILE1right),rest671) end
| (194,(_,(_,CLASSTYPE1left,CLASSTYPE1right))::rest671) => let val 
result=MlyValue.atpatwildp((ClasstypeS))
 in (LrTable.NT 63,(result,CLASSTYPE1left,CLASSTYPE1right),rest671)
 end
| (195,(_,(_,PROTECTED1left,PROTECTED1right))::rest671) => let val 
result=MlyValue.atpatwildp((ProtectedS))
 in (LrTable.NT 63,(result,PROTECTED1left,PROTECTED1right),rest671)
 end
| (196,(_,(_,TRANSIENT1left,TRANSIENT1right))::rest671) => let val 
result=MlyValue.atpatwildp((TransientS))
 in (LrTable.NT 63,(result,TRANSIENT1left,TRANSIENT1right),rest671)
 end
| (197,(_,(_,IMPLEMENTS1left,IMPLEMENTS1right))::rest671) => let val 
result=MlyValue.atpatwildp((ImplementsS))
 in (LrTable.NT 63,(result,IMPLEMENTS1left,IMPLEMENTS1right),rest671)
 end
| (198,(_,(_,INSTANCEOF1left,INSTANCEOF1right))::rest671) => let val 
result=MlyValue.atpatwildp((InstanceofS))
 in (LrTable.NT 63,(result,INSTANCEOF1left,INSTANCEOF1right),rest671)
 end
| (199,(_,(_,CONSTRUCTOR1left,CONSTRUCTOR1right))::rest671) => let 
val result=MlyValue.atpatwildp((ConstructorS))
 in (LrTable.NT 63,(result,CONSTRUCTOR1left,CONSTRUCTOR1right),rest671
) end
| (200,(_,(_,SYNCHRONIZED1left,SYNCHRONIZED1right))::rest671) => let 
val result=MlyValue.atpatwildp((SynchronizedS))
 in (LrTable.NT 63,(result,SYNCHRONIZED1left,SYNCHRONIZED1right),
rest671) end
| (201,(_,(_,INTERFACETYPE1left,INTERFACETYPE1right))::rest671) => 
let val result=MlyValue.atpatwildp((InterfacetypeS))
 in (LrTable.NT 63,(result,INTERFACETYPE1left,INTERFACETYPE1right),
rest671) end
| (202,(_,(MlyValue.atpatwildp atpatwildp,atpatwildpleft as 
atpatwildp1left,atpatwildpright as atpatwildp1right))::rest671) => 
let val result=MlyValue.atpatwild((
(({left=atpatwildpleft,right=atpatwildpleft+1}),
                           PatWild),
                         ({left=atpatwildpleft+1,right=atpatwildpright},
                           PatVar(Short(atpatwildp)))
))
 in (LrTable.NT 64,(result,atpatwildp1left,atpatwildp1right),rest671)
 end
| (203,(_,(MlyValue.atpatp atpatp,atpatpleft as atpatp1left,
atpatpright as atpatp1right))::rest671) => let val result=
MlyValue.atpat((({left=atpatpleft,right=atpatpright},(atpatp))))
 in (LrTable.NT 61,(result,atpatp1left,atpatp1right),rest671) end
| (204,(_,(MlyValue.atpatp atpatp,atpatp1left,atpatp1right))::rest671)
 => let val result=MlyValue.atpat2p((atpatp))
 in (LrTable.NT 66,(result,atpatp1left,atpatp1right),rest671) end
| (205,(_,(MlyValue.atpats_spaced atpats_spaced,_,atpats_spaced1right)
)::(_,(MlyValue.atpatp atpatp,atpatpleft as atpatp1left,atpatpright))
::rest671) => let val result=MlyValue.atpat2p((
FlatPat(({left=atpatpleft,right=atpatpright},
                           (atpatp))::(atpats_spaced))
))
 in (LrTable.NT 66,(result,atpatp1left,atpats_spaced1right),rest671)
 end
| (206,(_,(MlyValue.atpatwild atpatwild,atpatwild1left,atpatwild1right
))::rest671) => let val result=MlyValue.atpat2p((
FlatPat((#1 atpatwild)::(#2 atpatwild)::[])))
 in (LrTable.NT 66,(result,atpatwild1left,atpatwild1right),rest671)
 end
| (207,(_,(MlyValue.atpats_spaced atpats_spaced,_,atpats_spaced1right)
)::(_,(MlyValue.atpatwild atpatwild,atpatwild1left,_))::rest671) => 
let val result=MlyValue.atpat2p((
FlatPat((#1 atpatwild)::(#2 atpatwild)::
                           atpats_spaced)
))
 in (LrTable.NT 66,(result,atpatwild1left,atpats_spaced1right),rest671
) end
| (208,(_,(MlyValue.atpat2p atpat2p,atpat2p1left,atpat2p1right))::
rest671) => let val result=MlyValue.atpat3p((atpat2p))
 in (LrTable.NT 67,(result,atpat2p1left,atpat2p1right),rest671) end
| (209,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.atpat2p 
atpat2p,atpat2pleft as atpat2p1left,atpat2pright))::rest671) => let 
val result=MlyValue.atpat3p((
PatConstraint(({left=atpat2pleft,right=atpat2pright},
                           (atpat2p)),(ty))
))
 in (LrTable.NT 67,(result,atpat2p1left,ty1right),rest671) end
| (210,(_,(MlyValue.atpat3 atpat3,_,atpat31right))::(_,(_,ASleft,
ASright))::(_,(MlyValue.atpat2p atpat2p,atpat2p1left,_))::rest671) => 
let val result=MlyValue.atpat3p((
layerpat(atpat2p,NONE,atpat3,ASleft,ASright)))
 in (LrTable.NT 67,(result,atpat2p1left,atpat31right),rest671) end
| (211,(_,(MlyValue.atpat3 atpat3,_,atpat31right))::(_,(_,ASleft,
ASright))::(_,(MlyValue.ty ty,_,_))::_::(_,(MlyValue.atpat2p atpat2p,
atpat2p1left,_))::rest671) => let val result=MlyValue.atpat3p((
layerpat(atpat2p,SOME ty,atpat3,ASleft,ASright)))
 in (LrTable.NT 67,(result,atpat2p1left,atpat31right),rest671) end
| (212,(_,(MlyValue.atpat3p atpat3p,atpat3pleft as atpat3p1left,
atpat3pright as atpat3p1right))::rest671) => let val result=
MlyValue.atpat3((({left=atpat3pleft,right=atpat3pright},(atpat3p))))
 in (LrTable.NT 68,(result,atpat3p1left,atpat3p1right),rest671) end
| (213,(_,(MlyValue.atpat3p atpat3p,atpat3p1left,atpat3p1right))::
rest671) => let val result=MlyValue.patp(((atpat3p)))
 in (LrTable.NT 70,(result,atpat3p1left,atpat3p1right),rest671) end
| (214,(_,(MlyValue.atpat3bar atpat3bar,_,atpat3bar1right))::_::(_,(
MlyValue.atpat3p atpat3p,atpat3pleft as atpat3p1left,atpat3pright))::
rest671) => let val result=MlyValue.patp((
OrPat(({left=atpat3pleft,right=atpat3pright},
                           (atpat3p))::(atpat3bar))
))
 in (LrTable.NT 70,(result,atpat3p1left,atpat3bar1right),rest671) end
| (215,(_,(MlyValue.atpat3 atpat3,atpat31left,atpat31right))::rest671)
 => let val result=MlyValue.atpat3bar(([(atpat3)]))
 in (LrTable.NT 69,(result,atpat31left,atpat31right),rest671) end
| (216,(_,(MlyValue.atpat3bar atpat3bar,_,atpat3bar1right))::_::(_,(
MlyValue.atpat3 atpat3,atpat31left,_))::rest671) => let val result=
MlyValue.atpat3bar(((atpat3)::(atpat3bar)))
 in (LrTable.NT 69,(result,atpat31left,atpat3bar1right),rest671) end
| (217,(_,(MlyValue.patp patp,patpleft as patp1left,patpright as 
patp1right))::rest671) => let val result=MlyValue.pat((
({left=patpleft,right=patpright},(patp))))
 in (LrTable.NT 71,(result,patp1left,patp1right),rest671) end
| (218,rest671) => let val result=MlyValue.commapatseq(([]))
 in (LrTable.NT 75,(result,defaultPos,defaultPos),rest671) end
| (219,(_,(MlyValue.commapatseq commapatseq,_,commapatseq1right))::(_,
(MlyValue.pat pat,_,_))::(_,(_,COMMA1left,_))::rest671) => let val 
result=MlyValue.commapatseq(((pat)::(commapatseq)))
 in (LrTable.NT 75,(result,COMMA1left,commapatseq1right),rest671) end
| (220,rest671) => let val result=MlyValue.patrow(((false,[])))
 in (LrTable.NT 72,(result,defaultPos,defaultPos),rest671) end
| (221,(_,(_,DOTS1left,DOTS1right))::rest671) => let val result=
MlyValue.patrow(((true,[])))
 in (LrTable.NT 72,(result,DOTS1left,DOTS1right),rest671) end
| (222,(_,(MlyValue.patrowitem patrowitem,patrowitem1left,
patrowitem1right))::rest671) => let val result=MlyValue.patrow((
(false,[patrowitem])))
 in (LrTable.NT 72,(result,patrowitem1left,patrowitem1right),rest671)
 end
| (223,(_,(MlyValue.patrow patrow,_,patrow1right))::_::(_,(
MlyValue.patrowitem patrowitem,patrowitem1left,_))::rest671) => let 
val result=MlyValue.patrow(((#1 (patrow),(patrowitem)::(#2(patrow)))))
 in (LrTable.NT 72,(result,patrowitem1left,patrow1right),rest671) end
| (224,(_,(MlyValue.pat pat,_,pat1right))::_::(_,(MlyValue.lab lab,
lab1left,_))::rest671) => let val result=MlyValue.patrowitem((
((lab),(pat))))
 in (LrTable.NT 73,(result,lab1left,pat1right),rest671) end
| (225,(_,(MlyValue.patrowitemp patrowitemp,patrowitempleft as 
patrowitemp1left,patrowitempright as patrowitemp1right))::rest671) => 
let val result=MlyValue.patrowitem((
(#1(patrowitemp),
                          ({left=patrowitempleft,right=patrowitempright},
                           #2(patrowitemp)))
))
 in (LrTable.NT 73,(result,patrowitemp1left,patrowitemp1right),rest671
) end
| (226,(_,(MlyValue.vid vid,vid1left,vid1right))::rest671) => let val 
result=MlyValue.patrowitemp((((vid),PatVar(Short vid))))
 in (LrTable.NT 74,(result,vid1left,vid1right),rest671) end
| (227,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.vid vid,
vidleft as vid1left,vidright))::rest671) => let val result=
MlyValue.patrowitemp((
((vid),PatConstraint(
                           ({left=vidleft,right=vidright},PatVar(Short vid))
                           ,(ty)))
))
 in (LrTable.NT 74,(result,vid1left,ty1right),rest671) end
| (228,(_,(MlyValue.pat pat,_,pat1right))::_::(_,(MlyValue.vid vid,
vid1left,_))::rest671) => let val result=MlyValue.patrowitemp((
((vid),PatLayer((false,vid),NONE,(pat)))))
 in (LrTable.NT 74,(result,vid1left,pat1right),rest671) end
| (229,(_,(MlyValue.pat pat,_,pat1right))::_::(_,(MlyValue.ty ty,_,_))
::_::(_,(MlyValue.vid vid,vid1left,_))::rest671) => let val result=
MlyValue.patrowitemp((((vid),PatLayer((false,vid),SOME(ty),(pat)))))
 in (LrTable.NT 74,(result,vid1left,pat1right),rest671) end
| (230,(_,(MlyValue.javalongid javalongid,javalongid1left,
javalongid1right))::rest671) => let val result=MlyValue.attyp((
TyClass(javalongid)))
 in (LrTable.NT 78,(result,javalongid1left,javalongid1right),rest671)
 end
| (231,(_,(MlyValue.TYVAR TYVAR,TYVAR1left,TYVAR1right))::rest671) => 
let val result=MlyValue.attyp((TyVar(TYVAR)))
 in (LrTable.NT 78,(result,TYVAR1left,TYVAR1right),rest671) end
| (232,(_,(_,_,RBRACE1right))::(_,(MlyValue.tyrow tyrow,_,_))::(_,(_,
LBRACE1left,_))::rest671) => let val result=MlyValue.attyp((
TyRecord(tyrow)))
 in (LrTable.NT 78,(result,LBRACE1left,RBRACE1right),rest671) end
| (233,(_,(_,_,RBRACE1right))::(_,(_,LBRACE1left,_))::rest671) => let 
val result=MlyValue.attyp((TyRecord[]))
 in (LrTable.NT 78,(result,LBRACE1left,RBRACE1right),rest671) end
| (234,(_,(MlyValue.longtycon longtycon,longtycon1left,longtycon1right
))::rest671) => let val result=MlyValue.attyp((TyCon([],(longtycon))))
 in (LrTable.NT 78,(result,longtycon1left,longtycon1right),rest671)
 end
| (235,(_,(MlyValue.attyp attyp,attypleft as attyp1left,attypright as 
attyp1right))::rest671) => let val result=MlyValue.atty((
({left=attypleft,right=attypright},(attyp))))
 in (LrTable.NT 77,(result,attyp1left,attyp1right),rest671) end
| (236,(_,(_,_,RPAREN1right))::(_,(MlyValue.ty ty,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.atty((ty))
 in (LrTable.NT 77,(result,LPAREN1left,RPAREN1right),rest671) end
| (237,(_,(MlyValue.atty atty,atty1left,atty1right))::rest671) => let 
val result=MlyValue.attyc((atty))
 in (LrTable.NT 79,(result,atty1left,atty1right),rest671) end
| (238,(_,(MlyValue.longtycon longtycon,_,longtyconright as 
longtycon1right))::_::(_,(MlyValue.commatyseq commatyseq,_,_))::(_,(
MlyValue.ty ty2,_,_))::_::(_,(MlyValue.ty ty1,_,_))::(_,(_,LPARENleft
 as LPAREN1left,_))::rest671) => let val result=MlyValue.attyc((
({left=LPARENleft,right=longtyconright},
                           TyCon((ty1)::(ty2)::(commatyseq),(longtycon)))
))
 in (LrTable.NT 79,(result,LPAREN1left,longtycon1right),rest671) end
| (239,(_,(MlyValue.longtycon longtycon,_,longtyconright as 
longtycon1right))::(_,(MlyValue.attyc attyc,attycleft as attyc1left,_)
)::rest671) => let val result=MlyValue.attyc((
({left=attycleft,right=longtyconright},
                           TyCon([(attyc)],(longtycon)))
))
 in (LrTable.NT 79,(result,attyc1left,longtycon1right),rest671) end
| (240,(_,(MlyValue.attyc attyc,attyc1left,attyc1right))::rest671) => 
let val result=MlyValue.tytupl(([(attyc)]))
 in (LrTable.NT 80,(result,attyc1left,attyc1right),rest671) end
| (241,(_,(MlyValue.tytupl tytupl,_,tytupl1right))::_::(_,(
MlyValue.attyc attyc,attyc1left,_))::rest671) => let val result=
MlyValue.tytupl(((attyc)::(tytupl)))
 in (LrTable.NT 80,(result,attyc1left,tytupl1right),rest671) end
| (242,(_,(MlyValue.tytupl tytupl,tytuplleft as tytupl1left,
tytuplright as tytupl1right))::rest671) => let val result=
MlyValue.tytuple((
case (tytupl) of
                           [ty] => ty
                        |  l => ({left=tytuplleft,right=tytuplright},
                                   TyTuple((tytupl)))
                        
))
 in (LrTable.NT 81,(result,tytupl1left,tytupl1right),rest671) end
| (243,(_,(MlyValue.tytuple tytuple,tytuple1left,tytuple1right))::
rest671) => let val result=MlyValue.ty((tytuple))
 in (LrTable.NT 76,(result,tytuple1left,tytuple1right),rest671) end
| (244,(_,(MlyValue.ty ty,_,tyright as ty1right))::_::(_,(
MlyValue.tytuple tytuple,tytupleleft as tytuple1left,_))::rest671) => 
let val result=MlyValue.ty((
({left=tytupleleft,right=tyright},
                           TyFun((tytuple),(ty)))
))
 in (LrTable.NT 76,(result,tytuple1left,ty1right),rest671) end
| (245,rest671) => let val result=MlyValue.commatyseq(([]))
 in (LrTable.NT 82,(result,defaultPos,defaultPos),rest671) end
| (246,(_,(MlyValue.commatyseq commatyseq,_,commatyseq1right))::(_,(
MlyValue.ty ty,_,_))::(_,(_,COMMA1left,_))::rest671) => let val result
=MlyValue.commatyseq(((ty)::(commatyseq)))
 in (LrTable.NT 82,(result,COMMA1left,commatyseq1right),rest671) end
| (247,(_,(MlyValue.tyrowitem tyrowitem,tyrowitem1left,tyrowitem1right
))::rest671) => let val result=MlyValue.tyrow(([(tyrowitem)]))
 in (LrTable.NT 83,(result,tyrowitem1left,tyrowitem1right),rest671)
 end
| (248,(_,(MlyValue.tyrow tyrow,_,tyrow1right))::_::(_,(
MlyValue.tyrowitem tyrowitem,tyrowitem1left,_))::rest671) => let val 
result=MlyValue.tyrow(((tyrowitem)::(tyrow)))
 in (LrTable.NT 83,(result,tyrowitem1left,tyrow1right),rest671) end
| (249,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.lab lab,
lab1left,_))::rest671) => let val result=MlyValue.tyrowitem((
((lab),(ty))))
 in (LrTable.NT 84,(result,lab1left,ty1right),rest671) end
| (250,(_,(MlyValue.javalongid javalongid,javalongid1left,
javalongid1right))::rest671) => let val result=MlyValue.tyargp((
TyClass(javalongid)))
 in (LrTable.NT 86,(result,javalongid1left,javalongid1right),rest671)
 end
| (251,(_,(MlyValue.longtycon longtycon,longtycon1left,longtycon1right
))::rest671) => let val result=MlyValue.tyargp((TyCon([],(longtycon)))
)
 in (LrTable.NT 86,(result,longtycon1left,longtycon1right),rest671)
 end
| (252,(_,(MlyValue.tyargp tyargp,tyargpleft as tyargp1left,
tyargpright as tyargp1right))::rest671) => let val result=
MlyValue.tyarg((({left=tyargpleft,right=tyargpright},(tyargp))))
 in (LrTable.NT 87,(result,tyargp1left,tyargp1right),rest671) end
| (253,(_,(_,_,RPAREN1right))::(_,(MlyValue.ty ty,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.tyarg(((ty)))
 in (LrTable.NT 87,(result,LPAREN1left,RPAREN1right),rest671) end
| (254,(_,(MlyValue.atexp atexp,_,atexp1right))::(_,(MlyValue.tyarg 
tyarg,_,_))::(_,(_,CAST1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.Cast,SOME(tyarg),NONE,[(atexp)]))
 in (LrTable.NT 85,(result,CAST1left,atexp1right),rest671) end
| (255,(_,(MlyValue.simpleexp simpleexp,_,simpleexp1right))::(_,(
MlyValue.JAVAID JAVAID,_,_))::(_,(_,GETFIELD1left,_))::rest671) => 
let val result=MlyValue.javaexp((
Java.GetField,NONE,SOME(JAVAID),[(simpleexp)]))
 in (LrTable.NT 85,(result,GETFIELD1left,simpleexp1right),rest671) end
| (256,(_,(MlyValue.JAVAID JAVAID,_,JAVAID1right))::(_,(MlyValue.tyarg
 tyarg,_,_))::(_,(_,GETFIELD1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.GetField,SOME(tyarg),SOME(JAVAID),[]))
 in (LrTable.NT 85,(result,GETFIELD1left,JAVAID1right),rest671) end
| (257,(_,(MlyValue.atexp atexp,_,atexp1right))::(_,(MlyValue.tyarg 
tyarg,_,_))::(_,(_,INSTANCEOF1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.InstanceOf,SOME(tyarg),NONE,[(atexp)]))
 in (LrTable.NT 85,(result,INSTANCEOF1left,atexp1right),rest671) end
| (258,(_,(MlyValue.args args,_,args1right))::(_,(MlyValue.JAVAID 
JAVAID,_,_))::(_,(MlyValue.tyarg tyarg,_,_))::(_,(_,INVOKE1left,_))::
rest671) => let val result=MlyValue.javaexp((
Java.Invoke,SOME(tyarg),SOME(JAVAID),(args)))
 in (LrTable.NT 85,(result,INVOKE1left,args1right),rest671) end
| (259,(_,(MlyValue.args args,_,args1right))::(_,(MlyValue.JAVAID 
JAVAID,_,_))::(_,(_,INVOKE1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.Invoke,NONE,SOME(JAVAID),(args)))
 in (LrTable.NT 85,(result,INVOKE1left,args1right),rest671) end
| (260,(_,(MlyValue.args args,_,args1right))::(_,(MlyValue.tyarg tyarg
,_,_))::(_,(_,NEW1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.New,SOME(tyarg),NONE,(args)))
 in (LrTable.NT 85,(result,NEW1left,args1right),rest671) end
| (261,(_,(MlyValue.args args,_,args1right))::(_,(MlyValue.tyarg tyarg
,_,_))::(_,(_,NEWARRAY1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.NewArray,SOME(tyarg),NONE,(args)))
 in (LrTable.NT 85,(result,NEWARRAY1left,args1right),rest671) end
| (262,(_,(MlyValue.atexp atexp,_,atexp1right))::(_,(MlyValue.JAVAID 
JAVAID,_,_))::(_,(MlyValue.tyarg tyarg,_,_))::(_,(_,PUTFIELD1left,_))
::rest671) => let val result=MlyValue.javaexp((
Java.PutField,SOME(tyarg),SOME(JAVAID),[(atexp)]))
 in (LrTable.NT 85,(result,PUTFIELD1left,atexp1right),rest671) end
| (263,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp exp2,_,_))::_::(_,(
MlyValue.exp exp1,_,_))::_::(_,(MlyValue.JAVAID JAVAID,_,_))::(_,(_,
PUTFIELD1left,_))::rest671) => let val result=MlyValue.javaexp((
Java.PutField,NONE,SOME(JAVAID),[(exp1),(exp2)]))
 in (LrTable.NT 85,(result,PUTFIELD1left,RPAREN1right),rest671) end
| (264,(_,(_,SUPER1left,SUPER1right))::rest671) => let val result=
MlyValue.javaexp((Java.Super,NONE,NONE,[]))
 in (LrTable.NT 85,(result,SUPER1left,SUPER1right),rest671) end
| (265,(_,(_,THIS1left,THIS1right))::rest671) => let val result=
MlyValue.javaexp((Java.This,NONE,NONE,[]))
 in (LrTable.NT 85,(result,THIS1left,THIS1right),rest671) end
| (266,(_,(MlyValue.args args,_,args1right))::(_,(MlyValue.BYTECODE 
BYTECODE,BYTECODE1left,_))::rest671) => let val result=
MlyValue.javaexp(((BYTECODE),NONE,NONE,(args)))
 in (LrTable.NT 85,(result,BYTECODE1left,args1right),rest671) end
| (267,(_,(MlyValue.atexp atexp,_,atexp1right))::_::(_,(MlyValue.exp 
exp,_,_))::_::(_,(_,LPAREN1left,_))::rest671) => let val result=
MlyValue.javaexp((Java.Synchronize,NONE,NONE,[(exp),(atexp)]))
 in (LrTable.NT 85,(result,LPAREN1left,atexp1right),rest671) end
| (268,(_,(_,ABSTRACT1left,ABSTRACT1right))::rest671) => let val 
result=MlyValue.javaflag((JavaFlags.ABSTRACT))
 in (LrTable.NT 89,(result,ABSTRACT1left,ABSTRACT1right),rest671) end
| (269,(_,(_,FINAL1left,FINAL1right))::rest671) => let val result=
MlyValue.javaflag((JavaFlags.FINAL))
 in (LrTable.NT 89,(result,FINAL1left,FINAL1right),rest671) end
| (270,(_,(_,PRIVATE1left,PRIVATE1right))::rest671) => let val result=
MlyValue.javaflag((JavaFlags.PRIVATE))
 in (LrTable.NT 89,(result,PRIVATE1left,PRIVATE1right),rest671) end
| (271,(_,(_,PROTECTED1left,PROTECTED1right))::rest671) => let val 
result=MlyValue.javaflag((JavaFlags.PROTECTED))
 in (LrTable.NT 89,(result,PROTECTED1left,PROTECTED1right),rest671)
 end
| (272,(_,(_,PUBLIC1left,PUBLIC1right))::rest671) => let val result=
MlyValue.javaflag((JavaFlags.PUBLIC))
 in (LrTable.NT 89,(result,PUBLIC1left,PUBLIC1right),rest671) end
| (273,(_,(_,STATIC1left,STATIC1right))::rest671) => let val result=
MlyValue.javaflag((JavaFlags.STATIC))
 in (LrTable.NT 89,(result,STATIC1left,STATIC1right),rest671) end
| (274,(_,(_,SYNCHRONIZED1left,SYNCHRONIZED1right))::rest671) => let 
val result=MlyValue.javaflag((JavaFlags.SYNCHRONIZED))
 in (LrTable.NT 89,(result,SYNCHRONIZED1left,SYNCHRONIZED1right),
rest671) end
| (275,(_,(_,TRANSIENT1left,TRANSIENT1right))::rest671) => let val 
result=MlyValue.javaflag((JavaFlags.TRANSIENT))
 in (LrTable.NT 89,(result,TRANSIENT1left,TRANSIENT1right),rest671)
 end
| (276,(_,(_,VOLATILE1left,VOLATILE1right))::rest671) => let val 
result=MlyValue.javaflag((JavaFlags.VOLATILE))
 in (LrTable.NT 89,(result,VOLATILE1left,VOLATILE1right),rest671) end
| (277,rest671) => let val result=MlyValue.javaflags(([]))
 in (LrTable.NT 90,(result,defaultPos,defaultPos),rest671) end
| (278,(_,(MlyValue.javaflags javaflags,_,javaflags1right))::(_,(
MlyValue.javaflag javaflag,javaflag1left,_))::rest671) => let val 
result=MlyValue.javaflags(((javaflag)::(javaflags)))
 in (LrTable.NT 90,(result,javaflag1left,javaflags1right),rest671) end
| (279,rest671) => let val result=MlyValue.tyoption((NONE))
 in (LrTable.NT 100,(result,defaultPos,defaultPos),rest671) end
| (280,(_,(MlyValue.ty ty,_,ty1right))::(_,(_,COLON1left,_))::rest671)
 => let val result=MlyValue.tyoption((SOME(ty)))
 in (LrTable.NT 100,(result,COLON1left,ty1right),rest671) end
| (281,rest671) => let val result=MlyValue.expoption((NONE))
 in (LrTable.NT 99,(result,defaultPos,defaultPos),rest671) end
| (282,(_,(MlyValue.exp exp,_,exp1right))::(_,(_,EQUALOP1left,_))::
rest671) => let val result=MlyValue.expoption((SOME(exp)))
 in (LrTable.NT 99,(result,EQUALOP1left,exp1right),rest671) end
| (283,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.vid vid,
vid1left,_))::rest671) => let val result=MlyValue.javaarg((
(SOME(vid),(ty))))
 in (LrTable.NT 93,(result,vid1left,ty1right),rest671) end
| (284,(_,(MlyValue.ty ty,ty1left,ty1right))::rest671) => let val 
result=MlyValue.javaarg(((NONE,(ty))))
 in (LrTable.NT 93,(result,ty1left,ty1right),rest671) end
| (285,rest671) => let val result=MlyValue.javacommaarg(([]))
 in (LrTable.NT 92,(result,defaultPos,defaultPos),rest671) end
| (286,(_,(MlyValue.javacommaarg javacommaarg,_,javacommaarg1right))::
(_,(MlyValue.javaarg javaarg,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.javacommaarg(((javaarg)::(javacommaarg)))
 in (LrTable.NT 92,(result,COMMA1left,javacommaarg1right),rest671) end
| (287,(_,(_,_,RPAREN1right))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.javaargs(([]))
 in (LrTable.NT 91,(result,LPAREN1left,RPAREN1right),rest671) end
| (288,(_,(_,_,RPAREN1right))::(_,(MlyValue.javacommaarg javacommaarg,
_,_))::(_,(MlyValue.javaarg javaarg,_,_))::(_,(_,LPAREN1left,_))::
rest671) => let val result=MlyValue.javaargs((
(javaarg)::(javacommaarg)))
 in (LrTable.NT 91,(result,LPAREN1left,RPAREN1right),rest671) end
| (289,(_,(MlyValue.oplongvid oplongvid,oplongvid1left,oplongvid1right
))::rest671) => let val result=MlyValue.oneexpp((LongVid(oplongvid)))
 in (LrTable.NT 26,(result,oplongvid1left,oplongvid1right),rest671)
 end
| (290,(_,(_,THIS1left,THIS1right))::rest671) => let val result=
MlyValue.oneexpp((Java(Java.This,NONE,NONE,[])))
 in (LrTable.NT 26,(result,THIS1left,THIS1right),rest671) end
| (291,(_,(_,SUPER1left,SUPER1right))::rest671) => let val result=
MlyValue.oneexpp((Java(Java.Super,NONE,NONE,[])))
 in (LrTable.NT 26,(result,SUPER1left,SUPER1right),rest671) end
| (292,(_,(MlyValue.oneexpp oneexpp,oneexppleft as oneexpp1left,
oneexppright as oneexpp1right))::rest671) => let val result=
MlyValue.oneexp((({left=oneexppleft,right=oneexppright},(oneexpp))))
 in (LrTable.NT 27,(result,oneexpp1left,oneexpp1right),rest671) end
| (293,(_,(_,_,RPAREN1right))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.args(([]))
 in (LrTable.NT 98,(result,LPAREN1left,RPAREN1right),rest671) end
| (294,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp1commarow exp1commarow,
_,_))::(_,(_,LPAREN1left,_))::rest671) => let val result=MlyValue.args
(((exp1commarow)))
 in (LrTable.NT 98,(result,LPAREN1left,RPAREN1right),rest671) end
| (295,(_,(MlyValue.oneexp oneexp,oneexp1left,oneexp1right))::rest671)
 => let val result=MlyValue.args(([(oneexp)]))
 in (LrTable.NT 98,(result,oneexp1left,oneexp1right),rest671) end
| (296,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp exp,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.simpleexp(((exp))
)
 in (LrTable.NT 36,(result,LPAREN1left,RPAREN1right),rest671) end
| (297,(_,(MlyValue.oneexp oneexp,oneexp1left,oneexp1right))::rest671)
 => let val result=MlyValue.simpleexp(((oneexp)))
 in (LrTable.NT 36,(result,oneexp1left,oneexp1right),rest671) end
| (298,(_,(MlyValue.exp exp,_,exp1right))::_::(_,(MlyValue.javaidsym 
javaidsym,javaidsym1left,_))::rest671) => let val result=
MlyValue.fldinit((((javaidsym),(exp))))
 in (LrTable.NT 97,(result,javaidsym1left,exp1right),rest671) end
| (299,rest671) => let val result=MlyValue.fldinits(([]))
 in (LrTable.NT 96,(result,defaultPos,defaultPos),rest671) end
| (300,(_,(MlyValue.fldinits fldinits,_,fldinits1right))::(_,(
MlyValue.fldinit fldinit,_,_))::(_,(_,SEMICOLON1left,_))::rest671) => 
let val result=MlyValue.fldinits(((fldinit)::(fldinits)))
 in (LrTable.NT 96,(result,SEMICOLON1left,fldinits1right),rest671) end
| (301,(_,(MlyValue.args args,_,args1right))::(_,(_,THIS1left,_))::
rest671) => let val result=MlyValue.inits((ThisInvoc(args)))
 in (LrTable.NT 94,(result,THIS1left,args1right),rest671) end
| (302,(_,(MlyValue.fldinits fldinits,_,fldinits1right))::(_,(
MlyValue.args args,_,_))::(_,(_,SUPER1left,_))::rest671) => let val 
result=MlyValue.inits((SuperInvoc((args),(fldinits))))
 in (LrTable.NT 94,(result,SUPER1left,fldinits1right),rest671) end
| (303,(_,(_,_,RBRACE1right))::(_,(MlyValue.inits inits,_,_))::(_,(_,
LBRACE1left,_))::rest671) => let val result=MlyValue.initsopt((inits))
 in (LrTable.NT 95,(result,LBRACE1left,RBRACE1right),rest671) end
| (304,rest671) => let val result=MlyValue.initsopt((NoInit))
 in (LrTable.NT 95,(result,defaultPos,defaultPos),rest671) end
| (305,(_,(MlyValue.expoption expoption,_,expoption1right))::(_,(
MlyValue.ty ty,_,_))::_::(_,(MlyValue.javaidsym javaidsym,_,_))::_::(_
,(MlyValue.javaflags javaflags,javaflags1left,_))::rest671) => let 
val result=MlyValue.classitemp((
Field{
                           modifiers=(javaflags),
                           name=(javaidsym),
                           ty=(ty),
                           initial=(expoption)
                           }
))
 in (LrTable.NT 101,(result,javaflags1left,expoption1right),rest671)
 end
| (306,(_,(MlyValue.expoption expoption,_,expoption1right))::(_,(
MlyValue.tyoption tyoption,_,_))::(_,(MlyValue.javaargs javaargs,_,_))
::(_,(MlyValue.javaidsym javaidsym,_,_))::_::(_,(MlyValue.javaflags 
javaflags,javaflags1left,_))::rest671) => let val result=
MlyValue.classitemp((
Method{
                           modifiers=(javaflags),
                           name=(javaidsym),
                           args=(javaargs),
                           result=(tyoption),
                           body=(expoption)
                           }
))
 in (LrTable.NT 101,(result,javaflags1left,expoption1right),rest671)
 end
| (307,(_,(MlyValue.expoption expoption,_,expoption1right))::(_,(
MlyValue.initsopt initsopt,_,_))::(_,(MlyValue.javaargs javaargs,_,_))
::_::(_,(MlyValue.javaflags javaflags,javaflags1left,_))::rest671) => 
let val result=MlyValue.classitemp((
Constructor{
                           modifiers=(javaflags),
                           args=(javaargs),
                           inits=(initsopt),
                           body=(expoption)
                           }
))
 in (LrTable.NT 101,(result,javaflags1left,expoption1right),rest671)
 end
| (308,(_,(MlyValue.classitemp classitemp,classitempleft as 
classitemp1left,classitempright as classitemp1right))::rest671) => 
let val result=MlyValue.classitem((
({left=classitempleft,right=classitempright},
                           (classitemp))
))
 in (LrTable.NT 102,(result,classitemp1left,classitemp1right),rest671)
 end
| (309,rest671) => let val result=MlyValue.classitems(([]))
 in (LrTable.NT 103,(result,defaultPos,defaultPos),rest671) end
| (310,(_,(MlyValue.classitems classitems,_,classitems1right))::(_,(
MlyValue.classitem classitem,classitem1left,_))::rest671) => let val 
result=MlyValue.classitems(((classitem)::(classitems)))
 in (LrTable.NT 103,(result,classitem1left,classitems1right),rest671)
 end
| (311,(_,(MlyValue.tyoption tyoption,_,tyoption1right))::(_,(
MlyValue.javaargs javaargs,_,_))::(_,(MlyValue.javaidsym javaidsym,_,_
))::_::(_,(MlyValue.javaflags javaflags,javaflags1left,_))::rest671)
 => let val result=MlyValue.intitemp((
Method{
                           modifiers=(javaflags),
                           name=(javaidsym),
                           args=(javaargs),
                           result=(tyoption),
                           body=NONE
                           }
))
 in (LrTable.NT 104,(result,javaflags1left,tyoption1right),rest671)
 end
| (312,(_,(MlyValue.intitemp intitemp,intitempleft as intitemp1left,
intitempright as intitemp1right))::rest671) => let val result=
MlyValue.intitem((
({left=intitempleft,right=intitempright},
                           (intitemp))
))
 in (LrTable.NT 105,(result,intitemp1left,intitemp1right),rest671) end
| (313,rest671) => let val result=MlyValue.intitems(([]))
 in (LrTable.NT 106,(result,defaultPos,defaultPos),rest671) end
| (314,(_,(MlyValue.intitems intitems,_,intitems1right))::(_,(
MlyValue.intitem intitem,intitem1left,_))::rest671) => let val result=
MlyValue.intitems(((intitem)::(intitems)))
 in (LrTable.NT 106,(result,intitem1left,intitems1right),rest671) end
| (315,rest671) => let val result=MlyValue.extendsone((NONE))
 in (LrTable.NT 107,(result,defaultPos,defaultPos),rest671) end
| (316,(_,(MlyValue.ty ty,_,ty1right))::(_,(_,EXTENDS1left,_))::
rest671) => let val result=MlyValue.extendsone((SOME(ty)))
 in (LrTable.NT 107,(result,EXTENDS1left,ty1right),rest671) end
| (317,rest671) => let val result=MlyValue.extendsmany(([]))
 in (LrTable.NT 108,(result,defaultPos,defaultPos),rest671) end
| (318,(_,(MlyValue.commatyseq commatyseq,_,commatyseq1right))::(_,(
MlyValue.ty ty,_,_))::(_,(_,EXTENDS1left,_))::rest671) => let val 
result=MlyValue.extendsmany(((ty)::(commatyseq)))
 in (LrTable.NT 108,(result,EXTENDS1left,commatyseq1right),rest671)
 end
| (319,rest671) => let val result=MlyValue.implements(([]))
 in (LrTable.NT 109,(result,defaultPos,defaultPos),rest671) end
| (320,(_,(MlyValue.commatyseq commatyseq,_,commatyseq1right))::(_,(
MlyValue.ty ty,_,_))::(_,(_,IMPLEMENTS1left,_))::rest671) => let val 
result=MlyValue.implements(((ty)::(commatyseq)))
 in (LrTable.NT 109,(result,IMPLEMENTS1left,commatyseq1right),rest671)
 end
| (321,(_,(_,_,RBRACE1right))::(_,(MlyValue.classitems classitems,_,_)
)::_::(_,(MlyValue.implements implements,_,_))::(_,(
MlyValue.extendsone extendsone,_,_))::(_,(MlyValue.tycon tycon,_,_))::
_::(_,(MlyValue.javaflags javaflags,javaflags1left,_))::rest671) => 
let val result=MlyValue.javadec((
ClassType{
                           tycon=(tycon),
                           modifiers=(javaflags),
                           super=(extendsone),
                           implements=(implements),
                           body=(classitems)
                           }
))
 in (LrTable.NT 88,(result,javaflags1left,RBRACE1right),rest671) end
| (322,(_,(_,_,RBRACE1right))::(_,(MlyValue.intitems intitems,_,_))::_
::(_,(MlyValue.extendsmany extendsmany,_,_))::(_,(MlyValue.tycon tycon
,_,_))::_::(_,(MlyValue.javaflags javaflags,javaflags1left,_))::
rest671) => let val result=MlyValue.javadec((
ClassType{
                           tycon=(tycon),
                           modifiers=JavaFlags.INTERFACE::(javaflags),
                           super=NONE,
                           implements=(extendsmany),
                           body=(intitems)
                           }
))
 in (LrTable.NT 88,(result,javaflags1left,RBRACE1right),rest671) end
| (323,(_,(_,_,END1right))::(_,(MlyValue.strdec strdec,_,_))::(_,(_,
STRUCT1left,_))::rest671) => let val result=MlyValue.strexpcom((
Struct(strdec)))
 in (LrTable.NT 110,(result,STRUCT1left,END1right),rest671) end
| (324,(_,(MlyValue.longstrid longstrid,longstrid1left,longstrid1right
))::rest671) => let val result=MlyValue.strexpcom((Strid(longstrid)))
 in (LrTable.NT 110,(result,longstrid1left,longstrid1right),rest671)
 end
| (325,(_,(_,_,RPAREN1right))::(_,(MlyValue.strexp strexp,_,_))::_::(_
,(MlyValue.funid funid,funid1left,_))::rest671) => let val result=
MlyValue.strexpcom((FunApp((funid),(strexp))))
 in (LrTable.NT 110,(result,funid1left,RPAREN1right),rest671) end
| (326,(_,(_,_,RPAREN1right))::(_,(MlyValue.strdecarg strdecarg,
strdecargleft,strdecargright))::_::(_,(MlyValue.funid funid,funid1left
,_))::rest671) => let val result=MlyValue.strexpcom((
FunApp((funid),({left=strdecargleft,
                           right=strdecargright},Struct(strdecarg)))
))
 in (LrTable.NT 110,(result,funid1left,RPAREN1right),rest671) end
| (327,(_,(_,_,END1right))::(_,(MlyValue.strexp strexp,_,_))::_::(_,(
MlyValue.strdec strdec,_,_))::(_,(_,LET1left,_))::rest671) => let val 
result=MlyValue.strexpcom((StrLet((strdec),(strexp))))
 in (LrTable.NT 110,(result,LET1left,END1right),rest671) end
| (328,(_,(MlyValue.strexpcom strexpcom,strexpcom1left,strexpcom1right
))::rest671) => let val result=MlyValue.strexpp((strexpcom))
 in (LrTable.NT 112,(result,strexpcom1left,strexpcom1right),rest671)
 end
| (329,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::_::(_,(
MlyValue.strexp strexp,strexp1left,_))::rest671) => let val result=
MlyValue.strexpp((StrTransparent((strexp),(sigexp))))
 in (LrTable.NT 112,(result,strexp1left,sigexp1right),rest671) end
| (330,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::_::(_,(
MlyValue.strexp strexp,strexp1left,_))::rest671) => let val result=
MlyValue.strexpp((StrOpaque((strexp),(sigexp))))
 in (LrTable.NT 112,(result,strexp1left,sigexp1right),rest671) end
| (331,(_,(_,_,AND1right))::(_,(MlyValue.strexpcom strexpcom,
strexpcom1left,_))::rest671) => let val result=MlyValue.strexpandp((
strexpcom))
 in (LrTable.NT 114,(result,strexpcom1left,AND1right),rest671) end
| (332,(_,(MlyValue.sigexpand sigexpand,_,sigexpand1right))::_::(_,(
MlyValue.strexp strexp,strexp1left,_))::rest671) => let val result=
MlyValue.strexpandp((StrTransparent((strexp),(sigexpand))))
 in (LrTable.NT 114,(result,strexp1left,sigexpand1right),rest671) end
| (333,(_,(MlyValue.sigexpand sigexpand,_,sigexpand1right))::_::(_,(
MlyValue.strexp strexp,strexp1left,_))::rest671) => let val result=
MlyValue.strexpandp((StrOpaque((strexp),(sigexpand))))
 in (LrTable.NT 114,(result,strexp1left,sigexpand1right),rest671) end
| (334,(_,(MlyValue.strexpp strexpp,strexppleft as strexpp1left,
strexppright as strexpp1right))::rest671) => let val result=
MlyValue.strexp((({left=strexppleft,right=strexppright},(strexpp))))
 in (LrTable.NT 111,(result,strexpp1left,strexpp1right),rest671) end
| (335,(_,(MlyValue.strexpandp strexpandp,strexpandpleft as 
strexpandp1left,strexpandpright as strexpandp1right))::rest671) => 
let val result=MlyValue.strexpand((
({left=strexpandpleft,right=strexpandpright},
                           (strexpandp))
))
 in (LrTable.NT 113,(result,strexpandp1left,strexpandp1right),rest671)
 end
| (336,(_,(MlyValue.decitempl decitempl,decitempl1left,decitempl1right
))::rest671) => let val result=MlyValue.strdecitemp(((decitempl)))
 in (LrTable.NT 117,(result,decitempl1left,decitempl1right),rest671)
 end
| (337,(_,(MlyValue.javadec javadec,javadec1left,javadec1right))::
rest671) => let val result=MlyValue.strdecitemp((JavaDec(javadec)))
 in (LrTable.NT 117,(result,javadec1left,javadec1right),rest671) end
| (338,(_,(MlyValue.strbind strbind,_,strbind1right))::(_,(_,
STRUCTURE1left,_))::rest671) => let val result=MlyValue.strdecitemp((
Structure(strbind)))
 in (LrTable.NT 117,(result,STRUCTURE1left,strbind1right),rest671) end
| (339,(_,(_,_,END1right))::(_,(MlyValue.strdec strdec2,_,_))::_::(_,(
MlyValue.strdec strdec1,_,_))::(_,(_,LOCAL1left,_))::rest671) => let 
val result=MlyValue.strdecitemp((Local((strdec1),(strdec2))))
 in (LrTable.NT 117,(result,LOCAL1left,END1right),rest671) end
| (340,(_,(MlyValue.strdecitemp strdecitemp,strdecitempleft as 
strdecitemp1left,strdecitempright as strdecitemp1right))::rest671) => 
let val result=MlyValue.strdecitem((
({left=strdecitempleft,right=strdecitempright},
                           (strdecitemp))
))
 in (LrTable.NT 118,(result,strdecitemp1left,strdecitemp1right),
rest671) end
| (341,rest671) => let val result=MlyValue.strdec(([]))
 in (LrTable.NT 115,(result,defaultPos,defaultPos),rest671) end
| (342,(_,(MlyValue.strdec strdec,_,strdec1right))::(_,(_,
extrarparen1left,_))::rest671) => let val result=MlyValue.strdec((
(strdec)))
 in (LrTable.NT 115,(result,extrarparen1left,strdec1right),rest671)
 end
| (343,(_,(MlyValue.strdec strdec,_,strdec1right))::(_,(_,
SEMICOLON1left,_))::rest671) => let val result=MlyValue.strdec((
(strdec)))
 in (LrTable.NT 115,(result,SEMICOLON1left,strdec1right),rest671) end
| (344,(_,(MlyValue.strdec strdec,_,strdec1right))::(_,(
MlyValue.strdecitem strdecitem,strdecitem1left,_))::rest671) => let 
val result=MlyValue.strdec(((strdecitem)::(strdec)))
 in (LrTable.NT 115,(result,strdecitem1left,strdec1right),rest671) end
| (345,rest671) => let val result=MlyValue.strdecarg(([]))
 in (LrTable.NT 116,(result,defaultPos,defaultPos),rest671) end
| (346,(_,(MlyValue.strdecarg strdecarg,_,strdecarg1right))::(_,(_,
SEMICOLON1left,_))::rest671) => let val result=MlyValue.strdecarg((
(strdecarg)))
 in (LrTable.NT 116,(result,SEMICOLON1left,strdecarg1right),rest671)
 end
| (347,(_,(MlyValue.strdecarg strdecarg,_,strdecarg1right))::(_,(
MlyValue.strdecitem strdecitem,strdecitem1left,_))::rest671) => let 
val result=MlyValue.strdecarg(((strdecitem)::(strdecarg)))
 in (LrTable.NT 116,(result,strdecitem1left,strdecarg1right),rest671)
 end
| (348,(_,(MlyValue.strbinditem strbinditem,strbinditem1left,
strbinditem1right))::rest671) => let val result=MlyValue.strbind((
[(strbinditem)]))
 in (LrTable.NT 119,(result,strbinditem1left,strbinditem1right),
rest671) end
| (349,(_,(MlyValue.strbind strbind,_,strbind1right))::(_,(
MlyValue.strbinditemand strbinditemand,strbinditemand1left,_))::
rest671) => let val result=MlyValue.strbind((
(strbinditemand)::(strbind)))
 in (LrTable.NT 119,(result,strbinditemand1left,strbind1right),rest671
) end
| (350,rest671) => let val result=MlyValue.siginfo((SigNone))
 in (LrTable.NT 144,(result,defaultPos,defaultPos),rest671) end
| (351,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::(_,(_,COLON1left,_
))::rest671) => let val result=MlyValue.siginfo((SigConcrete(sigexp)))
 in (LrTable.NT 144,(result,COLON1left,sigexp1right),rest671) end
| (352,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::(_,(_,COLONGT1left
,_))::rest671) => let val result=MlyValue.siginfo((SigAbstract(sigexp)
))
 in (LrTable.NT 144,(result,COLONGT1left,sigexp1right),rest671) end
| (353,(_,(MlyValue.strexp strexp,_,strexp1right))::_::(_,(
MlyValue.siginfo siginfo,_,_))::(_,(MlyValue.strid strid,strid1left,_)
)::rest671) => let val result=MlyValue.strbinditem((
((strid),(strexp),(siginfo))))
 in (LrTable.NT 120,(result,strid1left,strexp1right),rest671) end
| (354,(_,(MlyValue.strexpand strexpand,_,strexpand1right))::_::(_,(
MlyValue.siginfo siginfo,_,_))::(_,(MlyValue.strid strid,strid1left,_)
)::rest671) => let val result=MlyValue.strbinditemand((
((strid),(strexpand),(siginfo))))
 in (LrTable.NT 121,(result,strid1left,strexpand1right),rest671) end
| (355,(_,(_,_,END1right))::(_,(MlyValue.spec spec,_,_))::(_,(_,
SIG1left,_))::rest671) => let val result=MlyValue.sigexpp((
SigSpec(spec)))
 in (LrTable.NT 123,(result,SIG1left,END1right),rest671) end
| (356,(_,(MlyValue.sigid sigid,sigid1left,sigid1right))::rest671) => 
let val result=MlyValue.sigexpp((Sigid(sigid)))
 in (LrTable.NT 123,(result,sigid1left,sigid1right),rest671) end
| (357,(_,(_,_,AND1right))::(_,(MlyValue.sigexpw sigexpw,sigexpw1left,
_))::rest671) => let val result=MlyValue.sigexpwand((sigexpw))
 in (LrTable.NT 126,(result,sigexpw1left,AND1right),rest671) end
| (358,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.longtycon 
longtycon,_,_))::(_,(MlyValue.tyvarseq tyvarseq,_,_))::_::_::(_,(
MlyValue.sigexp sigexp,sigexp1left,_))::rest671) => let val result=
MlyValue.sigexpwp((Where((sigexp),(tyvarseq),(longtycon),(ty))))
 in (LrTable.NT 124,(result,sigexp1left,ty1right),rest671) end
| (359,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.longtycon 
longtycon,_,_))::(_,(MlyValue.tyvarseq tyvarseq,_,_))::_::(_,(
MlyValue.sigexpwand sigexpwand,sigexpwand1left,_))::rest671) => let 
val result=MlyValue.sigexpwp((
Where((sigexpwand),(tyvarseq),(longtycon),(ty))))
 in (LrTable.NT 124,(result,sigexpwand1left,ty1right),rest671) end
| (360,(_,(MlyValue.sigexpwp sigexpwp,sigexpwpleft as sigexpwp1left,
sigexpwpright as sigexpwp1right))::rest671) => let val result=
MlyValue.sigexpw((({left=sigexpwpleft,right=sigexpwpright},(sigexpwp))
))
 in (LrTable.NT 125,(result,sigexpwp1left,sigexpwp1right),rest671) end
| (361,(_,(MlyValue.sigexpp sigexpp,sigexppleft as sigexpp1left,
sigexppright as sigexpp1right))::rest671) => let val result=
MlyValue.sigexp((({left=sigexppleft,right=sigexppright},(sigexpp))))
 in (LrTable.NT 122,(result,sigexpp1left,sigexpp1right),rest671) end
| (362,(_,(MlyValue.sigexpw sigexpw,sigexpw1left,sigexpw1right))::
rest671) => let val result=MlyValue.sigexp(((sigexpw)))
 in (LrTable.NT 122,(result,sigexpw1left,sigexpw1right),rest671) end
| (363,(_,(MlyValue.sigexpwand sigexpwand,sigexpwand1left,
sigexpwand1right))::rest671) => let val result=MlyValue.sigexpand((
sigexpwand))
 in (LrTable.NT 127,(result,sigexpwand1left,sigexpwand1right),rest671)
 end
| (364,(_,(_,_,AND1right))::(_,(MlyValue.sigexpp sigexpp,sigexppleft
 as sigexpp1left,sigexppright))::rest671) => let val result=
MlyValue.sigexpand((({left=sigexppleft,right=sigexppright},sigexpp)))
 in (LrTable.NT 127,(result,sigexpp1left,AND1right),rest671) end
| (365,rest671) => let val result=MlyValue.spec(([]))
 in (LrTable.NT 128,(result,defaultPos,defaultPos),rest671) end
| (366,(_,(MlyValue.spec spec,_,spec1right))::(_,(_,SEMICOLON1left,_))
::rest671) => let val result=MlyValue.spec(((spec)))
 in (LrTable.NT 128,(result,SEMICOLON1left,spec1right),rest671) end
| (367,(_,(MlyValue.spec spec,_,spec1right))::(_,(MlyValue.specitem 
specitem,specitem1left,_))::rest671) => let val result=MlyValue.spec((
(specitem)::(spec)))
 in (LrTable.NT 128,(result,specitem1left,spec1right),rest671) end
| (368,(_,(MlyValue.specitemp specitemp,specitempleft as 
specitemp1left,specitempright as specitemp1right))::rest671) => let 
val result=MlyValue.specitem((
({left=specitempleft,right=specitempright},
                           (specitemp))
))
 in (LrTable.NT 129,(result,specitemp1left,specitemp1right),rest671)
 end
| (369,(_,(MlyValue.valdesc valdesc,_,valdesc1right))::(_,(_,VAL1left,
_))::rest671) => let val result=MlyValue.specitemp((ValDesc(valdesc)))
 in (LrTable.NT 130,(result,VAL1left,valdesc1right),rest671) end
| (370,(_,(MlyValue.typdesc typdesc,_,typdesc1right))::(_,(_,TYPE1left
,_))::rest671) => let val result=MlyValue.specitemp((TypeDesc(typdesc)
))
 in (LrTable.NT 130,(result,TYPE1left,typdesc1right),rest671) end
| (371,(_,(MlyValue.eqtypdesc eqtypdesc,_,eqtypdesc1right))::(_,(_,
EQTYPE1left,_))::rest671) => let val result=MlyValue.specitemp((
EqTypeDesc(eqtypdesc)))
 in (LrTable.NT 130,(result,EQTYPE1left,eqtypdesc1right),rest671) end
| (372,(_,(MlyValue.datbind datbind,_,datbind1right))::(_,(_,
DATATYPE1left,_))::rest671) => let val result=MlyValue.specitemp((
DatatypeDesc((datbind),NONE)))
 in (LrTable.NT 130,(result,DATATYPE1left,datbind1right),rest671) end
| (373,(_,(MlyValue.typbind typbind,_,typbind1right))::_::(_,(
MlyValue.datbind datbind,_,_))::(_,(_,DATATYPE1left,_))::rest671) => 
let val result=MlyValue.specitemp((
DatatypeDesc((datbind),SOME(typbind))))
 in (LrTable.NT 130,(result,DATATYPE1left,typbind1right),rest671) end
| (374,(_,(MlyValue.longtycon longtycon,_,longtycon1right))::_::_::(_,
(MlyValue.tycon tycon,_,_))::(_,(_,DATATYPE1left,_))::rest671) => let 
val result=MlyValue.specitemp((DatatypeDescCopy((tycon),(longtycon))))
 in (LrTable.NT 130,(result,DATATYPE1left,longtycon1right),rest671)
 end
| (375,(_,(MlyValue.exdesc exdesc,_,exdesc1right))::(_,(_,
EXCEPTION1left,_))::rest671) => let val result=MlyValue.specitemp((
ExceptionDesc(exdesc)))
 in (LrTable.NT 130,(result,EXCEPTION1left,exdesc1right),rest671) end
| (376,(_,(MlyValue.javalongid javalongid,_,javalongid1right))::_::(_,
(MlyValue.opvid opvid,_,_))::(_,(_,EXCEPTION1left,_))::rest671) => 
let val result=MlyValue.specitemp((
JavaDesc(ClassException((opvid),(javalongid)))))
 in (LrTable.NT 130,(result,EXCEPTION1left,javalongid1right),rest671)
 end
| (377,(_,(MlyValue.strdesc strdesc,_,strdesc1right))::(_,(_,
STRUCTURE1left,_))::rest671) => let val result=MlyValue.specitemp((
StructureDesc(strdesc)))
 in (LrTable.NT 130,(result,STRUCTURE1left,strdesc1right),rest671) end
| (378,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::(_,(_,INCLUDE1left
,_))::rest671) => let val result=MlyValue.specitemp((Include(sigexp)))
 in (LrTable.NT 130,(result,INCLUDE1left,sigexp1right),rest671) end
| (379,(_,(MlyValue.longtycons_equals longtycons_equals,_,
longtycons_equals1right))::_::(_,(_,SHARING1left,_))::rest671) => let 
val result=MlyValue.specitemp((SharingType(longtycons_equals)))
 in (LrTable.NT 130,(result,SHARING1left,longtycons_equals1right),
rest671) end
| (380,(_,(MlyValue.longstrids_equals longstrids_equals,_,
longstrids_equals1right))::(_,(_,SHARING1left,_))::rest671) => let 
val result=MlyValue.specitemp((Sharing(longstrids_equals)))
 in (LrTable.NT 130,(result,SHARING1left,longstrids_equals1right),
rest671) end
| (381,(_,(MlyValue.javadec javadec,javadec1left,javadec1right))::
rest671) => let val result=MlyValue.specitemp((JavaDesc(javadec)))
 in (LrTable.NT 130,(result,javadec1left,javadec1right),rest671) end
| (382,(_,(MlyValue.valdescitem valdescitem,valdescitem1left,
valdescitem1right))::rest671) => let val result=MlyValue.valdesc((
[(valdescitem)]))
 in (LrTable.NT 131,(result,valdescitem1left,valdescitem1right),
rest671) end
| (383,(_,(MlyValue.valdesc valdesc,_,valdesc1right))::_::(_,(
MlyValue.valdescitem valdescitem,valdescitem1left,_))::rest671) => 
let val result=MlyValue.valdesc(((valdescitem)::(valdesc)))
 in (LrTable.NT 131,(result,valdescitem1left,valdesc1right),rest671)
 end
| (384,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.vid vid,
vid1left,_))::rest671) => let val result=MlyValue.valdescitem((
((vid),(ty))))
 in (LrTable.NT 132,(result,vid1left,ty1right),rest671) end
| (385,(_,(MlyValue.typdescitem typdescitem,typdescitem1left,
typdescitem1right))::rest671) => let val result=MlyValue.typdesc((
[(typdescitem)]))
 in (LrTable.NT 133,(result,typdescitem1left,typdescitem1right),
rest671) end
| (386,(_,(MlyValue.typdesc typdesc,_,typdesc1right))::_::(_,(
MlyValue.typdescitem typdescitem,typdescitem1left,_))::rest671) => 
let val result=MlyValue.typdesc(((typdescitem)::(typdesc)))
 in (LrTable.NT 133,(result,typdescitem1left,typdesc1right),rest671)
 end
| (387,(_,(MlyValue.tycon tycon,_,tycon1right))::(_,(MlyValue.tyvarseq
 tyvarseq,tyvarseq1left,_))::rest671) => let val result=
MlyValue.typdescitem((((tyvarseq),(tycon),NONE)))
 in (LrTable.NT 134,(result,tyvarseq1left,tycon1right),rest671) end
| (388,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.tycon tycon,_,
_))::(_,(MlyValue.tyvarseq tyvarseq,tyvarseq1left,_))::rest671) => 
let val result=MlyValue.typdescitem((((tyvarseq),(tycon),SOME(ty))))
 in (LrTable.NT 134,(result,tyvarseq1left,ty1right),rest671) end
| (389,(_,(MlyValue.eqtypdescitem eqtypdescitem,eqtypdescitem1left,
eqtypdescitem1right))::rest671) => let val result=MlyValue.eqtypdesc((
[(eqtypdescitem)]))
 in (LrTable.NT 135,(result,eqtypdescitem1left,eqtypdescitem1right),
rest671) end
| (390,(_,(MlyValue.eqtypdesc eqtypdesc,_,eqtypdesc1right))::_::(_,(
MlyValue.eqtypdescitem eqtypdescitem,eqtypdescitem1left,_))::rest671)
 => let val result=MlyValue.eqtypdesc(((eqtypdescitem)::(eqtypdesc)))
 in (LrTable.NT 135,(result,eqtypdescitem1left,eqtypdesc1right),
rest671) end
| (391,(_,(MlyValue.tycon tycon,_,tycon1right))::(_,(MlyValue.tyvarseq
 tyvarseq,tyvarseq1left,_))::rest671) => let val result=
MlyValue.eqtypdescitem((((tyvarseq),(tycon))))
 in (LrTable.NT 136,(result,tyvarseq1left,tycon1right),rest671) end
| (392,(_,(MlyValue.exdescitem exdescitem,exdescitem1left,
exdescitem1right))::rest671) => let val result=MlyValue.exdesc((
[(exdescitem)]))
 in (LrTable.NT 137,(result,exdescitem1left,exdescitem1right),rest671)
 end
| (393,(_,(MlyValue.exdesc exdesc,_,exdesc1right))::_::(_,(
MlyValue.exdescitem exdescitem,exdescitem1left,_))::rest671) => let 
val result=MlyValue.exdesc(((exdescitem)::(exdesc)))
 in (LrTable.NT 137,(result,exdescitem1left,exdesc1right),rest671) end
| (394,(_,(MlyValue.ty ty,_,ty1right))::_::(_,(MlyValue.vid vid,
vid1left,_))::rest671) => let val result=MlyValue.exdescitem((
((false,vid),SOME ty)))
 in (LrTable.NT 138,(result,vid1left,ty1right),rest671) end
| (395,(_,(MlyValue.vid vid,vid1left,vid1right))::rest671) => let val 
result=MlyValue.exdescitem((((false,vid),NONE)))
 in (LrTable.NT 138,(result,vid1left,vid1right),rest671) end
| (396,(_,(MlyValue.strdescitem strdescitem,strdescitem1left,
strdescitem1right))::rest671) => let val result=MlyValue.strdesc((
[(strdescitem)]))
 in (LrTable.NT 139,(result,strdescitem1left,strdescitem1right),
rest671) end
| (397,(_,(MlyValue.strdesc strdesc,_,strdesc1right))::(_,(
MlyValue.strdescitemand strdescitemand,strdescitemand1left,_))::
rest671) => let val result=MlyValue.strdesc((
(strdescitemand)::(strdesc)))
 in (LrTable.NT 139,(result,strdescitemand1left,strdesc1right),rest671
) end
| (398,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::_::(_,(
MlyValue.strid strid,strid1left,_))::rest671) => let val result=
MlyValue.strdescitem((((strid),(sigexp))))
 in (LrTable.NT 140,(result,strid1left,sigexp1right),rest671) end
| (399,(_,(MlyValue.sigexpand sigexpand,_,sigexpand1right))::_::(_,(
MlyValue.strid strid,strid1left,_))::rest671) => let val result=
MlyValue.strdescitemand((((strid),(sigexpand))))
 in (LrTable.NT 141,(result,strid1left,sigexpand1right),rest671) end
| (400,(_,(MlyValue.longtycon longtycon2,_,longtycon2right))::_::(_,(
MlyValue.longtycon longtycon1,longtycon1left,_))::rest671) => let val 
result=MlyValue.longtycons_equals(([(longtycon1),(longtycon2)]))
 in (LrTable.NT 142,(result,longtycon1left,longtycon2right),rest671)
 end
| (401,(_,(MlyValue.longtycons_equals longtycons_equals,_,
longtycons_equals1right))::_::(_,(MlyValue.longtycon longtycon,
longtycon1left,_))::rest671) => let val result=
MlyValue.longtycons_equals(((longtycon)::(longtycons_equals)))
 in (LrTable.NT 142,(result,longtycon1left,longtycons_equals1right),
rest671) end
| (402,(_,(MlyValue.longstrid longstrid2,_,longstrid2right))::_::(_,(
MlyValue.longstrid longstrid1,longstrid1left,_))::rest671) => let val 
result=MlyValue.longstrids_equals(([(longstrid1),(longstrid2)]))
 in (LrTable.NT 143,(result,longstrid1left,longstrid2right),rest671)
 end
| (403,(_,(MlyValue.longstrids_equals longstrids_equals,_,
longstrids_equals1right))::_::(_,(MlyValue.longstrid longstrid,
longstrid1left,_))::rest671) => let val result=
MlyValue.longstrids_equals(((longstrid)::(longstrids_equals)))
 in (LrTable.NT 143,(result,longstrid1left,longstrids_equals1right),
rest671) end
| (404,(_,(MlyValue.sigbinditem sigbinditem,sigbinditem1left,
sigbinditem1right))::rest671) => let val result=MlyValue.sigbind((
[(sigbinditem)]))
 in (LrTable.NT 145,(result,sigbinditem1left,sigbinditem1right),
rest671) end
| (405,(_,(MlyValue.sigbind sigbind,_,sigbind1right))::(_,(
MlyValue.sigbinditemand sigbinditemand,sigbinditemand1left,_))::
rest671) => let val result=MlyValue.sigbind((
(sigbinditemand)::(sigbind)))
 in (LrTable.NT 145,(result,sigbinditemand1left,sigbind1right),rest671
) end
| (406,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::_::(_,(
MlyValue.sigid sigid,sigid1left,_))::rest671) => let val result=
MlyValue.sigbinditem((((sigid),(sigexp))))
 in (LrTable.NT 146,(result,sigid1left,sigexp1right),rest671) end
| (407,(_,(MlyValue.sigexpand sigexpand,_,sigexpand1right))::_::(_,(
MlyValue.sigid sigid,sigid1left,_))::rest671) => let val result=
MlyValue.sigbinditemand((((sigid),(sigexpand))))
 in (LrTable.NT 147,(result,sigid1left,sigexpand1right),rest671) end
| (408,(_,(MlyValue.funbinditem funbinditem,funbinditem1left,
funbinditem1right))::rest671) => let val result=MlyValue.funbind((
[(funbinditem)]))
 in (LrTable.NT 148,(result,funbinditem1left,funbinditem1right),
rest671) end
| (409,(_,(MlyValue.funbind funbind,_,funbind1right))::(_,(
MlyValue.funbinditemand funbinditemand,funbinditemand1left,_))::
rest671) => let val result=MlyValue.funbind((
(funbinditemand)::(funbind)))
 in (LrTable.NT 148,(result,funbinditemand1left,funbind1right),rest671
) end
| (410,(_,(MlyValue.sigexp sigexp,_,sigexp1right))::_::(_,(
MlyValue.strid strid,strid1left,_))::rest671) => let val result=
MlyValue.funarg((StructArg((strid),(sigexp))))
 in (LrTable.NT 151,(result,strid1left,sigexp1right),rest671) end
| (411,(_,(MlyValue.spec spec,spec1left,spec1right))::rest671) => let 
val result=MlyValue.funarg((SpecArg(spec)))
 in (LrTable.NT 151,(result,spec1left,spec1right),rest671) end
| (412,(_,(MlyValue.strexp strexp,_,strexp1right))::_::(_,(
MlyValue.siginfo siginfo,_,_))::_::(_,(MlyValue.funarg funarg,_,_))::_
::(_,(MlyValue.funid funid,funid1left,_))::rest671) => let val result=
MlyValue.funbinditem((((funid),(funarg),(siginfo),(strexp))))
 in (LrTable.NT 149,(result,funid1left,strexp1right),rest671) end
| (413,(_,(MlyValue.strexpand strexpand,_,strexpand1right))::_::(_,(
MlyValue.siginfo siginfo,_,_))::_::(_,(MlyValue.funarg funarg,_,_))::_
::(_,(MlyValue.funid funid,funid1left,_))::rest671) => let val result=
MlyValue.funbinditemand((((funid),(funarg),(siginfo),(strexpand))))
 in (LrTable.NT 150,(result,funid1left,strexpand1right),rest671) end
| (414,(_,(MlyValue.strdecitemp strdecitemp,strdecitemp1left,
strdecitemp1right))::rest671) => let val result=MlyValue.topdecitemp((
(strdecitemp)))
 in (LrTable.NT 152,(result,strdecitemp1left,strdecitemp1right),
rest671) end
| (415,(_,(MlyValue.sigbind sigbind,_,sigbind1right))::(_,(_,
SIGNATURE1left,_))::rest671) => let val result=MlyValue.topdecitemp((
Signature(sigbind)))
 in (LrTable.NT 152,(result,SIGNATURE1left,sigbind1right),rest671) end
| (416,(_,(MlyValue.funbind funbind,_,funbind1right))::(_,(_,
FUNCTOR1left,_))::rest671) => let val result=MlyValue.topdecitemp((
Functor(funbind)))
 in (LrTable.NT 152,(result,FUNCTOR1left,funbind1right),rest671) end
| (417,(_,(MlyValue.topdecitemp topdecitemp,topdecitempleft as 
topdecitemp1left,topdecitempright as topdecitemp1right))::rest671) => 
let val result=MlyValue.topdecitem((
({left=topdecitempleft,right=topdecitempright},
                           (topdecitemp))
))
 in (LrTable.NT 153,(result,topdecitemp1left,topdecitemp1right),
rest671) end
| (418,(_,(_,ENDleft as END1left,ENDright as END1right))::rest671) => 
let val result=MlyValue.extraend((
if ENDright-ENDleft=3
                         then
                           (ERROR(ENDleft,ENDright,"Extra END");
                            ())
                         else ()
                         
))
 in (LrTable.NT 155,(result,END1left,END1right),rest671) end
| (419,(_,(_,RPARENleft as RPAREN1left,RPARENright as RPAREN1right))::
rest671) => let val result=MlyValue.extrarparen((
if RPARENright-RPARENleft=1
                         then
                           (ERROR(RPARENleft,RPARENright,"Extra RPAREN");
                            ())
                         else ()
                         
))
 in (LrTable.NT 156,(result,RPAREN1left,RPAREN1right),rest671) end
| (420,rest671) => let val result=MlyValue.topdec(([]))
 in (LrTable.NT 154,(result,defaultPos,defaultPos),rest671) end
| (421,(_,(MlyValue.topdec topdec,_,topdec1right))::(_,(_,
SEMICOLON1left,_))::rest671) => let val result=MlyValue.topdec((
(topdec)))
 in (LrTable.NT 154,(result,SEMICOLON1left,topdec1right),rest671) end
| (422,(_,(MlyValue.topdec topdec,_,topdec1right))::(_,(_,
extrarparen1left,_))::rest671) => let val result=MlyValue.topdec((
(topdec)))
 in (LrTable.NT 154,(result,extrarparen1left,topdec1right),rest671)
 end
| (423,(_,(MlyValue.topdec topdec,_,topdec1right))::(_,(_,
extraend1left,_))::rest671) => let val result=MlyValue.topdec((
(topdec)))
 in (LrTable.NT 154,(result,extraend1left,topdec1right),rest671) end
| (424,(_,(MlyValue.topdec topdec,_,topdec1right))::(_,(
MlyValue.topdecitem topdecitem,topdecitem1left,_))::rest671) => let 
val result=MlyValue.topdec(((topdecitem)::(topdec)))
 in (LrTable.NT 154,(result,topdecitem1left,topdec1right),rest671) end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.start x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : MLJ_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun BAD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun SCON (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.SCON i,p1,p2))
fun INTLAB (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.INTLAB i,p1,p2))
fun JAVAID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.JAVAID i,p1,p2))
fun JAVALONGID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.JAVALONGID i,p1,p2))
fun ALPHA (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.ALPHA i,p1,p2))
fun SYMBOLIC (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.SYMBOLIC i,p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.TYVAR i,p1,p2))
fun ABSTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun CASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALOP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun EQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun EXCEPTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun HANDLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun INCLUDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIXR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun LAZY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun LOCAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun NONFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun OP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun OPEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun RAISE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun REC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun SHARING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun SIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun SIGNATURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun WHERE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun WILD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun WITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun ASTERISK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun COLONGT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun ORELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDALSO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun ABSTRACT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun CAST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun CLASSTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun CONSTRUCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun EXTENDS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun FIELD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
fun FINAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun GETFIELD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPLEMENTS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun INSTANCEOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun INTERFACETYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun INVOKE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun METHOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
fun NEW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 84,(
ParserData.MlyValue.VOID,p1,p2))
fun PRIVATE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 85,(
ParserData.MlyValue.VOID,p1,p2))
fun PROTECTED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 86,(
ParserData.MlyValue.VOID,p1,p2))
fun PUBLIC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 87,(
ParserData.MlyValue.VOID,p1,p2))
fun PUTFIELD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 88,(
ParserData.MlyValue.VOID,p1,p2))
fun SUPER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 89,(
ParserData.MlyValue.VOID,p1,p2))
fun STATIC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 90,(
ParserData.MlyValue.VOID,p1,p2))
fun SYNCHRONIZED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 91,(
ParserData.MlyValue.VOID,p1,p2))
fun THIS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 92,(
ParserData.MlyValue.VOID,p1,p2))
fun TRANSIENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 93,(
ParserData.MlyValue.VOID,p1,p2))
fun VOLATILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 94,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERLOAD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 95,(
ParserData.MlyValue.VOID,p1,p2))
fun NEWARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 96,(
ParserData.MlyValue.VOID,p1,p2))
fun BYTECODE (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 97,(
ParserData.MlyValue.BYTECODE i,p1,p2))
fun DOTHASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 98,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTHASHHASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 99,(
ParserData.MlyValue.VOID,p1,p2))
fun UNDERLINEID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 100,(
ParserData.MlyValue.UNDERLINEID i,p1,p2))
end
end
