(*......................................................................*)
(* MLj - a Standard ML to Java bytecode compiler                        *)
(* Copyright (C) 1999 Persimmon IT Inc.                                 *)
(*                                                                      *)
(* This program is free software; you can redistribute it and/or        *)
(* modify it under the terms of the GNU General Public License          *)
(* as published by the Free Software Foundation; either version 2       *)
(* of the License, or (at your option) any later version.               *)
(*                                                                      *)
(* This program is distributed in the hope that it will be useful,      *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with this program; if not, write to the Free Software          *)
(* Foundation, Inc., 59 Temple Place - Suite 330, Boston,               *)
(* MA 02111-1307, USA.                                                  *)
(*......................................................................*)

(* This is adapted from the BigNat structure in New Jersey's IntInf structure.
   However, we use WordNs throughout where N must be even.  Much could be done
   to make the code more efficient. *)
structure BigNat =
struct
   open General
   open List
   open Option
   val op ^ =String.^
  
   exception Negative

   open IntInfWordUtils

   val lgBase = Word.fromInt(W.wordSize)             
   
   infix lshift (* left and right shift for words *)
   infix rshift
   (* NB.  Shift quantities and so on are always Words. *)

   val op + =W.+
   val op - =W.-
   val op * =W.*
   val op < =W.<
   val op <= = W.<=
   val op > =W.>
   val op >= = W.>=

   val op div=W.div
   val op mod=W.mod

   val dmlgBase = 
   (* dmlgBase computes div and mod by lgBase.  With luck this
      case statement will get elided and lgBase will be one of
      the powers of 2 listed *)                
   (case lgBase of
      0wx10 => (fn x=>(Word.andb(x, 0wxf),Word.>>(x,0wx4)))  
   |  0wx20 => (fn x=>(Word.andb(x,0wx1f),Word.>>(x,0wx5)))
   |  0wx40 => (fn x=>(Word.andb(x,0wx3f),Word.>>(x,0wx6)))
   |  0wx80 => (fn x=>(Word.andb(x,0wx7f),Word.>>(x,0wx7)))
   |  _ => (fn x=>(Word.mod(x,lgBase),Word.div(x,lgBase)))
   )

   val maxDigit =W.fromInt ~1

   val lgHBase = Word.div(lgBase,0w2)    (* half digits *)
   val hbase = 0w1  lshift  lgHBase
   val hmask = hbase-0w1

   fun scale(i:W.word) =((0w1 + (W.notb i div (i + 0w1))) handle Div => 0w1)
   (* = floor(2^lgBase / i+1).  We need to avoid the problem that 2^lgBase is 
      too large to be represented *) 

   type bignat = W.word list 
   (* least significant digit first.
      INVARIANT.  If bignat is non-zero, the last element MUST be non-zero.
      In other words, no leading zeros.
      (Failure here led to an elusive bug in the division routine).  When
      constructing new bignats using digit::bignat, we must use consd to check
      for 0::[], unless we can justify digit or bignat <>0. 
      *)
 
   val zero = []
   val one = [0w1:W.word]

   fun hl w=(w rshift lgHBase,W.andb(w,hmask))

   fun sh w= w lshift lgHBase
 
   fun consd (0w0:W.word, []) = []
   |   consd (d, r) = d::r
   (* assuming intelligent inlining there are many cases where consd
      will get elided since we often write functions of the form
      fun blah(h::t,...)=
         consd(...,blah(t,...))
      If the inner blah is inlined, the default case of the consd inside
      it will automatically lead to the elimination of the test for the
      outer consd. *) 

   (* check is intended for debugging *)
   fun check s n=
   (case n of
      [] => {}
   |  _ => if List.last n = (0w0:W.word) then raise Fail("Not in "^s) else {}
   )

   fun addOne [] = [0w1]
   |   addOne (m::rm) =
   let
      val next=m+0w1
   in
      if next=0w0 
      then 
         next::(addOne rm) (* addOne rm is non-zero *) 
      else 
         next::rm (* next isn't zero and rm is well-formed. *)
      
   end

   fun add ([], digits) = digits
   |   add (digits, []) = digits
   |   add (dm::rm, dn::rn) =
   let
      val dp=dm+dn
   in
      if dp<dm 
      then (* carry *)
         dp::addc(rm,rn) (* the result of addc is non-zero *)
      else
         dp::add(rm,rn) (* dp=dm+dn, dp>=dm and dp=0 implies dm=dn=0 whence rm and rn and so
                           add is non-zero *)
   end
   and addc (m, []) = addOne m
   |   addc ([], n) = addOne n
   |   addc (dm::rm, dn::rn) = 
   let
      val dp=dm+dn+0w1
   in
      if dp<=dm
      then
         (* carry *)
         dp::addc(rm,rn) (* addc is non-zero *)
      else
         dp::add(rm,rn) (* dp>dm hence is non-zero *)
   end

   fun subtOne (0w0::mr) = maxDigit::(subtOne mr)
   |   subtOne [0w1] = []
   |   subtOne (n::mr) = (n-0w1)::mr (* n=0w1 and mr=[] is impossible since handled in previous case *)
   |   subtOne [] = raise Negative

   fun subt (m, []) = m
   |   subt ([], n) = raise Negative
   |   subt (dm::rm, dn::rn) = 
   let
      val dp=dm-dn
      val res=
         if dp>dm 
         then
            (* borrow *) 
            consd(dp,subb(rm,rn))
         else
            consd(dp,subt(rm,rn))
   in
      res
   end
   and subb([],_) = raise Negative
   |   subb(r,[]) = subtOne r
   |   subb(dm::rm,dn::rn)=
   let
      val dp=dm-dn-0w1
   in
      if dp>=dm
      then
         (* borrow *)
         consd(dp,subb(rm,rn))
      else
         consd(dp,subt(rm,rn))
   end

   (* multiply bigint by digit *)
   fun muld (m, 0w0) = []
   |   muld (m, 0w1) = m (* speedup *)
   |   muld (m, i) = 
   let
      fun muldc([],0w0) = [] (* muldc(N,c)=N*i+c, c is a digit. *)
      |   muldc([],c) = [c]
      |   muldc(d::r, c) = 
      let
          val (h,l) = mul2 (d,i)
          val l1 = l+c
      in 
          if l1<l
          then
             (* extra carry *)
             l1::muldc (r, h+0w1) 
                (* r is non-zero (by well-formedness) and i is non-zero 
                  or we would not be in this clause of muld *)
  
          else
             l1::muldc (r, h) (* ditto *)
      end
   in 
      muldc (m, 0w0) 
   end

   fun mult (m, []) = []
   |   mult (m, [d]) = muld (m, d) (* speedup *)
   |   mult (m, 0w0::r) = consd (0w0, mult (m, r)) (* speedup *)
   |   mult (m, n) = 
   let 
       fun muln [] = []
       |   muln (d::r) = add (muld (n, d), consd (0w0, muln r))
   in 
       muln m
   end

   (* divide bignat by digit *)
   fun divmodd (m,0w1) = (m,0w0) (* speedup *)
   |   divmodd (m,i) =
   let
       val scale = maxDigit div i
       val i' = i * scale
       val m' = muld (m, scale)

       fun dmi [] = ([], 0w0) (* dmi N=divmod(N,i) *)
       |   dmi (d::r) = 
       let 
          val (qt,rm) = dmi r
          val (q1,r1) = divMod2((rm,d), i')
       in 
          (consd (q1,qt), r1) 
       end
       val (q,r) = dmi m'
   in 
      (q, r div scale) 
   end

   (* From Knuth Vol II, 4.3.1, but without opt. in step D3 *)
   fun divmod (m, []) = raise Div
   |   divmod ([], n) = ([], []) (* speedup *)
   |   divmod (d::r, 0w0::s) = 
   let 
      val (qt,rm) = divmod (r,s)
   in 
      (qt, consd (d, rm)) 
   end (* speedup *)
   |   divmod (m, [d]) = 
   let 
      val (qt, rm) = divmodd (m, d)
   in 
      (qt, if rm=0w0 then [] else [rm]) 
   end
   | divmod (m, n) = 
   let
      val ln =List.length n (* >= 2 *)
      val ln1=Int.-(ln,1)
      val scale = scale(List.nth(n,ln1))
      val m' = muld(m, scale)
      val n' = muld(n, scale)
      val n1 = List.nth(n',ln1) (* >= base/2 *)
      fun divl [] = ([],[]) (* divl N does long division on N by n' *)
      |   divl (d::r) = 
      let
         val (qt,rm) = divl r
         val m = consd (d, rm)
         (* msds(l,n) returns (l[n],l[n-1]) where elements of l are numbered from
            0, there are less than n+1 of them in total, and if there are fewer than
            n+1, then zeros are added *)
         fun msds ([],_) = (0w0:W.word,0w0)
         |   msds ([d],1) = (0w0,d)
         |   msds (d2::d1::_,1) = (d1,d2)
         |   msds (d::r,i) = msds (r,Int.-(i,1))
         val (m1,m2) = msds(m,ln) (* bring down next digits *)
         val tq = 
            if m1=n1 
            then 
               maxDigit
            else
               #1 (divMod2 ((m1,m2), n1))
         
         fun try (q,qn') = (q, subt (m,qn'))
            handle Negative => try (q-0w1, subt (qn', n'))
         val (q,rr) = try (tq, muld (n',tq))
      in 
         (consd (q,qt), rr) 
      end
      val (qt,rm') = divl m'
      val (rm,_(*0*)) = divmodd (rm',scale)
   in 
      (qt,rm) 
   end

   fun cmp ([],[]) = EQUAL
   |   cmp (_,[]) = GREATER
   |   cmp ([],_) = LESS
   |   cmp (i::ri,j::rj) =
      (case cmp (ri,rj) of
         EQUAL => W.compare(i,j)
      |  c => c
      ) 

   fun exp(_,0) = one
   |   exp([],n) = if Int.>(n,0) then zero else raise Div
   |   exp(m,n) = 
      if Int.<(n,0) then zero
      else 
      let
         fun expm 0 = [0w1]
         |   expm 1 = m
         |   expm i = 
         let
            val r = expm(Int.div(i,2))
            val r2 = mult (r,r)
         in
            if Int.mod(i,2)=0 then r2 else mult(r2,m)
         end
      in 
         expm n 
      end
 
   fun log2 [] = raise Domain
   |   log2 (h::t) = 
   let
      fun qlog(x:W.word)=(* greatest i with 2^i<=x *)
      let
         fun ql(lower,upper)=(* we know 2^lower<=x<2^upper *)
         let
            val mid=Word.>>(Word.+(lower,upper),0w1)
         in
            if mid=lower
            then 
               mid
            else
               if W.<=(W.<<(0w1,mid),x)
               then
                  ql(mid,upper)
               else
                  ql(lower,mid)
         end
      in
         ql(0w0,lgBase)
      end

      fun loop (d,[],lg)=Word.+(lg,qlog d)
      |   loop (_,h::t,lg)=loop (h,t,Word.+(lg,lgBase))
   in
      loop (h,t,0w0)
   end (* let *)

   (* find maximal maxpow s.t. radix^maxpow < base 
      * basepow = radix^maxpow
      *)
   fun mkPowers(radix:W.word)=
   let
      val powers=
      let
         (* compute lower bound for largest power *)
         val bnd=
         let
            val (q,r)=(W.div(maxDigit,radix),W.mod(maxDigit,radix))
         in
            q+0w1 (* N*radix>maxDigit <=> N>maxDigit/radix <=> N>=floor(maxDigit/radix)+1 *)
         end

         fun try (tp,l) = 
            if tp < bnd 
            then 
               try (radix*tp,tp::l)
            else 
               tp::l              
      in 
         Vector.fromList(List.rev(try (radix,[0w1]))) 
      end
      val maxpow = Int.-(Vector.length powers,1)
   in
      (maxpow, Vector.sub(powers,maxpow), powers)
   end

   val powers2 = _pure(mkPowers 0w2)
   val powers8 = _pure(mkPowers 0w8)
   val powers10 = _pure(mkPowers 0w10)
   val powers16 = _pure(mkPowers 0w16)

   fun fmt (pow,radpow,puti:W.word->string) n =
   (* This code formats numbers by blocking them into as many as will go into a
      W.word.  Each block is converted using puti, which is a conversion function
      supplied by NumFormat.  radpow is radix^blocksize.  NB - this method
      is very far from optimal for radices which are powers of 2. *)
   let 
      val pad = StringCvt.padLeft #"0" pow 
      (* deal with a block which is not the most significant one *)
      fun ms0(0w0,a)= (pad "")::a
      |   ms0(i,a)= (pad (puti i))::a (* do one block. a is a list of strings for each block *)
      fun ml (n,a) = (* add strings representing n to head of a *)
      (case divmodd (n, radpow) of
        ([],d) => (puti d)::a (* MS block does not get padded *)
      | (q,d) => ml (q, ms0 (d, a))
      ) 
   in 
      String.concat (ml (n,[])) 
   end

   val fmt2 = fmt (#1 powers2, #2 powers2, NumFormat.fmtWord StringCvt.BIN)
   val fmt8 = fmt (#1 powers8, #2 powers8, NumFormat.fmtWord StringCvt.OCT)
   val fmt10 = fmt (#1 powers10, #2 powers10, NumFormat.fmtWord StringCvt.DEC)
   val fmt16 = fmt (#1 powers16, #2 powers16, NumFormat.fmtWord StringCvt.HEX)
 
   fun scan (bound,powers,geti) getc cs = 
   let
   (* This code scans numbers, by blocking them.  bound is the number of digits
      to block; powers is a table of powers; geti is a converter from
      a char reader to a W.word reader; getc is the original reader; cs is
      its stream. Like fmt, this code is horribly inefficient for radices 
      which are powers of 2.
      *)
      fun get (l,cs) =
         (* get is a reader with state (count,cs) which allows us at most #bound
            characters from cs, and so implements the blocking. *) 
         if l = bound 
         then 
            NONE
         else 
            (case getc cs of
               NONE => NONE
            |  SOME(c,cs') => SOME(c,(Int.+(l,1),cs'))
            )

      fun loop (acc,cs) = 
      (* acc contains the number so far read *)
         (case geti get (0,cs) of
            NONE => (acc,cs)
         |  SOME(0w0,(sh,cs')) => (* we read sh zeros *)
               loop(muld(acc,Vector.sub(powers,sh)),cs')
         |  SOME(i,(sh,cs')) => (* We read sh characters making the non-zero number i *)
               loop(add(muld(acc,Vector.sub(powers,sh)),[i]),cs')
         )
   in
      (case geti get (0,cs) of
         NONE => NONE
      |  SOME(0w0,(_,cs')) => SOME (loop([],cs'))
      |  SOME(i,(_,cs')) => SOME (loop([i],cs'))
      )
   end

   fun scan2 getc = scan(#1 powers2, #3 powers2, NumScan.scanWord StringCvt.BIN) getc
   fun scan8 getc = scan(#1 powers8, #3 powers8, NumScan.scanWord StringCvt.OCT) getc
   fun scan10 getc = scan(#1 powers10, #3 powers10, NumScan.scanWord StringCvt.DEC) getc
   fun scan16 getc = scan(#1 powers16, #3 powers16, NumScan.scanWord StringCvt.HEX) getc

   (* Here are some binary logical operations.  In each case if one operand
      is shorter than the other it is deemed padded with zeros until both
      have the same length.  *)
   fun andb([],_)=[] (* andb is logical and *)
   |   andb(_,[])=[]
   |   andb(h1::t1,h2::t2)=
          consd(W.andb(h1,h2),andb(t1,t2))

   fun andnotb([],_)=[] (* andnotb(x,y)=x and(not y) *)
   |   andnotb(x,[])=x
   |   andnotb(h1::t1,h2::t2)=
          consd(W.andb(h1,W.notb h2),andnotb(t1,t2))

   fun orb([],y)=y (* orb is logical or *)
   |   orb(x,[])=x
   |   orb(h1::t1,h2::t2)=
          (W.orb(h1,h2)) :: (orb(t1,t2))
          (* We cannot have h1=h2=0 and t1=t2=0 or both h1::t1 and
             h2::t2 are malformed *)

   fun xorb([],y)=y
   |   xorb(x,[])=x
   |   xorb(h1::t1,h2::t2)=
          consd(W.xorb(h1,h2),xorb(t1,t2))

   (* Now we do shifts *)

   fun small_shift(x,bits,carry)=
   (* left shift x by bits, oring bottom word with carry *)
   let
      val carryshift=Word.-(lgBase,bits)
      fun do_shift([],carry)=if carry=0w0 then [] else [carry]
      |   do_shift(h::t,carry)=
          consd(W.orb(h lshift bits,carry),
             do_shift(t,h rshift carryshift))
   in
      do_shift(x,carry)
   end

   
   infix <<
   fun op << (x,n:Word.word)=
   (* shift n zeros in at the left hand end *)
   (case x of
      [] => []
   |  _ =>
   let
      val (bits,words)=dmlgBase n
      val xshifted=(* x shifted << by bits *)
         if bits=0w0
         then
            x
         else
            small_shift(x,bits,0w0)
      fun add0s(y:W.word list,0w0)=y
      |   add0s(y,n)=
          add0s(0w0::y,Word.-(n,0w1))
   in
      add0s(xshifted,words)
   end
   )

   infix >>
   fun op >>(x,n:Word.word)=
   (case x of
      [] => []
   |  h::rest =>
   let
      val (bits,words)=dmlgBase n
      val xshifted=(* x shifted >> by bits *)
         if bits=0w0
         then
            x
         else
            small_shift(rest,Word.-(lgBase,bits),h rshift bits)
   in
      (List.drop(xshifted,Word.toInt words)) handle Subscript => []
   end
   )
  
(* bignat and int are DELETED.
   (* bignat and int are provided, but only for testing purposes. (I want to glue on
      the remainder of NJ's IntInf structure to see if it works) *)
   (* bignat converts non-negative integers to bignats.  (This means that NJ's
      code has to provide special cases for Int.minInt which is a shame). *)
   fun bignat i = 
   let
      (* since word size is indeterminate (it is currently 8 bits!) we 
         do everything very very naively *)
      val _ = if i<0 then raise Fail "BigNat.bignat called on negative argument" else {}
      fun bn 0=zero
      |   bn i= (* bignat for i *)
      let
         val (iq,ir)=(Int.quot(i,2),Int.rem(i,2))
         val biq=bignat iq
         val biq2=add(biq,biq)
      in
         if ir=0 then biq2 else addOne biq2
      end
   in
      bn i
   end

   fun int n=
   if n=zero then 0
   else
   let
      val (nq,nr)=divmod(n,[0w2])
      val inq=int nq
      val inq2=Int.+(inq,inq)
   in
      if nr=zero then inq2 else Int.+(inq2,1)
   end
*)

end (* structure BigNat *)


