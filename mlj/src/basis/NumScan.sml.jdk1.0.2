(*......................................................................*)
(* MLj - a Standard ML to Java bytecode compiler                        *)
(* Copyright (C) 1999 Persimmon IT Inc.                                 *)
(*                                                                      *)
(* This program is free software; you can redistribute it and/or        *)
(* modify it under the terms of the GNU General Public License          *)
(* as published by the Free Software Foundation; either version 2       *)
(* of the License, or (at your option) any later version.               *)
(*                                                                      *)
(* This program is distributed in the hope that it will be useful,      *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with this program; if not, write to the Free Software          *)
(* Foundation, Inc., 59 Temple Place - Suite 330, Boston,               *)
(* MA 02111-1307, USA.                                                  *)
(*......................................................................*)

(* NumScan:NUMSCAN is a structure which represents scans words in a variety
   of radices.
   *)
structure NumScan:>NUMSCAN=
struct
   open Option

   structure W=IntInfWordUtils.W

   type word=W.word

   val op <  = W.<
   val op >= = W.>=
   val op +  = W.+
   val op -  = W.-
   val op *  = W.*
   
   val largestWord=W.fromInt ~1
   
   val largestWordDiv10=W.div(largestWord,0w10)
   val largestWordMod10=W.mod(largestWord,0w10)

   fun toDigit c= (* convert digit. Non-digits go to W.fromInt ~1 (the largest word), 
      so that they fail comparison tests with the radix *)
      W.fromInt
         (case c of
           #"0" => 0
         | #"1" => 1
         | #"2" => 2
         | #"3" => 3
         | #"4" => 4
         | #"5" => 5
         | #"6" => 6
         | #"7" => 7
         | #"8" => 8
         | #"9" => 9
         | #"a" => 0xa
         | #"b" => 0xb
         | #"c" => 0xc
         | #"d" => 0xd
         | #"e" => 0xe
         | #"f" => 0xf
         | #"A" => 0xa
         | #"B" => 0xb
         | #"C" => 0xc
         | #"D" => 0xd
         | #"E" => 0xe
         | #"F" => 0xf
         | _    => ~1
         )

   (* We don't check for overflows but read as many digits as possible *)
   fun scanGen radix getc cs= 
   let
      fun getdig cs=
      (case getc cs of
         NONE => NONE
      |  SOME(ch,cs') =>
         let
            val dig=toDigit ch
         in
            if W.<(dig,radix)
            then
               SOME (dig,cs')
            else
               NONE
         end
      )
       
      fun getrest(acc,cs)=
      (case getdig cs of
         NONE => SOME(acc,cs)
      |  SOME(dig,cs') => getrest(W.+(W.*(acc,radix),dig),cs')
      )
   in
      (case getdig cs of
         NONE => NONE
      |  SOME(dig,cs') => getrest(dig,cs')
      )
   end

   fun scanBin getc=scanGen(W.fromInt 2) getc
   fun scanOct getc=scanGen(W.fromInt 8) getc
   fun scanDec getc=scanGen(W.fromInt 10) getc
   fun scanHex getc=scanGen(W.fromInt 16) getc

   fun scanWord StringCvt.BIN = scanBin
   |   scanWord StringCvt.OCT = scanOct
   |   scanWord StringCvt.DEC = scanDec
   |   scanWord StringCvt.HEX = scanHex
end

