(*......................................................................*)
(* MLj - a Standard ML to Java bytecode compiler                        *)
(* Copyright (C) 1999 Persimmon IT Inc.                                 *)
(*                                                                      *)
(* This program is free software; you can redistribute it and/or        *)
(* modify it under the terms of the GNU General Public License          *)
(* as published by the Free Software Foundation; either version 2       *)
(* of the License, or (at your option) any later version.               *)
(*                                                                      *)
(* This program is distributed in the hope that it will be useful,      *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with this program; if not, write to the Free Software          *)
(* Foundation, Inc., 59 Temple Place - Suite 330, Boston,               *)
(* MA 02111-1307, USA.                                                  *)
(*......................................................................*)

(* This is the Date structure for JDK1.0.2.
  
   JDK1.0.2s date handling is fundamentally flawed.  In particular
   it assumes everyone is living in the Pacific Standard Time zone.
   We follow this.  In particular, we ignore the offset argument,
   since it is not possible to create Date objects with anything
   other than the local offset.

   Most of the code is adapted from that for Date.sml.jdk1.1.1.
   *)
structure Date :> DATE =
struct
   open Int
   open General
   open Option
   open Bool
   open List

   val op^ = String.^
   val valOf = Option.valOf 
   (* Should be safe to replace by Java.unsafeValOf *) 

   datatype weekday = 
      Mon
   |  Tue
   |  Wed
   |  Thu
   |  Fri
   |  Sat
   |  Sun

   datatype month =
      Jan
   |  Feb
   |  Mar
   |  Apr
   |  May
   |  Jun
   |  Jul
   |  Aug
   |  Sep
   |  Oct
   |  Nov
   |  Dec
   
   (* These numbers should match the month numbers specified by Java. *)
   fun monthToInt day =
   (case day of
      Jan => 0
   |  Feb => 1
   |  Mar => 2
   |  Apr => 3
   |  May => 4
   |  Jun => 5
   |  Jul => 6
   |  Aug => 7
   |  Sep => 8
   |  Oct => 9
   |  Nov => 10
   |  Dec => 11
   )   

   fun intToMonth i =
   (case i of
      0 => Jan
   |  1 => Feb 
   |  2 => Mar 
   |  3 => Apr 
   |  4 => May 
   |  5 => Jun 
   |  6 => Jul 
   |  7 => Aug 
   |  8 => Sep 
   |  9 => Oct 
   |  10 => Nov
   |  11 => Dec
   |  _  => 
      raise Fail 
        ("In Date structure, month number " ^ Int.toString i ^
         "not recognised"
         )
   )

   (* Day numbers should match those in the JDK specification.
      (These are different from those for JDK1.1.1, which
      used 1,2,... for Sunday,Monday,...). *)
   fun intToDay i =
   (case i of
      0 => Sun
   |  1 => Mon
   |  2 => Tue
   |  3 => Wed
   |  4 => Thu
   |  5 => Fri
   |  6 => Sat
   |  _ => raise Fail(
      "In Date structure, day number "^Int.toString i^" not recognised"
      )
   )

   type Date = "java.util.Date"
   type String = "java.lang.String"
   type date=Date

   exception Date = "java.lang.IllegalArgumentException"

   fun date' {year,month',day,hour,minute,second,offset}=
      _new Date(Java.fromInt(year-1900),Java.fromInt month',
         Java.fromInt day,Java.fromInt hour,Java.fromInt minute,
         Java.fromInt second)

   fun date{year,month,day,hour,minute,second,offset}=
      date'{
         year=year,month'=monthToInt month,day=day,
         hour=hour,minute=minute,second=second,offset=offset}
      

   fun compare(c1:date,c2:date)=
      if Java.toBool(_invoke "before" (c1,c2))
      then
         LESS
      else if Java.toBool(_invoke "after" (c1,c2))
      then
         GREATER
      else
         EQUAL

   fun year(d:date)=Java.toInt(_invoke "getYear" (d)) + 1900
   val year'=year

   fun month'(d:date)=Java.toInt(_invoke "getMonth" (d))
   val month=intToMonth o month' 
   fun day(d:date)=Java.toInt(_invoke "getDate" (d))
   fun hour(d:date)=Java.toInt(_invoke "getHours" (d))
   fun hour'(d:date)=
   let
      val h=hour d
   in
      if h>=12 then h-12 else h
   end
   fun minute(d:date)=Java.toInt(_invoke "getMinutes" (d))
   fun second(d:date)=Java.toInt(_invoke "getSeconds" (d))

   fun weekDay'(d:date)=Java.toInt(_invoke "getDay" (d))
   val weekDay0=weekDay'
   val weekDay=intToDay o weekDay'

   val ms_in_hour=IntInf.fromInt 3600000

   val dayMillis=Int64.*(24,3600000)
   fun millitime(d:date)=Java.toInt64(_invoke "getTime" (d))

   fun yearDay(d:date)=
   (* This function is potentially off by one if the JDK supports leap
      seconds and this is 23:59:58 or later.  It's also rather slow.
      Tough.  (It's only used in %U and %W in fmt anyway.)
      *)
   let
      val yearBegin=
         date'{year=year d,month'=0,day=1,hour=0,minute=0,second=0,offset=NONE}
   in
      Java.toInt(_cast Java.int (Java.fromInt64(Int64.quot(
         Int64.-(millitime d,millitime yearBegin),dayMillis)))) +1
   end

   fun isDst _ =NONE

   fun localOffset'(d:date)=
   let
      val offsetmin= Java.toInt(_invoke "getTimezoneOffset" d)
   in
      Time.fromSeconds(IntInf.fromInt offsetmin)
   end

   val offset=SOME o localOffset'

   fun localOffset()=localOffset'(_new Date ())
   
   fun fromTimeLocal t=
      _new Date (Java.fromInt64(Int64.fromLarge(Time.toMilliseconds t)))

   val NI=General.NotImplemented "Date.fromTimeUniv"
   fun fromTimeUniv t=
      raise NI

   fun toTime d=Time.fromMilliseconds(Int64.toLarge(millitime d))

   fun weekYear date=
   (* Week number in year, as defined for %U.
      (We cannot use the Java field since this always has the
      first day of the year with week 1) *)
   let
      val yD=yearDay date (* from 1 *)
      val wD=weekDay' date (* from 0 *)
      (* Number all days so that New Year's Day of this year is Day 1.
         This t is Day yD.

         We want the number of X such that day X is in this year, before or
         equal to t, and day X is a Sunday.
         In other words, 1<=X<=yD and day X is a Sunday.  The Sunday starting
         the week beginning t is day L, where L= yD - wD.

         So we want the number of X with 1<=X<=L with X mod 7 = L mod 7.
         Write X as L-7M.  Then we want the number of M with
            1<=L-7M<=L
         IE
            0<=M<=(L-1)/7
         IE 
            0<=M<=floor(L-1/7)
         This number is 
            floor(L-1/7) + 1
         =
            floor(L+6/7)
            L+6 is always non-negative.
         *)
         
      val k=yD-wD+6 (* k=L+6 *)
   in
      Int.quot(k,7) (* as k is always non-negative this is floor(k,7) *)
   end

   fun weekYearMonday date=
   (* Similar job for Monday.
      L = last Monday before or equal to today, then logic is the same.
      *)
   let
      val yD=yearDay date (* from 1 *)
      val wD=weekDay' date (* from 0 *)
      (* L=yD-wD+1 unless wD=0 in which case it is yD-wd-6=yd-6
         k=L+6 = yD-wD+7 or if wD=0, yd *)
      val k=
         if wD=0
         then
            yD
         else
            yD-wD+7
   in
      Int.quot(k,7)
   end

   exception readDateEx (* Raised when we fail to read a date *)

   local
      val months=
         Vector.fromList
           ["January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
            ]
      val smonths=
         Vector.fromList
           ["Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
            ]

      val weekdays=
         Vector.fromList
           ["Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
            ]
      val sweekdays=
         Vector.fromList
           ["Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
            ]
   in
      fun month_name c=
         Vector.sub(months,month' c)
      fun smonth_name c=
         Vector.sub(smonths,month' c)
      fun wkday_name c=
         Vector.sub(weekdays,weekDay' c)
      fun swkday_name c=
         Vector.sub(sweekdays,weekDay' c)
      fun ampm isafternoon=if isafternoon then "PM" else "AM"

      fun read_month'(s:string,start:int)=
      (* Return number of last month whose short name is a prefix of s[start:],
         or raise readDateEx if there is none.. *)
      let
         fun check i= (* Check from month i (numbered from 0) down *)
         let
            val mname=Vector.sub(smonths,i)
         in
            if Java.toBool(
               _invoke "startsWith" 
                  (Java.fromString s,Java.fromString mname,Java.fromInt start))
            then
               i
            else
               check(i-1)
         end
      in
         (check 11) handle Subscript => raise readDateEx
      end         
   end

   val us_smonth_name=smonth_name
   val us_swkday_name=swkday_name


   fun datetime_string (d:date)=
      Java.toString(valOf(_invoke "toLocaleString" (d)))

   val date_string=datetime_string
   val time_string=datetime_string
   (* There is no way of obtaining the local way of formatting just
      times or just dates *)

   fun timezone_string _ = "???"

   (* Here is the code for fmt, toString, scan and fromString.
      From here to the end of this file, the code should be identical
      between Date.sml.jdk1.1.1 and Date.sml.jdk1.0.2.

      The Java class DateFormat does NOT have the functionality we need;
      for example it cannot produce an abbreviated month name, nor the
      concatenation of two identical formats *)

   val YearOverflow=Fail 
      "In Date structure, years before 0 or after 9999 cannot be handled"

   (* Functions for appending a 1,2,3 or 4 digit number to a StringBuffer,
      including the zeros.  Only int4 does bounds checking, because
      it is used for years. *)
   fun int1(output,n)=
      StringBuffer.appendChar(output,Char.chr(Char.ord(#"0") + n))
   fun int2(output,n)=(int1(output,Int.quot(n,10));int1(output,Int.rem(n,10)))
   fun int3(output,n)=
      (int1(output,Int.quot(n,100));int2(output,Int.rem(n,100)))
   fun int4(output,n)=
   let
      val ()= 
         if n<0 orelse n>=10000
         then
            raise YearOverflow
         else
            ()
   in
      (int1(output,Int.quot(n,1000));int3(output,Int.rem(n,1000)))
   end 

   fun fmt (s:string) (date:date)=
   let
      (* A % at the end of the format string is ignored. *)

      val guessed_length=String.size s + Int.quot(String.size s,2)
      val output=StringBuffer.emptyWith(guessed_length)

      fun out string=StringBuffer.appendString(output,string)
      fun do_escape ch=
         (case ch of
            #"a" => out(swkday_name date)
         |  #"A" => out(wkday_name date)
         |  #"b" => out(smonth_name date)
         |  #"B" => out(month_name date)
         |  #"c" => out(datetime_string date)
         |  #"d" => int2(output,day date)
         |  #"H" => int2(output,hour date)
         |  #"I" => int2(output,
                       let 
                          val h=hour' date 
                       in 
                          if h=0 
                          then 
                             12
                          else h
                       end)
         |  #"j" => int3(output,yearDay date)
         |  #"m" => int2(output,month' date + 1)
         |  #"M" => int2(output,minute date)
         |  #"p" => out(ampm(hour date>=12))
         |  #"S" => int2(output,second date)
         |  #"U" => int2(output,weekYear date)
         |  #"w" => int1(output,weekDay0 date)
         |  #"W" => int2(output,weekYearMonday date)
         |  #"x" => out(date_string date)
         |  #"X" => out(time_string date)
         |  #"y" => int2(output,Int.rem(year' date,100)) 
                    (* year' so that BC dates are represented by
                       their absolute value - EG 386BC will go to
                       "86". *)
         |  #"Y" => int4(output,year date)
         |  #"Z" => out(timezone_string date)
         |  c    => StringBuffer.appendChar(output,c)
            (* also covers %% *)
         )

      fun dochar i=
      (* Handle from char i of the string. Raise subscript when finished.
         *)
      let
         val ch=String.sub(s,i)
      in
         if ch= #"%"
         then
           (do_escape(String.sub(s,i+1));
            dochar(i+2))
         else
           (StringBuffer.appendChar(output,ch);
            dochar(i+1))
      end

      val ()= dochar 0 handle Subscript => ()
   in
      StringBuffer.toString output
   end

   fun toString date=
   let
      val output=StringBuffer.emptyWith 24
      fun ap s=StringBuffer.appendString(output,s)
      fun space()=StringBuffer.appendChar(output,#" ")
      fun colon()=StringBuffer.appendChar(output,#":")
   in
     (ap(us_swkday_name date);
      space();
      ap(us_smonth_name date);
      space();
      int2(output,day date);
      space();
      int2(output,hour date);
      colon();
      int2(output,minute date);
      colon();
      int2(output,second date);
      space();
      int4(output,year date);
      StringBuffer.toString output
      )
   end

   fun readDate(s:string,start:int)=
   (* Read 24-character date in string, starting at s[index].
      Raise Subscript if the string isn't long enough and
      readDateEx if we can't parse it.
      This function is used for scan and fromString. 

      The main requirement seems to be that the function is inverse
      to toString, while checking as much as reasonable.  We cannot
      do anything with the weekday, so we ignore it.  However we do
      check for the other things (spaces and colons). *)
   let
      fun sub i=String.sub(s,start+i)
      fun check_colon i=if sub i= #":" then () else raise readDateEx
      fun check_space i=if sub i= #" " then () else raise readDateEx
      fun parse1 i=
      let
         val ch=sub i
         val dval=Char.ord ch - Char.ord(#"0")
      in
         if dval<0 orelse dval>9
         then
            raise readDateEx
         else
            dval
      end

      fun parse2 i=
         10*parse1 i + parse1(i+1)
 
      fun parse4 i=
         100*(parse2 i) + parse2(i+2)

      val ()=
        (check_space 3;
         check_space 7;
         check_space 10;
         check_colon 13;
         check_colon 16;
         check_space 19
         )
      
      val month'=read_month'(s,start+4)
      val day=parse2 8
      val hour=parse2 11
      val minute=parse2 14
      val second=parse2 17
      val year=parse4 20
   in
      date'{year=year,month'=month',day=day,hour=hour,minute=minute,
         second=second,offset=NONE}
   end
    
   fun fromString s=
   let
      fun first_nonspace i=
         if Char.isSpace(String.sub(s,i))
         then
            first_nonspace(i+1)
         else
            i
   in
      SOME(readDate(s,first_nonspace 0))
   end handle readDateEx => NONE | Subscript => NONE

   fun scan getc src=
   let
      val src=StringCvt.skipWS getc src
      (* Get 24 characters *)
      val output=StringBuffer.emptyWith 24
      fun doget(src,i)=
         if i=0 
         then
            src
         else
            (case getc src of
               NONE => raise readDateEx
            |  SOME(c,src) => 
                 (StringBuffer.appendChar(output,c);
                  doget(src,i-1)
                  )
            )
      val src=doget(src,24)
   in
      SOME(readDate(StringBuffer.toString output,0),src)
   end handle readDateEx => NONE
end (* struct *)



