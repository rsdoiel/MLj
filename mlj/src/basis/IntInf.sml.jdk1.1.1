(*......................................................................*)
(* MLj - a Standard ML to Java bytecode compiler                        *)
(* Copyright (C) 1999 Persimmon IT Inc.                                 *)
(*                                                                      *)
(* This program is free software; you can redistribute it and/or        *)
(* modify it under the terms of the GNU General Public License          *)
(* as published by the Free Software Foundation; either version 2       *)
(* of the License, or (at your option) any later version.               *)
(*                                                                      *)
(* This program is distributed in the hope that it will be useful,      *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with this program; if not, write to the Free Software          *)
(* Foundation, Inc., 59 Temple Place - Suite 330, Boston,               *)
(* MA 02111-1307, USA.                                                  *)
(*......................................................................*)

(*======================================================================*)
(* IntInf structure                                                     *)
(* Implements infinite precision arithmetic.                            *)
(* NB: IntInf works only on JDK1.1 or later.                            *)
(*======================================================================*)
structure IntInf : INT_INF =
struct
   local
      open Option
      open Datatypes
      open General
      open MLJIntInfUtils
      val op= = Prim.=
      structure Ui=MLJUtils.Int

      type BigInt=java.math.BigInteger

      val unsafeValOf = Prim.unsafeValOf
      fun bitlength (x:BigInt) = x.#bitLength()
      fun compareTo (x:BigInt,y:BigInt)= x.#compareTo(y)

      fun java2ml s=
      (* Convert string representing a Java integer constant to one
         representing an ML integer constant. *)

         CharVector.map
            (fn 
               #"-" => #"~"
            |  #"a" => #"A"
            |  #"b" => #"B"
            |  #"c" => #"C"
            |  #"d" => #"D"
            |  #"e" => #"E"
            |  #"f" => #"F"
            |  c    => c
            )
            s


      val mone=MLJIntInfUtils.fromInt ~1
      val zero=MLJIntInfUtils.fromInt 0
      val one=MLJIntInfUtils.fromInt 1

      fun scanDecimal radix char_reader cs=
      (* scan a string containing an ML integer *)
      let
         fun digVal ch=
         let
            val d=MLJBaseUtils.fromDigit(ch,radix)
         in
            if d= ~1 then NONE else SOME d
         end

         val cs=StringCvt.skipWS char_reader cs
         fun scanDigits(sf,cs)= (* get digits, in reverse order *)
         (case char_reader cs of
            NONE => (sf,cs)
         |  SOME (c,cs') =>
            (case digVal c of
               NONE => (sf,cs)
            |  SOME _ => scanDigits(c::sf,cs')
            )
         )

         val (is_negative,cs)=
            (case char_reader cs of
               NONE=>(false,cs)
            |  SOME(c,cs') =>
               (case c of
                  #"+" => (false,cs')
               |  #"-" => (true,cs')
               |  #"~" => (true,cs')
               |  _ => (false,cs)
               )
            )

     
         val cs=if radix=16 then MLJUtils.String.trim0x char_reader cs else cs
         val (rdigs,cs)=scanDigits([],cs)
      in
         (case rdigs of
            [] => NONE
         |  _ => 
            let
               val digs=List.rev rdigs
               val chars=if is_negative then #"-"::digs else digs
            in
               SOME(String.implode chars,cs)
            end
         )
      end   
   in
      fun toLarge x=x
      fun fromLarge x=x
      
      val toInt = MLJIntInfUtils.toInt
      val fromInt=MLJIntInfUtils.fromInt

      val precision:BigInt option=NONE
      val minInt:BigInt option=NONE
      val maxInt:BigInt option=NONE

      fun sign (x:BigInt) = x.#signum()
      fun sameSign(x,y)=(sign x = sign y)

      fun (x:BigInt) + (y:BigInt) = unsafeValOf(x.#add(y))
      fun (x:BigInt) - (y:BigInt) = unsafeValOf(x.#subtract(y))
      
      fun ~ (x:BigInt) = unsafeValOf(x.#negate ())
      
      fun x >= y = Int.>=(compareTo(x,y),0)
      fun x >  y = Int.>(compareTo(x,y),0)
      fun x <  y = Int.<(compareTo(x,y),0)
      fun x <= y = Int.<=(compareTo(x,y),0)
 
      fun abs (x:BigInt) = unsafeValOf(x.#abs())
      fun min (x:BigInt,y:BigInt) = unsafeValOf(x.#min(y))
      fun max (x:BigInt,y:BigInt) = unsafeValOf(x.#max(y))

      fun quotRem (x:BigInt,y:BigInt)=
      let
         val res_arr= unsafeValOf(x.#divideAndRemainder(y))
      in
         (unsafeValOf(Prim.arrayload(res_arr,0)),  
          unsafeValOf(Prim.arrayload(res_arr,1)))
      end
      
      fun divMod(x:BigInt,y:BigInt)=
      let
         val qr as (z,r)=quotRem(x,y)
      in
         if sameSign(x,y) orelse sign r=0
         then 
            qr
         else
            (z-one,r+y)
      end
      
      fun quot(x:BigInt,y:BigInt) = unsafeValOf(x.#divide(y))
      fun rem (x:BigInt,y:BigInt) = unsafeValOf(x.#remainder(y))

      fun x div y =
      let
         (* We do it this way because surely remainders come almost for
            free when we divide big integers? *)
         val (z,r)=quotRem(x,y)
      in
         if sameSign(x,y) orelse sign r=0 
         then 
            z 
         else 
            z-one
      end

      fun x mod y=
      let
         val r=rem(x,y)
      in
         (* if r is non-zero, r has the same sign as x and
            x mod y should have the same sign as y *)
         if sameSign(x,y) orelse sign r=0
         then
            r
         else
            r+y
      end
      
      fun compare (x,y) = 
         (case compareTo(x,y) of
            ~1 => LESS
         |  0 => EQUAL
         |  1 => GREATER
         )

      fun fmt radix (x:BigInt) =
         java2ml(unsafeValOf(x.#toString(MLJBaseUtils.radixToBase radix)))

      val toString=fmt StringCvt.DEC

      fun (x:BigInt) * (y:BigInt) = unsafeValOf(x.#multiply(y))

      fun scan radix getc cs=
      let
         val iradix=MLJBaseUtils.radixToBase radix
      in
         (case scanDecimal iradix getc cs of
            NONE => NONE
         |  SOME(s,cs) =>
            SOME(_new BigInt (s,iradix),cs)
         )
      end

      val fromString=StringCvt.scanString(scan StringCvt.DEC)

      fun log2(x)=
         if Int.<=(sign x,0) 
         then raise General.Domain
         else Int.-(bitlength x,1)

      fun pow(x:BigInt,index:Prim.int)=unsafeValOf(x.#pow(index))
      handle Div =>
         (* index<0. *)
         if x=zero then raise General.Div
         else if x=one then one
         else if x=mone then if Int.mod(index,2)=0 then one else mone
         else zero
      

      fun orb(x:BigInt,y:BigInt) = unsafeValOf(x.#or(y))
      fun andb(x:BigInt,y:BigInt) = unsafeValOf(x.#and(y))
      fun xorb(x:BigInt,y:BigInt) = unsafeValOf(x.#xor(y))
      fun notb (x:BigInt) = unsafeValOf(x.#not())
      fun <<(x:BigInt,y) = unsafeValOf(x.#shiftLeft(Prim.fromWord y))
      fun ~>>(x:BigInt,y) = unsafeValOf(x.#shiftRight(Prim.fromWord y))
      
   (* Finally . . . *)
    
      type int=IntInfDatatype.int
   end (* local *)
end (* struct *)
