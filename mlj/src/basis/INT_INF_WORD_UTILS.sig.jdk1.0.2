(*......................................................................*)
(* MLj - a Standard ML to Java bytecode compiler                        *)
(* Copyright (C) 1999 Persimmon IT Inc.                                 *)
(*                                                                      *)
(* This program is free software; you can redistribute it and/or        *)
(* modify it under the terms of the GNU General Public License          *)
(* as published by the Free Software Foundation; either version 2       *)
(* of the License, or (at your option) any later version.               *)
(*                                                                      *)
(* This program is distributed in the hope that it will be useful,      *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of       *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *)
(* GNU General Public License for more details.                         *)
(*                                                                      *)
(* You should have received a copy of the GNU General Public License    *)
(* along with this program; if not, write to the Free Software          *)
(* Foundation, Inc., 59 Temple Place - Suite 330, Boston,               *)
(* MA 02111-1307, USA.                                                  *)
(*......................................................................*)

(* IntInfWordUtils:INT_INF_WORD_UTILS contains code for manipulating
   words used for infinite precision integers.  It may be advantageous
   to code some of these functions specially for particular architectures.
    *)
signature INT_INF_WORD_UTILS=
sig
   structure W:WORD (* The words to be used.  These must have even word size. 
                       *)
   val lshift:W.word*Word.word -> W.word
   val rshift:W.word*Word.word -> W.word
   (* lshift and rshift are equivalent to W.<< and W.>>, but are only defined
      for shift quantities < W.wordSize
      *)

   val mul2:W.word*W.word -> W.word*W.word
   (* mul2(x,y) returns x*y in the form (high word,low word) *)
   val divMod2:(W.word*W.word)*W.word -> W.word*W.word
   (* divMod2((u,v),i) returns (quot,rem), the quotient and remainder of
      dividing the doubleword number with high=u and low=v by i, and is only
      defined where u<i and i has its top bit set. *)
end




