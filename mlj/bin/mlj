#!/bin/sh
#
# A modified version of SML/NJ's sml script
#

CMD=`basename $0`

#
# for /bin/ksh, disable reading user's environment file
#
unset ENV

#############################################################################
#
# BEGIN SITE SPECIFIC STUFF
#
#############################################################################

#
# SITE SPECIFIC CONFIGURATION INFO
#

APPL=mlj-jdk1.0.2

# the path of the directory in which executables (like this file) are kept.
# we just grab the directory from the command if MLJBIN hasn't been set.
if [ -z "$MLJBIN" ]; then
  BIN_DIR=`dirname $0`
else
  BIN_DIR=$MLJBIN
fi

# the path of the directory in which the heap images are kept.
HEAP_DIR=$BIN_DIR

#
# the following could be replaced with some site specific code
#
ARCH_N_OPSYS=`.arch-n-opsys`
if [ "$?" != "0" ]; then
  echo "$CMD: unable to determine architecture/operating system"
  exit 1
fi
eval $ARCH_N_OPSYS

#############################################################################
#
# END SITE SPECIFIC STUFF
#
#############################################################################

#
# Process command line arguments
# We remove this because it's not relevant to MLJ
#
ARGS=$*
  case $1 in
    -java11*)
      APPL=mlj-jdk1.1.1
      ;;
    -java10*)
      APPL=mlj-jdk1.0.2
      ;;
    *)
      if [ -f $HEAP_DIR/mlj-jdk1.1.1.$ARCH-$OPSYS ]; then
        APPL=mlj-jdk1.1.1
      fi
      ;;
  esac

if [ ! -f $HEAP_DIR/$APPL.$ARCH-$OPSYS ]; then
  echo "$CMD: cannot find heap image $HEAP_DIR/$APPL.$ARCH-$OPSYS"
  exit 1
fi

if [ "$RUN" = "" ]; then
  #
  # Construct the runtime system path from the ARCH and OS
  #
  RUN="run.$ARCH-$OPSYS"
fi

if [ "$HEAP" = "" ]; then
  #
  # Construct the heap image path from the APPL and ARCH
  #
  if [ "$APPL" = "" ]; then
    APPL=$CMD
  fi
  HEAP="@SMLload=$HEAP_DIR/$APPL"
fi

#
# run the sucker!
#
exec $RUN @SMLcmdname=$0 $HEAP $ARGS
